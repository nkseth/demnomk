"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var React = _interopRequireWildcard(require("react"));

var _reactTransitionContext = require("react-transition-context");

var _inlineStylePrefixer = _interopRequireDefault(require("inline-style-prefixer"));

/* eslint-env browser */
var defaultProps = {
  fadeInTransitionDuration: 200,
  fadeInTransitionTimingFunction: 'linear',
  fadeOutTransitionDuration: 200,
  fadeOutTransitionTimingFunction: 'linear',
  sizeTransitionDuration: 200,
  sizeTransitionTimingFunction: 'ease',
  prefixer: new _inlineStylePrefixer.default(),
  style: {},
  shouldTransition: function shouldTransition(oldChildren, newChildren) {
    if (oldChildren === newChildren) return false;

    if (React.isValidElement(oldChildren) && React.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
      return false;
    }

    return true;
  }
};

function applyDefaults(props) {
  var result = (0, _objectSpread2.default)({}, props);

  for (var key in defaultProps) {
    if (defaultProps.hasOwnProperty(key) && props[key] == null) {
      result[key] = defaultProps[key];
    }
  }

  return result;
}

var Fader =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(Fader, _React$Component);

  function Fader() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Fader);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Fader)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "lastProps", _this.props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "getDefaultedProps", function () {
      if (_this.lastProps !== _this.props || !_this.lastDefaultedProps) {
        _this.lastProps = _this.props;
        _this.lastDefaultedProps = applyDefaults(_this.props);
      }

      return _this.lastDefaultedProps;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "wrapChildren", function (children, transitionState) {
      var _this$getDefaultedPro = _this.getDefaultedProps(),
          animateWidth = _this$getDefaultedPro.animateWidth,
          prefixer = _this$getDefaultedPro.prefixer,
          viewStyle = _this$getDefaultedPro.viewStyle,
          innerViewWrapperStyle = _this$getDefaultedPro.innerViewWrapperStyle,
          fadeInTransitionDuration = _this$getDefaultedPro.fadeInTransitionDuration,
          fadeInTransitionTimingFunction = _this$getDefaultedPro.fadeInTransitionTimingFunction,
          fadeOutTransitionDuration = _this$getDefaultedPro.fadeOutTransitionDuration,
          fadeOutTransitionTimingFunction = _this$getDefaultedPro.fadeOutTransitionTimingFunction;

      var style = (0, _objectSpread2.default)({
        display: animateWidth ? 'inline-flex' : 'flex',
        transitionProperty: 'opacity'
      }, viewStyle);

      switch (transitionState) {
        case 'out':
        case 'entering':
          style.opacity = transitionState === 'entering' ? 1 : 0;
          style.transitionDuration = fadeInTransitionDuration + 'ms';
          style.transitionTimingFunction = fadeInTransitionTimingFunction;
          break;

        case 'in':
        case 'leaving':
          style.opacity = transitionState === 'in' ? 1 : 0;
          style.transitionDuration = fadeOutTransitionDuration + 'ms';
          style.transitionTimingFunction = fadeOutTransitionTimingFunction;
          break;
      }

      return React.createElement("div", {
        "data-transition-state": transitionState,
        style: prefixer.prefix(style)
      }, React.createElement("div", {
        style: prefixer.prefix((0, _objectSpread2.default)({
          width: '100%'
        }, innerViewWrapperStyle)),
        ref: function ref(c) {
          return _this.wrappedChildrenRef = c;
        }
      }, React.createElement(_reactTransitionContext.TransitionContext, {
        state: transitionState
      }, children)));
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "timeouts", {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      children: _this.props.children,
      height: undefined,
      width: undefined,
      wrappedChildren: _this.wrapChildren(_this.props.children, 'in'),
      transitionState: 'in',
      transitioningSize: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onTransitionEnd", function (e) {
      var _this$getDefaultedPro2 = _this.getDefaultedProps(),
          shouldTransition = _this$getDefaultedPro2.shouldTransition,
          fadeOutTransitionDuration = _this$getDefaultedPro2.fadeOutTransitionDuration;

      var transitionState = _this.state.transitionState;

      if (transitionState === 'leaving') {
        _this.setState({
          transitionState: 'out',
          wrappedChildren: _this.wrapChildren(_this.props.children, 'out')
        });
      } else if (transitionState === 'entering') {
        if (shouldTransition(_this.state.children, _this.props.children)) {
          _this.setState({
            transitionState: 'leaving',
            wrappedChildren: _this.wrapChildren(_this.state.children, 'leaving')
          });

          _this.setTimeout('fadeOut', _this.onTransitionEnd, fadeOutTransitionDuration);
        } else {
          _this.setState({
            transitionState: 'in',
            height: undefined,
            width: undefined,
            wrappedChildren: _this.wrapChildren(_this.props.children, 'in')
          });
        }
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "onSizeTransitionEnd", function (e) {
      _this.setState({
        transitioningSize: false
      });
    });
    return _this;
  }

  (0, _createClass2.default)(Fader, [{
    key: "setTimeout",
    value: function (_setTimeout) {
      function setTimeout(_x, _x2, _x3) {
        return _setTimeout.apply(this, arguments);
      }

      setTimeout.toString = function () {
        return _setTimeout.toString();
      };

      return setTimeout;
    }(function (name, callback, delay) {
      if (this.timeouts[name]) clearTimeout(this.timeouts[name]);
      this.timeouts[name] = setTimeout(callback, delay);
    })
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var _this$state = this.state,
          transitionState = _this$state.transitionState,
          height = _this$state.height,
          width = _this$state.width,
          transitioningSize = _this$state.transitioningSize;

      var _this$getDefaultedPro3 = this.getDefaultedProps(),
          animateHeight = _this$getDefaultedPro3.animateHeight,
          animateWidth = _this$getDefaultedPro3.animateWidth,
          _shouldTransition = _this$getDefaultedPro3.shouldTransition,
          fadeOutTransitionDuration = _this$getDefaultedPro3.fadeOutTransitionDuration,
          fadeInTransitionDuration = _this$getDefaultedPro3.fadeInTransitionDuration,
          sizeTransitionDuration = _this$getDefaultedPro3.sizeTransitionDuration;

      var shouldTransition = _shouldTransition(this.state.children, this.props.children);

      if (transitionState === 'in' && shouldTransition) {
        var newState = {};
        newState.children = this.props.children;
        newState.transitionState = 'leaving';
        newState.wrappedChildren = this.wrapChildren(this.state.children, 'leaving');
        this.setTimeout('fadeOut', this.onTransitionEnd, fadeOutTransitionDuration);

        if (animateHeight && height === undefined && this.wrappedChildrenRef) {
          newState.height = this.wrappedChildrenRef.clientHeight;
        }

        if (animateWidth && width === undefined && this.wrappedChildrenRef) {
          newState.width = this.wrappedChildrenRef.clientWidth;
        }

        this.setState(newState);
      } else if (transitionState === 'leaving' && (animateHeight || animateWidth)) {
        if (!transitioningSize) this.setState({
          transitioningSize: true
        });
      } else if (transitionState === 'out') {
        var _newState = {};

        if (shouldTransition) {
          _newState.children = this.props.children;
          _newState.wrappedChildren = this.wrapChildren(this.props.children, 'out');
        } else {
          _newState.transitionState = 'entering';
          _newState.children = this.props.children;
          _newState.wrappedChildren = this.wrapChildren(this.props.children, 'entering');
          this.setTimeout('fadeIn', this.onTransitionEnd, fadeInTransitionDuration);

          if (animateHeight) {
            if (this.wrappedChildrenRef) {
              _newState.height = this.wrappedChildrenRef.clientHeight;
            }

            this.setTimeout('height', this.onSizeTransitionEnd, sizeTransitionDuration);
          }

          if (animateWidth) {
            if (this.wrappedChildrenRef) {
              _newState.width = this.wrappedChildrenRef.clientWidth;
            }

            this.setTimeout('width', this.onSizeTransitionEnd, sizeTransitionDuration);
          }
        }

        this.setState(_newState);
      } else if (!shouldTransition && this.state.children !== this.props.children) {
        var _newState2 = {};
        _newState2.children = this.props.children;
        _newState2.wrappedChildren = this.wrapChildren(this.props.children, transitionState);
        this.setState(_newState2);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      for (var _name in this.timeouts) {
        clearTimeout(this.timeouts[_name]);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
          height = _this$state2.height,
          width = _this$state2.width,
          transitioningSize = _this$state2.transitioningSize,
          wrappedChildren = _this$state2.wrappedChildren;

      var _this$getDefaultedPro4 = this.getDefaultedProps(),
          animateWidth = _this$getDefaultedPro4.animateWidth,
          className = _this$getDefaultedPro4.className,
          prefixer = _this$getDefaultedPro4.prefixer,
          innerRef = _this$getDefaultedPro4.innerRef,
          _style = _this$getDefaultedPro4.style,
          sizeTransitionDuration = _this$getDefaultedPro4.sizeTransitionDuration,
          sizeTransitionTimingFunction = _this$getDefaultedPro4.sizeTransitionTimingFunction;

      var style = (0, _objectSpread2.default)({
        height: height,
        width: width,
        display: animateWidth ? 'inline-block' : 'block'
      }, _style);

      if (transitioningSize) {
        style.overflow = 'hidden';
        style.transition = "height ".concat(sizeTransitionDuration, "ms ").concat(sizeTransitionTimingFunction, ", width ").concat(sizeTransitionDuration, "ms ").concat(sizeTransitionTimingFunction);
      }

      return React.createElement("div", {
        className: className,
        style: prefixer.prefix(style),
        ref: innerRef
      }, wrappedChildren);
    }
  }]);
  return Fader;
}(React.Component);

exports.default = Fader;