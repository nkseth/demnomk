{"ast":null,"code":"const winston = require(\"winston\");\n\nconst {\n  combine,\n  timestamp,\n  printf\n} = winston.format;\n\nconst path = require(\"path\");\n\nconst myFormat = printf(({\n  level,\n  message,\n  timestamp\n}) => {\n  return `${timestamp} [${level}]: ${message}`;\n});\nconst logger = winston.createLogger({\n  level: \"error\",\n  format: combine(timestamp(), myFormat),\n  transports: [new winston.transports.File({\n    filename: path.join(process.cwd(), \"log\", \"info.log\"),\n    level: \"info\",\n    maxsize: 5242880,\n    maxFiles: 2\n  }), new winston.transports.File({\n    filename: path.join(process.cwd(), \"log\", \"error.log\"),\n    level: \"error\",\n    maxsize: 5242880,\n    maxFiles: 2\n  }), new winston.transports.File({\n    filename: path.join(process.cwd(), \"log\", \"http.log\"),\n    level: \"http\",\n    maxsize: 5242880,\n    maxFiles: 2\n  })],\n  exceptionHandlers: [new winston.transports.File({\n    filename: path.join(process.cwd(), \"log\", \"exceptions.log\")\n  })],\n  exitOnError: false\n});\n\nif (false) {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\nexport default logger;","map":null,"metadata":{},"sourceType":"module"}