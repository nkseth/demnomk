{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { BoxStyle2, FormErrorMsg, Loading } from \"../../../../../common\";\nimport EmailVerifyIcon from \"../../../../../../assets/images/email-veri.png\";\nimport { client_sendVerifyEmail, client_verifyEmail } from \"../../../../../../lib/api/client/clientUserPanel\";\nimport { toast } from \"react-toastify\";\nimport { getErrorMsg } from \"../../../../../../lib/helpers\";\nimport { useSelector } from \"react-redux\";\nimport { selectLang } from \"../../../../../../appConfigSlice\";\nimport { getToastConfig } from \"../../../../../../lib/toast\";\nimport { PROFILE } from \"./Profile\";\nimport Timer from \"react-compound-timer/build\";\nimport { validateEmpty } from \"../../../../../../lib/formValidator\";\n\nconst ProfileVerifyEmail = ({\n  handleSitu,\n  email\n}) => {\n  const {\n    0: code,\n    1: setCode\n  } = useState(\"\");\n  const {\n    0: sendEmailLoading,\n    1: setSendEmailLoading\n  } = useState(false);\n  const {\n    0: submitLoading,\n    1: setSubmitLoading\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  let can_send_new_email = false;\n  const lang = useSelector(selectLang); // const [errors]\n\n  const sendEmail = () => {\n    setSendEmailLoading(true);\n    client_sendVerifyEmail({\n      email\n    }).then(res => {\n      setSendEmailLoading(false);\n    }).catch(err => {\n      toast.error(\"error occurred\", getToastConfig());\n      setSendEmailLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    sendEmail();\n    return () => {};\n  }, []);\n\n  const handleResendEmail = e => {\n    e.preventDefault();\n    sendEmail();\n    can_send_new_email = false;\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (submitLoading) return;\n\n    for (let key in errors) {\n      if (errors[key]) {\n        toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n        return;\n      }\n    }\n\n    setSubmitLoading(true);\n\n    try {\n      const res = await client_verifyEmail({\n        email,\n        code\n      });\n      toast.success(getErrorMsg(lang, \"verification-succes\"), getToastConfig());\n      handleSitu(PROFILE);\n    } catch (err) {\n      toast.error(err.response.data.message, getToastConfig());\n      setSubmitLoading(false);\n    }\n  };\n\n  return __jsx(BoxStyle2, null, __jsx(\"section\", {\n    className: \"container-fluid verify-email-cnt\"\n  }, __jsx(\"div\", {\n    className: \"verify-email\"\n  }, sendEmailLoading ? __jsx(Loading, {\n    width: \"40px\",\n    height: \"40px\",\n    styleSheet: {\n      margin: \"60px auto 40px auto\"\n    }\n  }) : __jsx(\"img\", {\n    alt: \"verify your email\",\n    src: EmailVerifyIcon,\n    className: \"verify-email__img\"\n  }), __jsx(\"p\", {\n    className: \"verify-email__top-text\"\n  }, __jsx(Translate, {\n    id: \"email-verify.check-email\"\n  })), __jsx(\"p\", {\n    className: \"verify-email__btm-text\"\n  }, __jsx(Translate, {\n    id: \"email-verify.enter-code\"\n  })), __jsx(\"form\", {\n    className: \"verify-email__form\",\n    onSubmit: handleSubmit\n  }, __jsx(Translate, null, ({\n    translate: t\n  }) => {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"verify-email__input-cnt\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      className: \"gray__input\",\n      name: \"code\",\n      value: code,\n      required: true,\n      placeholder: t(\"email-verify.verification-code-placeholder\"),\n      onChange: e => {\n        setCode(e.target.value);\n        validateEmpty({\n          name: \"code\",\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      },\n      onBlur: e => {\n        validateEmpty({\n          name: \"code\",\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    })), __jsx(FormErrorMsg, {\n      show: errors[\"code\"],\n      msg: errors[\"code\"]\n    }));\n  }), __jsx(\"button\", {\n    className: \"primary-btn no-address__btn\"\n  }, submitLoading ? __jsx(Loading, {\n    type: \"white\",\n    width: \"20px\",\n    height: \"20px\"\n  }) : __jsx(Translate, {\n    id: \"email-verify.verify\"\n  })))), __jsx(Timer, {\n    initialTime: 180000,\n    direction: \"backward\"\n  }, ({\n    start,\n    reset,\n    getTime\n  }) => {\n    if (getTime() <= 0) {\n      can_send_new_email = true;\n    }\n\n    return __jsx(\"div\", {\n      className: \"timer mt-5 d-flex align-items-center justify-content-center\"\n    }, __jsx(\"span\", {\n      className: \"timer__count\"\n    }, __jsx(Timer.Minutes, null), \" : \", __jsx(Timer.Seconds, null)), __jsx(\"a\", {\n      onClick: e => {\n        if (!can_send_new_email) return;\n        handleResendEmail(e);\n        reset();\n        start();\n      },\n      className: \"timer__text\"\n    }, __jsx(Translate, {\n      id: \"profile.send-new-email\"\n    })));\n  })));\n};\n\nexport default ProfileVerifyEmail;","map":null,"metadata":{},"sourceType":"module"}