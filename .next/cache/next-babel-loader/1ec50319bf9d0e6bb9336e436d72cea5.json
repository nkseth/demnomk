{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { BoxStyle1, Loading } from \"../../../../../common\";\nimport { connect } from \"react-redux\";\nimport Modal from \"react-modal\";\nimport { selectLang } from \"../../../../../../appConfigSlice\";\nimport { validateConfirmPassword, validateEmpty } from \"../../../../../../lib/formValidator\";\nimport { client_updateProfile, client_changeCustomerPassword } from \"../../../../../../lib/api/client/clientUserPanel\";\nimport { FormErrorMsg } from \"../../../../../common\";\nimport { toast } from \"react-toastify\";\nimport { getToastConfig } from \"../../../../../../lib/toast\";\nimport { getErrorMsg } from \"../../../../../../lib/helpers\";\nimport { isRtl } from \"../../../../../../lib/isRtl\";\nimport DatePicker from \"react-datepicker\";\nimport Select from \"react-select\";\nimport { client_getActiveCities, client_getActiveCountries, client_getActiveProvince } from \"../../../../../../lib/api/client/clientShop\";\n\nconst renderBoxHeader = () => {\n  return __jsx(\"div\", {\n    className: \"profile-edit__header-container\"\n  }, __jsx(\"h2\", {\n    className: \"profile-edit__box-header\"\n  }, __jsx(Translate, {\n    id: \"profile.editprofile\"\n  })), __jsx(\"p\", {\n    className: \"profile-edit__box-subheader\"\n  }, __jsx(Translate, {\n    id: \"profile.manageprofile\"\n  })));\n};\n\nclass ProfileEdit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"renderPasswordModal\", () => {\n      return __jsx(Translate, null, ({\n        translate: t\n      }) => {\n        return __jsx(\"form\", {\n          className: \"changepass\",\n          onSubmit: this.handleSubmitChangePass\n        }, __jsx(\"header\", {\n          className: \"changepass__header\"\n        }, __jsx(\"h2\", {\n          className: \"changepass__header-text\"\n        }, t(\"profile.changepass\"))), __jsx(\"div\", {\n          className: \"changepass__content\"\n        }, __jsx(\"p\", {\n          className: \"changepass__des\"\n        }, t(\"profile.des-changepass\")), __jsx(\"label\", {\n          className: \"changepass__input-cnt gray__form-label\"\n        }, __jsx(\"span\", {\n          className: \"gray__input-label\"\n        }, t(\"profile.cur-pass\")), __jsx(\"input\", {\n          className: \"gray__input\",\n          type: \"password\",\n          placeholder: t(\"profile.cur-pass-placeholder\"),\n          onBlur: e => {\n            validateEmpty({\n              name: \"curr\",\n              value: e.target.value,\n              handler: this.setErrors,\n              lang: this.lang\n            });\n          },\n          required: true,\n          onChange: this.handleChangeCurrPass,\n          value: this.state.currPass\n        }), __jsx(FormErrorMsg, {\n          show: this.state.errors[\"curr\"],\n          msg: this.state.errors[\"curr\"]\n        })), __jsx(\"label\", {\n          className: \"changepass__input-cnt gray__form-label\"\n        }, __jsx(\"span\", {\n          className: \"gray__input-label\"\n        }, t(\"profile.new-pass\")), __jsx(\"input\", {\n          className: \"gray__input\",\n          type: \"password\",\n          placeholder: t(\"profile.new-pass-placeholder\"),\n          onBlur: e => {\n            validateEmpty({\n              name: \"pass\",\n              value: e.target.value,\n              handler: this.setErrors,\n              lang: this.lang\n            });\n          },\n          required: true,\n          onChange: this.handleChangepass,\n          value: this.state.pass\n        }), __jsx(FormErrorMsg, {\n          show: this.state.errors[\"pass\"],\n          msg: this.state.errors[\"pass\"]\n        })), __jsx(\"label\", {\n          className: \"changepass__input-cnt gray__form-label mt-5\"\n        }, __jsx(\"span\", {\n          className: \"gray__input-label\"\n        }, t(\"profile.con-pass\")), __jsx(\"input\", {\n          className: \"gray__input\",\n          type: \"password\",\n          placeholder: t(\"profile.con-pass-placeholder\"),\n          required: true,\n          value: this.state.cPass,\n          onBlur: e => {\n            validateConfirmPassword({\n              name: e.target.name,\n              value1: this.state.pass,\n              value2: e.target.value,\n              handler: this.setErrors,\n              lang: this.context.lang\n            });\n          },\n          onChange: e => {\n            this.handleConfirmPassChange(e);\n            validateConfirmPassword({\n              name: \"cpassword\",\n              value1: this.state.pass,\n              value2: e.target.value,\n              handler: this.setErrors,\n              lang: this.context.lang\n            });\n          }\n        }), __jsx(FormErrorMsg, {\n          show: this.state.errors[\"cpassword\"],\n          msg: this.state.errors[\"cpassword\"]\n        }))), __jsx(\"footer\", {\n          className: \"changepass__footer\"\n        }, __jsx(\"button\", {\n          onClick: this.handleModalClose,\n          className: \"changepass__footer-btn\",\n          type: \"button\"\n        }, t(\"profile.cancel\")), __jsx(\"button\", {\n          className: \"changepass__footer-btn changepass__footer-btn--primary\"\n        }, this.state.showPassLoader ? __jsx(Loading, {\n          type: \"gray\",\n          width: \"11%\",\n          height: \"70%\"\n        }) : t(\"profile.save-pass\"))));\n      });\n    });\n\n    _defineProperty(this, \"setErrors\", func => {\n      const error = func(this.state.errors);\n      this.setState({\n        errors: error\n      });\n    });\n\n    _defineProperty(this, \"clickHandler\", e => {\n      e.preventDefault();\n      this.setState({\n        isPasswordModalOpen: true\n      });\n    });\n\n    _defineProperty(this, \"handleModalClose\", () => {\n      this.setState({\n        isPasswordModalOpen: false\n      });\n    });\n\n    _defineProperty(this, \"handleChangeName\", e => {\n      this.setState({\n        name: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleFamily\", e => {\n      this.setState({\n        family: e.target.value\n      }, () => {});\n    });\n\n    _defineProperty(this, \"handleChangeCurrPass\", e => {\n      this.setState({\n        currPass: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleChangepass\", e => {\n      this.setState({\n        pass: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleChangepass\", e => {\n      this.setState({\n        pass: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleConfirmPassChange\", e => {\n      this.setState({\n        cPass: e.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", async e => {\n      e.preventDefault();\n\n      for (let key in this.state.errors) {\n        if (this.state.errors[key]) {\n          console.log(\"error\");\n          return;\n        }\n      }\n\n      try {\n        var _this$state$date, _this$state$selectedC, _this$state$selectedC2, _this$state$selectedP;\n\n        this.setState({\n          showLoader: true\n        });\n        let result = await client_updateProfile({\n          userName: this.state.email,\n          name: this.state.name,\n          family: this.state.family,\n          nationalCode: this.state.nationalCode,\n          birthDate: (_this$state$date = this.state.date) === null || _this$state$date === void 0 ? void 0 : _this$state$date.toLocaleDateString(),\n          FkCountryId: (_this$state$selectedC = this.state.selectedCountry) === null || _this$state$selectedC === void 0 ? void 0 : _this$state$selectedC.value,\n          FkCityId: (_this$state$selectedC2 = this.state.selectedCity) === null || _this$state$selectedC2 === void 0 ? void 0 : _this$state$selectedC2.value,\n          FkProvinceId: (_this$state$selectedP = this.state.selectedProvince) === null || _this$state$selectedP === void 0 ? void 0 : _this$state$selectedP.value\n        });\n\n        if (result.status == 200) {\n          toast.success(getErrorMsg(this.props.lang, \"succ-update-profile\"), getToastConfig());\n        }\n      } catch (error) {\n        var _error$response;\n\n        toast.error((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.message, getToastConfig());\n      }\n\n      this.setState({\n        showLoader: false\n      });\n    });\n\n    _defineProperty(this, \"handleSubmitChangePass\", async e => {\n      e.preventDefault();\n\n      for (let key in this.state.errors) {\n        if (this.state.errors[key]) {\n          return;\n        }\n      }\n\n      try {\n        this.setState({\n          showPassLoader: true\n        });\n        let result = await client_changeCustomerPassword({\n          oldPassword: this.state.currPass,\n          newPassword: this.state.pass,\n          userName: this.state.email\n        });\n\n        if (result.status == 200) {\n          toast.success(getErrorMsg(this.props.lang, \"succ-update-password\"), getToastConfig());\n          this.setState({\n            isPasswordModalOpen: false\n          });\n        }\n      } catch (error) {\n        var _error$response2;\n\n        toast.error((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data.message, getToastConfig());\n      }\n\n      this.setState({\n        showPassLoader: false\n      });\n    });\n\n    _defineProperty(this, \"handleCountryChange\", async item => {\n      this.setState(state => {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selectedCountry: item,\n          selectedCity: null,\n          selectedProvince: null\n        });\n      });\n      const result = await client_getActiveProvince(item.value);\n      let provinces = [];\n      result.result.forEach(item => {\n        provinces.push({\n          value: item.provinceId,\n          label: item.provinceName\n        });\n      });\n      provinces.sort(this.compare);\n      this.setState(state => {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          form: _objectSpread(_objectSpread({}, state.form), {}, {\n            provinces: provinces\n          })\n        });\n      }); // const result = await client_getActiveCities(item.value);\n      // let cities = [];\n      // result.result.forEach((item) => {\n      //   cities.push({ value: item.cityId, label: item.cityTitle });\n      // });\n      // this.setState((state) => {\n      //   return {\n      //     ...state,\n      //     form: {\n      //       ...state.form,\n      //       cities: cities,\n      //     },\n      //   };\n      // });\n    });\n\n    _defineProperty(this, \"handleProvinceChange\", async item => {\n      var _this$state$selectedP2;\n\n      this.setState(state => {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selectedProvince: item,\n          selectedCity: null\n        });\n      });\n      const result = await client_getActiveCities(item.value);\n\n      if (item.value != ((_this$state$selectedP2 = this.state.selectedProvince) === null || _this$state$selectedP2 === void 0 ? void 0 : _this$state$selectedP2.value)) {\n        this.setState(state => {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            selectedProvince: null\n          });\n        });\n      }\n\n      let cities = [];\n      result.result.forEach(item => {\n        cities.push({\n          value: item.cityId,\n          label: item.cityTitle\n        });\n      });\n      cities.sort(this.compare);\n      this.setState(state => {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          form: _objectSpread(_objectSpread({}, state.form), {}, {\n            cities: cities\n          })\n        });\n      }); // setCityItems(cities);\n      // setProvinceEmptyError(false);\n    });\n\n    this.state = {\n      form: {\n        countries: [],\n        provinces: [],\n        cities: []\n      },\n      nationalCode: \"\",\n      birthdat: \"\",\n      email: \"\",\n      family: \"\",\n      name: \"\",\n      errors: \"\",\n      currPass: \"\",\n      pass: \"\",\n      cPass: \"\",\n      selectedCountry: null,\n      selectedCity: null,\n      selectedProvince: null,\n      customerId: 0,\n      componentLogged: false,\n      showLoader: false,\n      showPassLoader: false,\n      date: null\n    };\n    this.is_rtl = isRtl(this.props.lang);\n    this.handleChangeName = this.handleChangeName.bind(this);\n    this.handleFamily = this.handleFamily.bind(this);\n    this.handleChangeCurrPass = this.handleChangeCurrPass.bind(this);\n    this.handleChangepass = this.handleChangepass.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      componentLogged: false\n    }); // get active countries\n\n    client_getActiveCountries().then(res => {\n      let countries = [];\n      res.result.forEach(item => {\n        countries.push({\n          value: item.countryId,\n          label: item.countryTitle,\n          iso: item.iso,\n          phoneCode: item.phoneCode\n        });\n        this.setState(state => {\n          return {\n            form: _objectSpread(_objectSpread({}, state.form), {}, {\n              countries: countries\n            })\n          };\n        });\n      });\n    });\n\n    if (this.props.state.fkCountryId) {\n      this.handleCountryChange({\n        value: this.props.state.fkCountryId,\n        label: this.props.state.countryName\n      });\n    }\n\n    if (this.props.state.fkProvinceId) {\n      this.handleProvinceChange({\n        value: this.props.state.fkProvinceId,\n        label: this.props.state.provinceName\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.getData();\n  }\n\n  componentDidUpdate() {\n    if (!this.state.componentLogged && this.props.state.email != \"\") {\n      this.setState({\n        name: this.props.state.name,\n        family: this.props.state.family,\n        email: this.props.state.email,\n        customerId: this.props.state.customerId,\n        componentLogged: true,\n        selectedCountry: this.props.state.fkCountryId ? {\n          value: this.props.state.fkCountryId,\n          label: this.props.state.countryName\n        } : null,\n        selectedProvince: this.props.state.fkProvinceId ? {\n          value: this.props.state.fkProvinceId,\n          label: this.props.state.provinceName\n        } : null,\n        selectedCity: this.props.state.fkCityId ? {\n          value: this.props.state.fkCityId,\n          label: this.props.state.cityName\n        } : null\n      }); // if (this.props.state.fkCountryId) {\n      //   this.handleCountryChange({ value: this.props.state.fkCountryId, label: this.props.state.countryName });\n      // }\n    }\n  }\n\n  compare(a, b) {\n    return a.label > b.label ? 1 : b.label > a.label ? -1 : 0;\n  }\n\n  render() {\n    return __jsx(BoxStyle1, {\n      headerContent: renderBoxHeader()\n    }, __jsx(Modal, {\n      closeTimeoutMS: 200,\n      className: \"changepass-modal\",\n      overlayClassName: \"editProfileOverly\",\n      onRequestClose: this.handleModalClose,\n      isOpen: this.state.isPasswordModalOpen,\n      ariaHideApp: false\n    }, this.renderPasswordModal(0)), __jsx(\"section\", {\n      className: \"container-fluid profile-edit\"\n    }, __jsx(\"form\", {\n      className: \"profile-edit__form-container mt-4\",\n      onSubmit: this.handleSubmit\n    }, __jsx(Translate, null, ({\n      translate\n    }) => {\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"row no-gutters justify-content-between\"\n      }, __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(\"label\", {\n        className: \"profile-edit__form-label gray__form-label mt-3\"\n      }, __jsx(\"span\", {\n        className: \"profile-edit__input-label gray__input-label\"\n      }, __jsx(Translate, {\n        id: \"profile.firstname\"\n      }), __jsx(\"span\", {\n        className: \"input-required\"\n      }, \"*\")), __jsx(\"input\", {\n        className: \"profile-edit__input gray__input\",\n        type: \"text\",\n        onBlur: e => {\n          validateEmpty({\n            name: \"name\",\n            value: e.target.value,\n            handler: this.setErrors,\n            lang: this.lang\n          });\n        },\n        required: true,\n        onChange: this.handleChangeName,\n        value: this.state.name\n      }), __jsx(FormErrorMsg, {\n        show: this.state.errors[\"name\"],\n        msg: this.state.errors[\"name\"]\n      }))), __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(\"label\", {\n        className: \"profile-edit__form-label gray__form-label mt-3\"\n      }, __jsx(\"span\", {\n        className: \"profile-edit__input-label gray__input-label\"\n      }, __jsx(Translate, {\n        id: \"profile.lastname\"\n      }), __jsx(\"span\", {\n        className: \"input-required\"\n      }, \"*\")), __jsx(\"input\", {\n        className: \"profile-edit__input gray__input\",\n        type: \"text\",\n        onBlur: e => {\n          validateEmpty({\n            name: \"family\",\n            value: e.target.value,\n            handler: this.setErrors,\n            lang: this.lang\n          });\n        },\n        required: true,\n        onChange: this.handleFamily,\n        value: this.state.family\n      }), __jsx(FormErrorMsg, {\n        show: this.state.errors[\"family\"],\n        msg: this.state.errors[\"family\"]\n      })))), __jsx(\"div\", {\n        className: \"row no-gutters justify-content-between mt-4\"\n      }, __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(\"label\", {\n        className: \"profile-edit__form-label gray__form-label mt-3\"\n      }, __jsx(\"span\", {\n        className: \"profile-edit__input-label gray__input-label\"\n      }, __jsx(Translate, {\n        id: \"profile.national-code\"\n      })), __jsx(\"input\", {\n        className: \"profile-edit__input gray__input\",\n        type: \"text\" // onChange={this.handleChangeName}\n        ,\n        value: this.state.nationalCode,\n        placeholder: translate(\"profile.national-code-placeholder\"),\n        onChange: e => {\n          this.setState({\n            nationalCode: e.target.value\n          });\n        }\n      }))), __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(\"label\", {\n        className: \"profile-edit__form-label gray__form-label mt-3\"\n      }, __jsx(\"span\", {\n        className: \"profile-edit__input-label gray__input-label\"\n      }, __jsx(Translate, {\n        id: \"profile.birthday-date\"\n      })), __jsx(DatePicker, {\n        placeholderText: \"Click to select a date\",\n        peekNextMonth: true,\n        showMonthDropdown: true,\n        showYearDropdown: true,\n        withPortal: true,\n        dropdownMode: \"select\",\n        selected: this.state.date,\n        onChange: date => {\n          this.setState({\n            date\n          });\n        },\n        className: \"profile-edit__input gray__input\"\n      })))), __jsx(\"div\", {\n        className: \"row no-gutters justify-content-between mt-4\"\n      }, __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(\"label\", {\n        className: \"profile-edit__form-label gray__form-label mt-3\"\n      }, __jsx(\"span\", {\n        className: \"auth__input-label\"\n      }, __jsx(Translate, {\n        id: \"addresses.country\"\n      })), __jsx(Select, {\n        className: \"react-select\",\n        options: this.state.form.countries // isDisabled={isDisableCountry}\n        ,\n        onChange: this.handleCountryChange,\n        placeholder: translate(\"addresses.country-placeholder\"),\n        value: this.state.selectedCountry,\n        required: true\n      }))), __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(\"label\", {\n        className: \"profile-edit__form-label gray__form-label mt-3\"\n      }, __jsx(\"span\", {\n        className: \"auth__input-label\"\n      }, __jsx(Translate, {\n        id: \"addresses.province\"\n      })), __jsx(Select, {\n        className: \"react-select\",\n        options: this.state.form.provinces,\n        onChange: item => {\n          this.handleProvinceChange(item); // setSelectedProvince(item);\n        },\n        placeholder: translate(\"addresses.province-placeholder\"),\n        value: this.state.selectedProvince,\n        required: true\n      })))), __jsx(\"div\", {\n        className: \"row no-gutters justify-content-between mt-2\"\n      }, __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(\"label\", {\n        className: \"profile-edit__form-label gray__form-label mt-3\"\n      }, __jsx(\"span\", {\n        className: \"auth__input-label\"\n      }, __jsx(Translate, {\n        id: \"addresses.city\"\n      })), __jsx(Select, {\n        className: \"react-select\",\n        options: this.state.form.cities // isDisabled={isDisableCountry}\n        ,\n        onChange: item => {\n          this.setState({\n            selectedCity: item\n          });\n        },\n        placeholder: translate(\"addresses.city-placeholder\"),\n        value: this.state.selectedCity,\n        required: true\n      }))), __jsx(\"div\", {\n        className: \"col-md-6\"\n      }, __jsx(\"label\", {\n        className: \"profile-edit__form-label gray__form-label mt-3\"\n      }, __jsx(\"span\", {\n        className: \"profile-edit__input-label gray__input-label\"\n      }, __jsx(Translate, {\n        id: \"profile.email1\"\n      })), __jsx(\"input\", {\n        className: \"profile-edit__input gray__input\",\n        type: \"email\",\n        placeholder: translate(\"profile.email-placeholder\"),\n        required: true,\n        readOnly: true,\n        value: this.state.email\n      }), __jsx(\"span\", {\n        className: \"profile-edit__sub-label-form\"\n      }, __jsx(Translate, {\n        id: \"profile.cantchange\"\n      }))))), __jsx(\"div\", {\n        className: \"profile-edit__passchange-link-cnt\"\n      }, __jsx(\"a\", {\n        onClick: this.clickHandler,\n        className: \"profile-edit__passchange-link\"\n      }, __jsx(Translate, {\n        id: \"profile.changepass\"\n      }))), __jsx(\"button\", {\n        className: \"primary-btn profile-edit__save-btn\",\n        type: \"submit\"\n      }, this.state.showLoader ? __jsx(Loading, {\n        type: \"gray\",\n        width: \"20px\",\n        height: \"20px\"\n      }) : __jsx(Translate, {\n        id: \"profile.save\"\n      })));\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    lang: selectLang(state)\n  };\n};\n\nexport default connect(mapStateToProps)(ProfileEdit);","map":null,"metadata":{},"sourceType":"module"}