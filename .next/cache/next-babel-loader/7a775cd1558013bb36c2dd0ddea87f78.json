{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { BoxStyle2, SelectBox3 as SelectBox, FormErrorMsg, Loading } from \"../../../../../common\";\nimport PaymentAside from \"./PaymentAside\";\nimport { Translate } from \"react-localize-redux\";\nimport { useState } from \"react\";\nimport ItemsBox from \"../ItemsBox\";\nimport { orderContext } from \"../../OrderContext\";\nimport { ProtraitPhonesAndBigger, ProtraitPhones } from \"../../../../../../Responsive\";\nimport { useEffect } from \"react\";\nimport { client_getActivePayment, client_getOrder, client_getPaymentPageUrl } from \"../../../../../../lib/api/client/clientOrder\";\nimport { toast } from \"react-toastify\";\nimport { getErrorMsg } from \"../../../../../../lib/helpers\";\nimport { getToastConfig } from \"../../../../../../lib/toast\";\nimport { selectLang } from \"../../../../../../appConfigSlice\";\nimport { useSelector } from \"react-redux\";\nimport Select from \"react-select\";\nimport Cookies from \"js-cookie\";\nimport { validateEmpty, validateCreditCard, validatePostalCode } from \"../../../../../../lib/formValidator\";\n\nconst Payment = () => {\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(false);\n  const {\n    0: payment,\n    1: setPayment\n  } = useState(null);\n  const {\n    0: paymentType,\n    1: setPaymentType\n  } = useState(null);\n  const {\n    0: cartType,\n    1: setCartType\n  } = useState(null);\n  const {\n    0: cartTypeId,\n    1: setCartTypeId\n  } = useState(null);\n  const {\n    0: placeOrderLoading,\n    1: setPlaceOrderLoading\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: cardName,\n    1: setCardName\n  } = useState(null);\n  const {\n    0: cardNumber,\n    1: setCardNumber\n  } = useState(null);\n  const {\n    0: cardMonth,\n    1: setCardMonth\n  } = useState(null);\n  const {\n    0: cardYear,\n    1: setCardYear\n  } = useState(null);\n  const {\n    0: cardSecurity,\n    1: setCardSecurity\n  } = useState(null);\n  const {\n    0: cardZip,\n    1: setCardZip\n  } = useState(null);\n  const lang = useSelector(selectLang);\n  const coupon = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name_coupon);\n\n  const handleChange = check => {\n    setChecked(check);\n  };\n\n  useEffect(() => {\n    Promise.all([client_getOrder(coupon), client_getActivePayment()]).then(res => {\n      setPayment(res[0].result);\n      let cards = [];\n      res[1].result.forEach(item => {\n        cards.push({\n          value: item.methodId,\n          label: __jsx(\"div\", null, __jsx(\"img\", {\n            src: `${process.env.NEXT_PUBLIC_PAYMENTLOGO_PREFIX}/${item.methodImageUrl}`,\n            height: \"20px\",\n            width: \"20px\"\n          }), \" \", item.methodTitle)\n        });\n      });\n      setCartTypeId(cards.find(x => x.value === 3));\n      setCartType(cards);\n    }).catch(ex => console.error(ex)); // client_getOrder()\n    //   .then((res) => {\n    //     \n    //   })\n    //   .catch((err) => {\n    //     console.log(err);\n    //   });\n    // client_getActivePayment()\n    //   .then((res) => {\n    //   })\n    //   .catch((err) => {});\n\n    return () => {};\n  }, []);\n\n  if (!payment) {\n    return __jsx(\"div\", {\n      className: \"row payment no-gutters\"\n    }, __jsx(Loading, {\n      type: \"gray\",\n      styleSheet: {\n        margin: \"80px auto\"\n      },\n      width: \"60px\",\n      height: \"60px\"\n    }));\n  }\n\n  const onCartTypeChange = event => {\n    setCartTypeId(event);\n  };\n\n  const handlePlaceOrderClick = async e => {\n    e.preventDefault();\n\n    if (!cartTypeId) {\n      toast.error(getErrorMsg(lang, \"select-payment\"), getToastConfig());\n      return;\n    }\n\n    if (placeOrderLoading) return;\n\n    for (let key in errors) {\n      if (errors[key]) {\n        toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n        return;\n      }\n    }\n\n    setPlaceOrderLoading(true);\n\n    try {\n      const result = await client_getPaymentPageUrl(parseInt(cartTypeId.value), cardName, cardNumber, cardMonth, cardYear, cardSecurity, cardZip, coupon);\n\n      if (result.status == \"200\") {\n        window.location.href = result.result;\n      }\n\n      setPlaceOrderLoading(false);\n    } catch (err) {\n      var _err$response$data$re;\n\n      if ((_err$response$data$re = err.response.data.result) === null || _err$response$data$re === void 0 ? void 0 : _err$response$data$re.errorText) {\n        var _err$response$data$re2;\n\n        toast.error((_err$response$data$re2 = err.response.data.result) === null || _err$response$data$re2 === void 0 ? void 0 : _err$response$data$re2.errorText, getToastConfig());\n      } else toast.error(err.response.data.message, getToastConfig());\n\n      setPlaceOrderLoading(false);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"row payment no-gutters\"\n  }, __jsx(\"section\", {\n    className: \"col-xl-9 col-lg-8 col-12 order-md-1 order-2\"\n  }, __jsx(\"form\", {\n    className: \"mt-4\",\n    onSubmit: handlePlaceOrderClick\n  }, __jsx(BoxStyle2, {\n    headerContent: __jsx(\"h2\", {\n      className: \"payment__box-header\"\n    }, __jsx(Translate, {\n      id: \"payment.payment\"\n    })),\n    className: \"payment__payment-detail-cnt\"\n  }, __jsx(\"div\", {\n    className: \"row mt-4\"\n  }, __jsx(Select, {\n    className: \"react-select col-md-4 col-8\",\n    options: cartType,\n    value: cartTypeId,\n    onChange: onCartTypeChange\n  })), (cartTypeId === null || cartTypeId === void 0 ? void 0 : cartTypeId.value) === 2 ? __jsx(\"div\", {\n    className: \"payment-method__container mt-4\"\n  }, __jsx(\"div\", {\n    className: \"payment__payment-method\"\n  }, __jsx(Translate, null, ({\n    translate\n  }) => {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3 credimax-card-name\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.name-on-card\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"payment-method__input gray__input\",\n      type: \"text\",\n      required: true,\n      name: \"cardName\",\n      value: cardName,\n      onChange: e => {\n        setCardName(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"cardName\"],\n      msg: errors[\"cardName\"]\n    }))), __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3 credimax-card-number\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.card-number\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"payment-method__input gray__input\",\n      type: \"text\",\n      placeholder: \"---- ---- ---- ----\",\n      name: \"cardNumber\",\n      value: cardNumber,\n      onChange: e => {\n        setCardNumber(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateCreditCard({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      onBlur: e => {\n        validateCreditCard({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"cardNumber\"],\n      msg: errors[\"cardNumber\"]\n    }))), __jsx(\"div\", {\n      className: \"col-md-3 col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.expiry-date\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"div\", {\n      className: \"d-flex\"\n    }, __jsx(\"input\", {\n      className: \"payment-method__input gray__input date-input-month\",\n      type: \"text\",\n      placeholder: \"MM\",\n      required: true,\n      maxLength: \"2\",\n      name: \"cardMonth\",\n      value: cardMonth,\n      onChange: e => {\n        setCardMonth(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    }), __jsx(\"input\", {\n      className: \"payment-method__input gray__input date-input-year\",\n      type: \"text\",\n      placeholder: \"YY\",\n      maxLength: \"2\",\n      required: true,\n      name: \"cardYear\",\n      value: cardYear,\n      onChange: e => {\n        setCardYear(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    })))), __jsx(\"div\", {\n      className: \"col-md-3 p-md-0 col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3 w-100\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.security-code\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"payment-method__input gray__input\",\n      type: \"text\",\n      required: true,\n      name: \"cardSecurity\",\n      value: cardSecurity,\n      onChange: e => {\n        setCardSecurity(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    })))), __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-md-3 col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3 w-100\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.postal-code\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"payment-method__input gray__input\",\n      type: \"text\",\n      name: \"cardZip\",\n      value: cardZip,\n      onChange: e => {\n        setCardZip(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    })))));\n  }))) : __jsx(\"div\", {\n    className: \"payment-method__container mt-4\"\n  }, __jsx(\"div\", {\n    className: \"payment__payment-method p-4\"\n  }, __jsx(Translate, null, ({\n    translate\n  }) => {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(Translate, {\n      id: \"payment-method.redirectToPyamnetPage\"\n    }))));\n  }))), __jsx(ProtraitPhonesAndBigger, null, __jsx(\"div\", {\n    className: \"payment__btn-cnt d-flex mt-5\"\n  }, __jsx(orderContext.Consumer, null, context => __jsx(\"button\", {\n    className: \"primary-btn\"\n  }, placeOrderLoading ? __jsx(Loading, {\n    type: \"white\",\n    width: \"20px\",\n    height: \"20px\"\n  }) : (cartTypeId === null || cartTypeId === void 0 ? void 0 : cartTypeId.value) === 2 ? __jsx(Translate, {\n    id: \"payment-method.complate-payment\"\n  }) : __jsx(Translate, {\n    id: \"common.place-order\"\n  }))))), __jsx(ProtraitPhones, null, __jsx(\"div\", {\n    className: \"checkout-fix justify-content-center\"\n  }, __jsx(orderContext.Consumer, null, context => __jsx(\"button\", {\n    className: \"primary-btn returns__add-btn\"\n  }, placeOrderLoading ? __jsx(Loading, {\n    type: \"white\",\n    width: \"20px\",\n    height: \"20px\"\n  }) : (cartTypeId === null || cartTypeId === void 0 ? void 0 : cartTypeId.value) === 2 ? __jsx(Translate, {\n    id: \"payment-method.complate-payment\"\n  }) : __jsx(Translate, {\n    id: \"common.place-order\"\n  })))))), __jsx(ItemsBox, {\n    count: payment.itemsCount,\n    items: payment.items\n  }))), __jsx(\"aside\", {\n    className: \"col-xl-3 col-lg-4 col-12 order-md-2 order-1\"\n  }, __jsx(PaymentAside, {\n    data: payment\n  })));\n};\n\nexport default Payment;","map":null,"metadata":{},"sourceType":"module"}