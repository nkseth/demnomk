{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { ReactComponent as EditIcon } from \"../../../../../../../assets/icons/edit.svg\";\nimport { LandScapePhones } from \"../../../../../../../Responsive\";\nimport { validateEmpty, validatePhoneNumber } from \"../../../../../../../lib/formValidator\";\nimport { FormErrorMsg, Loading } from \"./../../../../../../common\";\nimport { useSelector } from \"react-redux\";\nimport { selectLang, selectCurr } from \"../../../../../../../appConfigSlice\";\nimport { client_getActiveCountries, client_getActiveCities, client_editAddAddress, client_getActiveProvince } from \"../../../../../../../lib/api/client/clientShop\";\nimport { client_addAddress } from \"../../../../../../../lib/api/client/clientShop\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { getToastConfig } from \"../../../../../../../lib/toast\";\nimport { getErrorMsg } from \"./../../../../../../../lib/helpers\";\nimport { useEffect } from \"react\";\nimport Select from \"react-select\";\nimport { isRtl } from \"./../../../../../../../lib/isRtl\";\nimport { useHistory } from \"react-router-dom\";\nexport default (function (_ref) {\n  var handleSituation = _ref.handleSituation,\n      data = _ref.data,\n      editItem = _ref.editItem,\n      setData = _ref.setData;\n\n  var _useState = useState(\"\"),\n      mobile = _useState[0],\n      setMobile = _useState[1];\n\n  var _useState2 = useState({}),\n      errors = _useState2[0],\n      setErrors = _useState2[1];\n\n  var lang = useSelector(selectLang);\n  var curr = useSelector(selectCurr);\n\n  var _useState3 = useState(\"\"),\n      firstname = _useState3[0],\n      setFirstname = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      lastname = _useState4[0],\n      setLanstname = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      postalCode = _useState5[0],\n      setPostalCode = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      phoneCode = _useState6[0],\n      setPhoneCode = _useState6[1];\n\n  var _useState7 = useState(0),\n      addressId = _useState7[0],\n      setAddressId = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      addressTitle = _useState8[0],\n      setAddressTitle = _useState8[1];\n\n  var _useState9 = useState(0),\n      selectedCountry = _useState9[0],\n      setSelectedCountry = _useState9[1];\n\n  var _useState10 = useState(false),\n      isDisableCountry = _useState10[0],\n      setDisableCountry = _useState10[1];\n\n  var _useState11 = useState(0),\n      selectedCity = _useState11[0],\n      setSelectedCity = _useState11[1];\n\n  var _useState12 = useState(0),\n      selectedProvince = _useState12[0],\n      setSelectedProvince = _useState12[1];\n\n  var _useState13 = useState([]),\n      countryItems = _useState13[0],\n      setCountryItems = _useState13[1];\n\n  var _useState14 = useState([]),\n      cityItems = _useState14[0],\n      setCityItems = _useState14[1];\n\n  var _useState15 = useState([]),\n      provinceItems = _useState15[0],\n      setProvinceItems = _useState15[1];\n\n  var _useState16 = useState(false),\n      addressEmptyError = _useState16[0],\n      setAddressEmptyError = _useState16[1];\n\n  var _useState17 = useState(false),\n      countryEmptyError = _useState17[0],\n      setCountryEmptyError = _useState17[1];\n\n  var _useState18 = useState(false),\n      cityEmptyError = _useState18[0],\n      setcityEmptyError = _useState18[1];\n\n  var _useState19 = useState(false),\n      provinceEmptyError = _useState19[0],\n      setProvinceEmptyError = _useState19[1];\n\n  var _useState20 = useState(false),\n      isEditState = _useState20[0],\n      setIsEditState = _useState20[1];\n\n  var _useState21 = useState(false),\n      submitLoading = _useState21[0],\n      setSubmitLoading = _useState21[1];\n\n  var history = useHistory();\n  useEffect(function () {\n    if (editItem != null) {\n      setIsEditState(true);\n      setEditData();\n    } else {\n      getCountris();\n    }\n\n    return function () {\n      editItem = null;\n    };\n  }, []);\n\n  function compare(a, b) {\n    return a.label > b.label ? 1 : b.label > a.label ? -1 : 0;\n  }\n\n  var setEditData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var city, province, country;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (data.address == undefined) {\n                setAddressTitle(editItem.address);\n                data.address = editItem.address;\n                data.Location = {\n                  lat: editItem.locationX,\n                  lng: editItem.locationY\n                };\n              }\n\n              setAddressId(editItem.addressId);\n              setPostalCode(editItem.postalCode);\n              setLanstname(editItem.transfereeFamily);\n              setFirstname(editItem.transfereeName);\n              setMobile(editItem.transfereeMobile);\n              city = {\n                value: editItem.fkCityId,\n                label: editItem.cityName\n              };\n              province = {\n                value: editItem.fkProvinceId,\n                label: editItem.provinceName\n              };\n              country = {\n                value: editItem.fkCountryId,\n                label: editItem.countryName,\n                phoneCode: editItem.phoneCode\n              };\n              _context.next = 11;\n              return getCountris();\n\n            case 11:\n              if (!(data.iso === undefined)) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 14;\n              return handleCountryChange(country);\n\n            case 14:\n              setSelectedCountry(country);\n              setSelectedCity(city);\n              setSelectedProvince(province);\n              setDisableCountry(true);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function setEditData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getAddressHandler = function getAddressHandler() {\n    handleSituation({\n      type: \"showMap\"\n    });\n  };\n\n  var getCountris = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var result, countries, currentCountry;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return client_getActiveCountries();\n\n            case 2:\n              result = _context2.sent;\n              countries = [];\n              result.result.forEach(function (item) {\n                countries.push({\n                  value: item.countryId,\n                  label: item.countryTitle,\n                  iso: item.iso,\n                  phoneCode: item.phoneCode\n                });\n              });\n              countries.sort(compare);\n              setCountryItems(countries);\n\n              if (!(data.iso !== undefined)) {\n                _context2.next = 22;\n                break;\n              }\n\n              currentCountry = countries.filter(function (x) {\n                return x.iso === data.iso;\n              });\n\n              if (!(currentCountry.length > 0)) {\n                _context2.next = 16;\n                break;\n              }\n\n              setSelectedCountry(currentCountry[0]);\n              setAddressTitle(data.address);\n              setDisableCountry(true);\n              handleCountryChange(currentCountry[0]);\n              _context2.next = 22;\n              break;\n\n            case 16:\n              toast.error(getErrorMsg(lang, \"country-add-address\"), getToastConfig());\n              setDisableCountry(false);\n              setSelectedCountry(0);\n              setSelectedCity(0);\n              setPhoneCode(\"\");\n              return _context2.abrupt(\"return\");\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getCountris() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleCountryChange = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(item) {\n      var result, provinces;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              setPhoneCode(item.phoneCode);\n\n              if (item.value != (selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.value)) {\n                setSelectedProvince(0);\n                setSelectedCity(0);\n              }\n\n              _context3.next = 4;\n              return client_getActiveProvince(item.value);\n\n            case 4:\n              result = _context3.sent;\n              provinces = [];\n              result.result.forEach(function (item) {\n                provinces.push({\n                  value: item.provinceId,\n                  label: item.provinceName\n                });\n              });\n              provinces.sort(compare);\n              setProvinceItems(provinces);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function handleCountryChange(_x) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleProvinceChange = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(item) {\n      var result, cities;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return client_getActiveCities(item.value);\n\n            case 2:\n              result = _context4.sent;\n\n              if (item.value != (selectedProvince === null || selectedProvince === void 0 ? void 0 : selectedProvince.value)) {\n                setSelectedCity(0);\n              }\n\n              cities = [];\n              result.result.forEach(function (item) {\n                cities.push({\n                  value: item.cityId,\n                  label: item.cityTitle\n                });\n              });\n              cities.sort(compare);\n              setCityItems(cities);\n              setProvinceEmptyError(false);\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function handleProvinceChange(_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(e) {\n      var key, result, _result;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!submitLoading) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 3:\n              if (!(data.address == undefined)) {\n                _context5.next = 6;\n                break;\n              }\n\n              setAddressEmptyError(true);\n              return _context5.abrupt(\"return\");\n\n            case 6:\n              if (!(selectedCountry == 0)) {\n                _context5.next = 9;\n                break;\n              }\n\n              setCountryItems(true);\n              return _context5.abrupt(\"return\");\n\n            case 9:\n              if (!(selectedProvince == 0)) {\n                _context5.next = 12;\n                break;\n              }\n\n              setProvinceEmptyError(true);\n              return _context5.abrupt(\"return\");\n\n            case 12:\n              if (!(selectedCity == 0)) {\n                _context5.next = 15;\n                break;\n              }\n\n              setcityEmptyError(true);\n              return _context5.abrupt(\"return\");\n\n            case 15:\n              _context5.t0 = _regeneratorRuntime.keys(errors);\n\n            case 16:\n              if ((_context5.t1 = _context5.t0()).done) {\n                _context5.next = 23;\n                break;\n              }\n\n              key = _context5.t1.value;\n\n              if (!errors[key]) {\n                _context5.next = 21;\n                break;\n              }\n\n              toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n              return _context5.abrupt(\"return\");\n\n            case 21:\n              _context5.next = 16;\n              break;\n\n            case 23:\n              setSubmitLoading(true);\n\n              if (isEditState) {\n                _context5.next = 31;\n                break;\n              }\n\n              _context5.next = 27;\n              return client_addAddress({\n                transfereeMobile: mobile,\n                postalCode: postalCode,\n                address: data.address,\n                locationX: data.Location.lat,\n                locationY: data.Location.lng,\n                transfereeName: firstname,\n                transfereeFamily: lastname,\n                fkCountryId: selectedCountry.value,\n                fkCityId: selectedCity.value,\n                fkProvinceId: selectedProvince.value,\n                isDefualt: data.isDefault\n              });\n\n            case 27:\n              result = _context5.sent;\n\n              if (result.status == 200) {\n                toast.success(getErrorMsg(lang, \"success-add-address\"), getToastConfig());\n                setcityEmptyError(false);\n                setProvinceEmptyError(false);\n                setAddressEmptyError(false);\n                setCountryEmptyError(false);\n                setSubmitLoading(false);\n                setData({\n                  phoneNumberVeri: {\n                    requestId: result.result.requestId,\n                    addressId: result.result.addressId,\n                    phoneNumber: mobile,\n                    phoneIso: selectedCountry.iso,\n                    phoneCode: phoneCode\n                  }\n                });\n                handleSituation({\n                  type: \"phoneveri\"\n                }); // history.push(\"/\" + curr + \"-\" + lang + \"/panel/addresses\");\n              }\n\n              _context5.next = 35;\n              break;\n\n            case 31:\n              _context5.next = 33;\n              return client_editAddAddress({\n                transfereeMobile: mobile,\n                postalCode: postalCode,\n                address: data.address,\n                locationX: data.Location.lat,\n                locationY: data.Location.lng,\n                transfereeName: firstname,\n                transfereeFamily: lastname,\n                fkCountryId: selectedCountry.value,\n                fkCityId: selectedCity.value,\n                fkProvinceId: selectedProvince.value,\n                addressId: addressId,\n                cityName: selectedCity.label,\n                countryName: selectedCountry.label\n              });\n\n            case 33:\n              _result = _context5.sent;\n\n              if (_result.status == 200) {\n                toast.success(getErrorMsg(lang, \"success-update-address\"), getToastConfig());\n                editItem = null;\n                setcityEmptyError(false);\n                setProvinceEmptyError(false);\n                setAddressEmptyError(false);\n                setCountryEmptyError(false);\n                setSubmitLoading(false);\n                setIsEditState(true);\n                history.push(\"/\" + curr + \"-\" + lang + \"/panel/addresses\");\n              }\n\n            case 35:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function handleSubmit(_x3) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Translate, null, function (_ref7) {\n    var _jsx;\n\n    var t = _ref7.translate;\n    return __jsx(\"form\", {\n      onSubmit: function onSubmit($event) {\n        handleSubmit($event);\n      }\n    }, __jsx(\"section\", {\n      className: \"add-address-step1 no-gutters\"\n    }, __jsx(ToastContainer, _extends({\n      rtl: isRtl(lang)\n    }, getToastConfig())), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"div\", {\n      className: \"d-flex justify-content-between add-address-step1__mapinput gray__input clearfix\"\n    }, __jsx(\"div\", {\n      className: \"col\"\n    }, __jsx(\"span\", {\n      className: \"add-address-step1__mapinput-text\"\n    }, __jsx(Translate, {\n      id: \"addresses.setmap\"\n    })), __jsx(\"span\", {\n      className: \"add-address-step1__mapinput-value\"\n    }, addressTitle)), __jsx(\"button\", {\n      onClick: getAddressHandler,\n      className: \"add-address-step1__mapinput-btn\"\n    }, __jsx(EditIcon, null)))), addressEmptyError && __jsx(\"span\", {\n      className: \"custom-error\"\n    }, __jsx(Translate, {\n      id: \"addresses.empty-address-error\"\n    }))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"addresses.country\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(Select, {\n      className: \"react-select\",\n      options: countryItems,\n      isDisabled: isDisableCountry,\n      onChange: function onChange(item) {\n        handleCountryChange(item);\n        setSelectedCountry(item);\n      },\n      placeholder: t(\"addresses.country-placeholder\"),\n      value: selectedCountry,\n      required: true\n    })), countryEmptyError && __jsx(\"span\", {\n      className: \"country-error\"\n    }, __jsx(Translate, {\n      id: \"addresses.country-placeholder\"\n    })))), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"addresses.province\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(Select, (_jsx = {\n      className: \"react-select\",\n      options: provinceItems,\n      onChange: setSelectedProvince\n    }, _defineProperty(_jsx, \"onChange\", function onChange(item) {\n      handleProvinceChange(item);\n      setSelectedProvince(item);\n    }), _defineProperty(_jsx, \"placeholder\", t(\"addresses.province-placeholder\")), _defineProperty(_jsx, \"value\", selectedProvince), _defineProperty(_jsx, \"required\", true), _jsx))), provinceEmptyError && __jsx(\"span\", {\n      className: \"country-error\"\n    }, __jsx(Translate, {\n      id: \"addresses.province-placeholder\"\n    }))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"addresses.city\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(Select, {\n      className: \"react-select\",\n      options: cityItems,\n      onChange: function onChange(item) {\n        setSelectedCity(item);\n        setcityEmptyError(false);\n      },\n      placeholder: t(\"addresses.city-placeholder\"),\n      value: selectedCity,\n      required: true\n    })), cityEmptyError && __jsx(\"span\", {\n      className: \"country-error\"\n    }, __jsx(Translate, {\n      id: \"addresses.city-placeholder\"\n    })))), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.firstname\"), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"text\",\n      name: \"firstname\",\n      placeholder: t(\"addresses.firstname-placeholder\"),\n      onChange: function onChange(e) {\n        setFirstname(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang: lang\n          });\n        }\n      },\n      value: firstname,\n      required: true,\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"firstname\"],\n      msg: errors[\"firstname\"]\n    }))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.lastname\"), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"text\",\n      name: \"lastname\",\n      placeholder: t(\"addresses.lastname-placeholder\"),\n      onChange: function onChange(e) {\n        setLanstname(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang: lang\n          });\n        }\n      },\n      required: true,\n      value: lastname,\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"lastname\"],\n      msg: errors[\"lastname\"]\n    })))), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.mobile-number\"), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"div\", {\n      className: \"add-address-step1__mobile-cnt\"\n    }, __jsx(\"span\", {\n      className: \"add-address-step1__mobile-code\"\n    }, \"+\", phoneCode), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"tel\",\n      required: true,\n      name: \"phone\",\n      maxLength: \"15\",\n      placeholder: t(\"addresses.mobile-number-placeholder\"),\n      value: mobile,\n      onChange: function onChange(e) {\n        setMobile(e.target.value);\n\n        if (errors[e.target.name]) {\n          validatePhoneNumber({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang: lang,\n            iso: selectedCountry.iso\n          });\n        }\n      },\n      onBlur: function onBlur(e) {\n        validatePhoneNumber({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang,\n          iso: selectedCountry.iso\n        });\n      }\n    })), __jsx(FormErrorMsg, {\n      show: errors[\"phone\"],\n      msg: errors[\"phone\"]\n    }))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.postal-code\")), __jsx(\"input\", {\n      className: \"gray__input\",\n      name: \"postalCode\",\n      placeholder: t(\"addresses.postal-code-placeholder\"),\n      type: \"text\",\n      pattern: \"[0-9]*\",\n      value: postalCode,\n      onChange: function onChange(e) {\n        setPostalCode(e.target.value);\n      }\n    }))))), __jsx(LandScapePhones, {\n      className: \"add-address-step1__check\"\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"setDefault\",\n      name: \"setDefault\",\n      value: \"Bike\"\n    }), __jsx(\"label\", {\n      htmlFor: \"setDefault\"\n    }, t(\"addresses.set-default-add\"))), __jsx(\"div\", {\n      className: \"add-address-step1__btn-cnt\"\n    }, __jsx(\"button\", {\n      className: \"primary-btn add-address-step1__btn\",\n      type: \"submit\"\n    }, submitLoading ? __jsx(Loading, {\n      type: \"white\",\n      width: \"20px\",\n      height: \"20px\"\n    }) : isEditState ? t(\"addresses.edit\") : t(\"addresses.save\"))));\n  });\n});","map":null,"metadata":{},"sourceType":"module"}