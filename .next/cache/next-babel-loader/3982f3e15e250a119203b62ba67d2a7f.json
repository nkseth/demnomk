{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _extraReducers;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createAsyncThunk, createAction } from \"@reduxjs/toolkit\";\nimport { client_fetchProvider } from \"../../../../lib/api/client/clientProvider\";\nimport { providerPageFiltersDefaults } from \"../../../../lib/querys\";\nexport var LOADING = \"loading\";\nexport var IDLE = \"idle\";\nexport var SUCCEEDED = \"succeeded\";\nexport var ERROR = \"error\";\nexport var initialState = {\n  status: IDLE,\n  error: null,\n  provider: {\n    goods: {\n      count: 0,\n      data: []\n    }\n  },\n  providerName: \"\",\n  changeUrl: false,\n  filters: providerPageFiltersDefaults\n}; //// selectors\n\nexport var selectFilters = function selectFilters(state) {\n  return state.provider.filters;\n};\nexport var selectGoods = function selectGoods(state) {\n  return state.provider.provider.goods || {};\n};\nexport var selectProvider = function selectProvider(state) {\n  return state.provider.provider;\n}; // export const selectSearch = (state) => state.provider.provider;\n\nexport var selectSpecs = function selectSpecs(state) {\n  return state.provider.provider.specs;\n};\nexport var selectBrands = function selectBrands(state) {\n  return state.provider.provider.brands;\n};\nexport var selectShop = function selectShop(state) {\n  return state.provider.provider.shop;\n};\nexport var selectShopSlider = function selectShopSlider(state) {\n  return state.provider.provider.shop.shopSlider;\n};\nexport var selectChangeUrl = function selectChangeUrl(state) {\n  return state.provider.changeUrl;\n};\nexport var selectParentCategory = function selectParentCategory(state) {\n  return state.provider.provider.parentCategory;\n};\nexport var selectChildCategory = function selectChildCategory(state) {\n  return state.provider.provider.childCategory;\n};\nexport var selectProviderName = function selectProviderName(state) {\n  return state.provider.providerName;\n};\nexport var selectProviderStatus = function selectProviderStatus(state) {\n  return state.provider.status;\n}; /// server action creator\n\nexport var serverProviderUpdate = createAction(\"provider/serverUpdate\"); //// thunk actions\n\nexport var fetchProvider = createAsyncThunk(\"provider/fetchProvider\", /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, _ref) {\n    var dispatch, getState, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch = _ref.dispatch, getState = _ref.getState;\n            dispatch(changeUrl());\n            _context.next = 4;\n            return client_fetchProvider(data, selectProviderName(getState()));\n\n          case 4:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}()); /// search slice\n\nvar providerSlice = createSlice({\n  name: \"provider\",\n  initialState: initialState,\n  reducers: {\n    changeUrl: function changeUrl(state) {\n      state.changeUrl = !state.changeUrl;\n    },\n    orderByTypeAdded: function orderByTypeAdded(state, action) {\n      state.filters.orderByType = action.payload;\n    },\n    pageSizeAdded: function pageSizeAdded(state, action) {\n      state.filters.pageSize = action.payload;\n    },\n    priceAdded: function priceAdded(state, action) {\n      state.filters.fromPrice = action.payload.fromPrice;\n      state.filters.toPrice = action.payload.toPrice;\n    },\n    goodsCreatedDayAdded: function goodsCreatedDayAdded(state, action) {\n      state.filters.goodsCreatedDay = action.payload;\n    },\n    goodsOptionsAdded: function goodsOptionsAdded(state, action) {\n      state.filters.optionIds = action.payload;\n    },\n    brandAdded: function brandAdded(state, action) {\n      state.filters.brandId = action.payload;\n    },\n    pageChanged: function pageChanged(state, action) {\n      state.filters.pageNumber = action.payload;\n    },\n    mobileFilterUpdate: function mobileFilterUpdate(state, action) {\n      var brandsId = action.payload.brandsId;\n      var specsId = action.payload.specsId;\n      var arrival = action.payload.arrival;\n      var priceFrom = action.payload.price.min || state.filters.fromPrice;\n      var priceTo = action.payload.price.max || state.filters.toPrice;\n      state.filters.brandId = brandsId;\n      state.filters.optionIds = specsId;\n      state.filters.goodsCreatedDay = parseInt(arrival);\n      state.filters.fromPrice = parseInt(priceFrom);\n      state.filters.toPrice = parseInt(priceTo);\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, fetchProvider.pending, function (state, action) {\n    state.status = LOADING;\n  }), _defineProperty(_extraReducers, fetchProvider.fulfilled, function (state, action) {\n    var _result$specs, _result$brands;\n\n    state.status = SUCCEEDED;\n    var result = action.payload.result; //// generate optimize specs\n\n    var newSpecs = {};\n    (_result$specs = result.specs) === null || _result$specs === void 0 ? void 0 : _result$specs.forEach(function (spec) {\n      var _spec$options;\n\n      var newOptions = {};\n      (_spec$options = spec.options) === null || _spec$options === void 0 ? void 0 : _spec$options.forEach(function (option) {\n        newOptions[option.optionId] = option;\n      });\n      newSpecs[spec.specId] = _objectSpread(_objectSpread({}, spec), {}, {\n        options: newOptions\n      });\n    }); //// generate optimized brands\n\n    var newBrands = {};\n    (_result$brands = result.brands) === null || _result$brands === void 0 ? void 0 : _result$brands.forEach(function (brand) {\n      newBrands[brand.brandId] = brand;\n    });\n    result.specs = newSpecs;\n    result.brands = newBrands;\n    state.provider = result;\n  }), _defineProperty(_extraReducers, fetchProvider.rejected, function (state, action) {\n    state.status = ERROR;\n  }), _defineProperty(_extraReducers, serverProviderUpdate, function (state, action) {\n    var _result$specs2, _result$brands2;\n\n    var result = action.payload.provider;\n    var newSpecs = {};\n    (_result$specs2 = result.specs) === null || _result$specs2 === void 0 ? void 0 : _result$specs2.forEach(function (spec) {\n      var _spec$options2;\n\n      var newOptions = {};\n      (_spec$options2 = spec.options) === null || _spec$options2 === void 0 ? void 0 : _spec$options2.forEach(function (option) {\n        newOptions[option.optionId] = option;\n      });\n      newSpecs[spec.specId] = _objectSpread(_objectSpread({}, spec), {}, {\n        options: newOptions\n      });\n    }); //// generate optimized brands\n\n    var newBrands = {};\n    (_result$brands2 = result.brands) === null || _result$brands2 === void 0 ? void 0 : _result$brands2.forEach(function (brand) {\n      newBrands[brand.brandId] = brand;\n    });\n    result.brands = newBrands;\n    result.specs = newSpecs;\n    state.status = SUCCEEDED;\n    state.provider = result;\n    state.filters = action.payload.filters;\n    state.providerName = action.payload.providerName;\n  }), _extraReducers)\n});\nvar _providerSlice$action = providerSlice.actions,\n    orderByTypeAdded = _providerSlice$action.orderByTypeAdded,\n    pageSizeAdded = _providerSlice$action.pageSizeAdded,\n    priceAdded = _providerSlice$action.priceAdded,\n    goodsCreatedDayAdded = _providerSlice$action.goodsCreatedDayAdded,\n    changeUrl = _providerSlice$action.changeUrl,\n    goodsOptionsAdded = _providerSlice$action.goodsOptionsAdded,\n    brandAdded = _providerSlice$action.brandAdded,\n    mobileFilterUpdate = _providerSlice$action.mobileFilterUpdate,\n    pageChanged = _providerSlice$action.pageChanged;\nexport { orderByTypeAdded, pageSizeAdded, priceAdded, goodsCreatedDayAdded, changeUrl, goodsOptionsAdded, brandAdded, mobileFilterUpdate, pageChanged };\nexport var orderByTypeAddedAction = function orderByTypeAddedAction(orderType) {\n  return function (dispatch, getState) {\n    dispatch(orderByTypeAdded(orderType));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport var pageSizeAddedAction = function pageSizeAddedAction(pageSize) {\n  return function (dispatch, getState) {\n    dispatch(pageSizeAdded(pageSize));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport var priceAddedAction = function priceAddedAction(from, to) {\n  return function (dispatch, getState) {\n    dispatch(priceAdded({\n      fromPrice: from,\n      toPrice: to\n    }));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport var goodsCreatedDayAddedAction = function goodsCreatedDayAddedAction(goodsCreatedDay) {\n  return function (dispatch, getState) {\n    if (!goodsCreatedDay) goodsCreatedDay = initialState.filters.goodsCreatedDay;\n    dispatch(goodsCreatedDayAdded(parseInt(goodsCreatedDay)));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport var goodsOptionsAddedAction = function goodsOptionsAddedAction(options) {\n  return function (dispatch, getState) {\n    dispatch(goodsOptionsAdded(options));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport var BrandAddedAction = function BrandAddedAction(brands) {\n  return function (dispatch, getState) {\n    dispatch(brandAdded(brands));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport var brandsRemovedAction = function brandsRemovedAction(id) {\n  return function (dispatch, getState) {\n    var curr_state = getState();\n    var newBrands = selectFilters(curr_state).brandId.filter(function (brandId) {\n      return brandId !== id;\n    });\n    dispatch(brandAdded(newBrands));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport var pageChangedAction = function pageChangedAction(pageNumber) {\n  return function (dispatch, getState) {\n    dispatch(pageChanged(pageNumber));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport var mobileFilterUpdateAction = function mobileFilterUpdateAction(newFilters) {\n  return function (dispatch, getState) {\n    dispatch(mobileFilterUpdate(newFilters));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport default providerSlice.reducer;","map":null,"metadata":{},"sourceType":"module"}