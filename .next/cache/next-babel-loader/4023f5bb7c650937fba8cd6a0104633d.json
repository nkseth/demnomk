{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport imgcircleIcon from \"./../../../assets/icons/img-radio-button-off.svg\";\nimport imgcircleFillIcon from \"./../../../assets/icons/img-radio-button-on.svg\"; // import \"./SelectBox2.scss\";\n\nexport default class SelectBox2 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"updateChildren\", () => {\n      const children2 = React.Children.toArray(this.props.children);\n      this.newChildren = children2.map(child => {\n        if (child.type === SelectBox2.SelectItem) {\n          if (this.multiSelect) {\n            for (let item of this.state.selectedItems) {\n              if (child.props.name === item.name) return /*#__PURE__*/React.cloneElement(child, {\n                handleChange: this.handleChange,\n                selected: true\n              });\n            }\n\n            return /*#__PURE__*/React.cloneElement(child, {\n              handleChange: this.handleChange\n            });\n          } else if (child.props.name === this.state.selectedItem.name) {\n            return /*#__PURE__*/React.cloneElement(child, {\n              handleChange: this.handleChange,\n              selected: true\n            });\n          } else return /*#__PURE__*/React.cloneElement(child, {\n            handleChange: this.handleChange\n          });\n        } else {\n          return child;\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleParentChange\", () => {\n      if (this.props.onChange) {\n        if (this.multiSelect) this.props.onChange(this.state.selectedItems);else this.props.onChange(this.state.selectedItem);\n      }\n    });\n\n    _defineProperty(this, \"handleChange\", (selectedItem, isSelected) => {\n      if (this.multiSelect) {\n        if (isSelected) {\n          const newitems = this.state.selectedItems.filter(item => {\n            return item.name !== selectedItem.name;\n          });\n          this.setState({\n            selectedItems: newitems\n          }, this.handleParentChange);\n        } else this.setState({\n          selectedItems: [...this.state.selectedItems, {\n            value: selectedItem.value,\n            name: selectedItem.name\n          }]\n        }, this.handleParentChange);\n      } else {\n        if (isSelected) {\n          this.setState({\n            selectedItem: {\n              value: \"\",\n              name: \"\"\n            }\n          }, this.handleParentChange);\n        } else this.setState({\n          selectedItem: {\n            value: selectedItem.value,\n            name: selectedItem.name\n          }\n        }, this.handleParentChange);\n      }\n    });\n\n    this.multiSelect = this.props.multiSelect;\n    if (this.multiSelect) this.state = {\n      selectedItems: []\n    };else this.state = {\n      selectedItem: {\n        value: this.props.selectedItemValue,\n        name: this.props.selectedItemName\n      }\n    };\n  }\n\n  render() {\n    this.updateChildren();\n    return __jsx(\"div\", {\n      className: `SelectBox2 ${this.props.className ? this.props.className : \"\"}`\n    }, this.newChildren);\n  }\n\n}\nSelectBox2.SelectItem = class extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleClick\", () => {\n      debugger;\n      this.props.handleSelect(this.props.value);\n      this.props.handleChange({\n        value: this.props.value,\n        name: this.props.name\n      }, this.props.selected);\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.selectedId != 0 && this.props.selectedId == this.props.value) {\n      this.handleClick();\n    }\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"SelectBox2__item\",\n      onClick: this.handleClick\n    }, __jsx(\"img\", {\n      className: \"SelectBox2__img\",\n      alt: \"select item\",\n      src: this.props.selected ? imgcircleFillIcon : imgcircleIcon\n    }), __jsx(\"div\", {\n      className: \"SelectBox2__content\"\n    }, this.props.children)));\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}