{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { switchLang } from \"../../../../../lib/switch\";\nimport { Button, FormErrorMsg, Loading } from \"../../../../common\";\nimport { useState } from \"react\";\nimport { validateEmail, validatePassword, validateConfirmPassword, validateEmpty, validatePhoneNumber } from \"../../../../../lib/formValidator\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectLang, selectLogin, LOGIN_CUSTOMER_LOADING, LOADING, SUCCE_LOGIN, selectCurr, ERROR_LOGIN, selectPrevLink, PREVLINK_CHANGE } from \"../../../../../appConfigSlice\";\nimport { client_registerCustomer, client_verifyCustomerMobileNumber } from \"../../../../../lib/api/client/clientCustomer\";\nimport { toast } from \"react-toastify\";\nimport { getToastConfig } from \"../../../../../lib/toast\";\nimport { getErrorMsg, removeCartCookie, setTokenCookie } from \"../../../../../lib/helpers\";\nimport { useRouter } from \"next/router\";\nimport axiosClient from \"../../../../../lib/api/axios\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport Select from \"react-select\";\nimport { client_getActiveCountries } from \"../../../../../lib/api/client/clientShop\";\nimport { useEffect } from \"react\";\nimport VerifyPhone from \"../../../verifyPhone/VerifyPhone\";\nimport Logo from \"./../../../../../assets/images/logo-2.png\";\nexport default (function (props) {\n  var _useState = useState(\"\"),\n      email = _useState[0],\n      setEmail = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      mobileNumber = _useState2[0],\n      setMobileNumber = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      phoneCode = _useState3[0],\n      setPhoneCode = _useState3[1];\n\n  var _useState4 = useState(null),\n      countryId = _useState4[0],\n      setCountryId = _useState4[1];\n\n  var _useState5 = useState([]),\n      countryItems = _useState5[0],\n      setCountryItems = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      iso = _useState7[0],\n      setIso = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      cpassword = _useState8[0],\n      setCpassword = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      name = _useState9[0],\n      setName = _useState9[1];\n\n  var _useState10 = useState(\"\"),\n      family = _useState10[0],\n      setFamily = _useState10[1];\n\n  var _useState11 = useState({}),\n      captchaRef = _useState11[0],\n      setcaptchaRef = _useState11[1];\n\n  var _useState12 = useState({}),\n      errors = _useState12[0],\n      setErrors = _useState12[1];\n\n  var _useState13 = useState(false),\n      captchaErrors = _useState13[0],\n      setcaptchaErrors = _useState13[1];\n\n  var _useState14 = useState(false),\n      LoginStatus = _useState14[0],\n      setLoginStatus = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      captchaToken = _useState15[0],\n      setcaptchaToken = _useState15[1];\n\n  var _useState16 = useState(1),\n      currentSituation = _useState16[0],\n      setCurrentSituation = _useState16[1];\n\n  var _useState17 = useState(false),\n      loaderFinalSubmitButton = _useState17[0],\n      setLoaderFinalSubmitButton = _useState17[1];\n\n  var _useState18 = useState(\"\"),\n      requestId = _useState18[0],\n      setrequestId = _useState18[1];\n\n  var lang = useSelector(selectLang);\n  var curr = useSelector(selectCurr);\n  var prevLink = useSelector(selectPrevLink);\n  var dis = useDispatch();\n  var router = useRouter();\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n      var key;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!LoginStatus) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              if (!(captchaToken === \"\")) {\n                _context2.next = 8;\n                break;\n              }\n\n              setcaptchaErrors(true);\n              return _context2.abrupt(\"return\");\n\n            case 8:\n              setcaptchaErrors(false);\n\n            case 9:\n              _context2.t0 = _regeneratorRuntime.keys(errors);\n\n            case 10:\n              if ((_context2.t1 = _context2.t0()).done) {\n                _context2.next = 17;\n                break;\n              }\n\n              key = _context2.t1.value;\n\n              if (!errors[key]) {\n                _context2.next = 15;\n                break;\n              }\n\n              toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n              return _context2.abrupt(\"return\");\n\n            case 15:\n              _context2.next = 10;\n              break;\n\n            case 17:\n              dis( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, getState) {\n                  var result, _err$response;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          dispatch({\n                            type: LOGIN_CUSTOMER_LOADING\n                          });\n                          _context.prev = 1;\n                          setLoginStatus(true);\n                          _context.next = 5;\n                          return client_verifyCustomerMobileNumber({\n                            captchaToken: captchaToken,\n                            mobileNumber: \"+\" + phoneCode + mobileNumber,\n                            email: email\n                          });\n\n                        case 5:\n                          result = _context.sent;\n\n                          if (result.status === 200) {\n                            setrequestId(result.result.requestId);\n                            setCurrentSituation(2);\n                          }\n\n                          _context.next = 16;\n                          break;\n\n                        case 9:\n                          _context.prev = 9;\n                          _context.t0 = _context[\"catch\"](1);\n\n                          if (captchaRef !== null) {\n                            captchaRef.reset();\n                          }\n\n                          toast.error((_err$response = _context.t0.response) === null || _err$response === void 0 ? void 0 : _err$response.data.message, getToastConfig());\n                          setPassword(\"\");\n                          setCpassword(\"\");\n                          setLoginStatus(false);\n\n                        case 16:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[1, 9]]);\n                }));\n\n                return function (_x2, _x3) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getCountris();\n    return function () {};\n  }, []);\n\n  var getCountris = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var result, countries;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return client_getActiveCountries();\n\n            case 2:\n              result = _context3.sent;\n              countries = [];\n              result.result.forEach(function (item) {\n                countries.push({\n                  value: item.countryId,\n                  label: __jsx(\"div\", null, __jsx(\"img\", {\n                    src: \"/assets/flags/\".concat(item.flagUrl),\n                    height: \"15px\",\n                    width: \"15px\"\n                  }), \" \", \"+ \", item.phoneCode),\n                  iso: item.iso,\n                  phoneCode: item.phoneCode\n                });\n              });\n              setCountryItems(countries);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function getCountris() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var submitRegister = function submitRegister(smsCode, requestSmsId) {\n    dis( /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n        var result, _err$response2, _err$response3;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                dispatch({\n                  type: LOGIN_CUSTOMER_LOADING\n                });\n                _context4.prev = 1;\n                setLoaderFinalSubmitButton(true);\n                _context4.next = 5;\n                return client_registerCustomer({\n                  email: email,\n                  pass: password,\n                  name: name,\n                  family: family,\n                  captchaToken: captchaToken,\n                  mobileNumber: mobileNumber,\n                  countryId: countryId,\n                  phoneCode: phoneCode,\n                  smsCode: smsCode,\n                  requestId: requestSmsId\n                });\n\n              case 5:\n                result = _context4.sent;\n\n                if (result.status === 200) {\n                  dispatch({\n                    type: SUCCE_LOGIN,\n                    payload: {\n                      token: result.result.token\n                    }\n                  });\n                  setTokenCookie(result.result.token);\n                  axiosClient.setToken(result.result.token);\n                  toast.success(getErrorMsg(lang, \"succ-regitered\"), getToastConfig());\n\n                  if (prevLink) {\n                    dispatch({\n                      type: PREVLINK_CHANGE,\n                      payload: {\n                        link: null\n                      }\n                    });\n                    router.push(prevLink);\n                  } else {\n                    router.push(\"/\".concat(curr, \"-\").concat(lang));\n                  }\n\n                  removeCartCookie();\n                }\n\n                _context4.next = 14;\n                break;\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](1);\n                setLoaderFinalSubmitButton(false);\n                toast.error((_err$response2 = _context4.t0.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data.message, getToastConfig());\n                dispatch({\n                  type: ERROR_LOGIN,\n                  payload: {\n                    error: (_err$response3 = _context4.t0.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data.message\n                  }\n                });\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[1, 9]]);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n  };\n\n  var handleBackclick = function handleBackclick() {\n    setCurrentSituation(1);\n    setPassword(\"\");\n    setCpassword(\"\");\n    setMobileNumber(\"\");\n    setLoginStatus(false);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      height: \"100%\"\n    }\n  }, currentSituation === 1 ? __jsx(\"div\", {\n    className: \"form sign-up\"\n  }, __jsx(Translate, null, function (_ref5) {\n    var translate = _ref5.translate;\n    return __jsx(React.Fragment, null, !props.isDesktop && __jsx(\"a\", {\n      href: \"/\",\n      className: \"auth-mobile-logo\"\n    }, __jsx(\"img\", {\n      src: Logo\n    })), __jsx(\"a\", {\n      onClick: function onClick(e) {\n        e.preventDefault();\n        switchLang(props.loc, true);\n      },\n      className: \"auth__lang-slt\",\n      href: \"#\"\n    }, __jsx(Translate, {\n      id: \"lang\"\n    })), props.isDesktop ? __jsx(React.Fragment, null, __jsx(\"h4\", {\n      className: \"auth__header auth__header--signup\"\n    }, __jsx(Translate, {\n      id: \"hi\"\n    })), __jsx(\"h4\", {\n      className: \"auth__header-sub\"\n    }, __jsx(Translate, {\n      id: \"acc-create\"\n    }))) : __jsx(\"h4\", {\n      className: \"auth__header-sub-mobile\"\n    }, __jsx(Translate, {\n      id: \"acc-create\"\n    })), __jsx(\"form\", {\n      action: \"\",\n      onSubmit: handleSubmit\n    }, __jsx(\"div\", {\n      className: \"auth__form auth__form--login\"\n    }, __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"mobileNumber\"\n    })), __jsx(\"div\", {\n      className: \"auth__mobile-number\"\n    }, __jsx(Select, {\n      className: \"react-select\",\n      options: countryItems,\n      placeholder: \"code\",\n      onChange: function onChange(event) {\n        setIso(event.iso);\n        setCountryId(event.value);\n        setPhoneCode(event.phoneCode);\n      },\n      onBlur: function onBlur(e) {\n        validatePhoneNumber({\n          name: \"mobileNumber\",\n          value: mobileNumber,\n          handler: setErrors,\n          lang: lang,\n          iso: iso\n        });\n      }\n    }), __jsx(\"input\", {\n      className: \"auth__input auth__input-mobile\",\n      type: \"text\",\n      onChange: function onChange(event) {\n        setMobileNumber(event.target.value);\n      },\n      value: mobileNumber,\n      name: \"mobileNumber\",\n      onBlur: function onBlur(e) {\n        validatePhoneNumber({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang,\n          iso: iso\n        });\n      },\n      required: true,\n      placeholder: translate(\"mobile-placeholder\")\n    })), __jsx(FormErrorMsg, {\n      show: errors[\"mobileNumber\"],\n      msg: errors[\"mobileNumber\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"email\"\n    })), __jsx(\"input\", {\n      className: \"auth__input\",\n      type: \"email\",\n      onChange: function onChange(event) {\n        setEmail(event.target.value);\n      },\n      value: email,\n      name: \"email\",\n      required: true,\n      onBlur: function onBlur(e) {\n        validateEmail({\n          name: \"email\",\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      },\n      placeholder: translate(\"email-placeholder\"),\n      pattern: \"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\"\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"email\"],\n      msg: errors[\"email\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"Password\"\n    })), __jsx(\"input\", {\n      className: \"auth__input\",\n      type: \"password\",\n      placeholder: translate(\"pass-placeholder\"),\n      onBlur: function onBlur(e) {\n        validatePassword({\n          name: \"password\",\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      },\n      onChange: function onChange(event) {\n        setPassword(event.target.value);\n      },\n      value: password,\n      name: \"password\",\n      required: true\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"password\"],\n      msg: errors[\"password\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"pas-confirm\"\n    })), __jsx(\"input\", {\n      required: true,\n      className: \"auth__input\",\n      type: \"password\",\n      onBlur: function onBlur(e) {\n        validateConfirmPassword({\n          name: e.target.name,\n          value1: password,\n          value2: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      },\n      onChange: function onChange(event) {\n        setCpassword(event.target.value);\n        validateConfirmPassword({\n          name: event.target.name,\n          value1: password,\n          value2: event.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      },\n      value: cpassword,\n      name: \"cpassword\",\n      placeholder: translate(\"cpass-placeholder\")\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"cpassword\"],\n      msg: errors[\"cpassword\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"name\"\n    })), __jsx(\"input\", {\n      required: true,\n      className: \"auth__input\",\n      type: \"text\",\n      placeholder: translate(\"name-placeholder\"),\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      },\n      onChange: function onChange(event) {\n        setName(event.target.value);\n      },\n      value: name,\n      name: \"name\"\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"name\"],\n      msg: errors[\"name\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"family\"\n    })), __jsx(\"input\", {\n      required: true,\n      className: \"auth__input\",\n      type: \"text\",\n      placeholder: translate(\"family-placeholder\"),\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      },\n      onChange: function onChange(event) {\n        setFamily(event.target.value);\n      },\n      value: family,\n      name: \"family\"\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"family\"],\n      msg: errors[\"family\"]\n    }))), __jsx(\"div\", {\n      className: \"auth__captcha-cnt\"\n    }, __jsx(ReCAPTCHA // size=\"compact\"\n    , {\n      sitekey: \"6Lfh-usZAAAAAP3ZYWqEZ4hmjWOi_GA606Ho19aW\",\n      onChange: function onChange(token) {\n        setcaptchaToken(token);\n      },\n      ref: function ref(e) {\n        return setcaptchaRef(e);\n      }\n    }), captchaErrors ? __jsx(FormErrorMsg, {\n      show: true,\n      msg: \"please set captcha\"\n    }) : null), __jsx(\"div\", {\n      className: \"auth__btn\",\n      style: {\n        marginTop: \"30px\"\n      }\n    }, __jsx(Button, {\n      radius: \"true\",\n      value: LoginStatus ? __jsx(Loading, {\n        type: \"white\",\n        width: \"20px\",\n        height: \"20px\"\n      }) : __jsx(Translate, {\n        id: \"acc-create2\"\n      })\n    }))), __jsx(\"div\", {\n      className: \"auth__footer-mobile\"\n    }, __jsx(\"h4\", {\n      className: \"auth__header-sub mt-5\"\n    }, __jsx(Translate, {\n      id: \"acc-have\"\n    })), __jsx(\"a\", {\n      onClick: props.clickSignUp,\n      className: \"auth__forget mt-3\"\n    }, __jsx(Translate, {\n      id: \"signIn3\"\n    }))));\n  })) : __jsx(\"div\", {\n    className: \"form \"\n  }, __jsx(VerifyPhone, {\n    Backclick: handleBackclick,\n    loaderSubmitButton: loaderFinalSubmitButton,\n    currdata: {\n      phoneCode: phoneCode,\n      mobileNumber: mobileNumber,\n      iso: iso,\n      requestId: requestId\n    },\n    submitRegister: submitRegister\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}