{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useEffect, useState } from \"react\";\nimport SearchIcon from \"./../../../../../../assets/icons/search-gray.svg\"; // import \"./CheckBoxList.scss\";\n// import \"./CheckBoxList-rtl.scss\";\n\nexport default (function (_ref) {\n  var _ref$data = _ref.data,\n      data = _ref$data === void 0 ? [] : _ref$data,\n      itemClass = _ref.itemClass,\n      listClass = _ref.listClass,\n      search = _ref.search,\n      placeholder = _ref.placeholder,\n      dataName = _ref.dataName,\n      dataValue = _ref.dataValue,\n      _ref$singleSelect = _ref.singleSelect,\n      singleSelect = _ref$singleSelect === void 0 ? false : _ref$singleSelect,\n      _ref$onSelect = _ref.onSelect,\n      onSelect = _ref$onSelect === void 0 ? function () {} : _ref$onSelect,\n      _ref$initialSelectIdA = _ref.initialSelectIdArr,\n      initialSelectIdArr = _ref$initialSelectIdA === void 0 ? [] : _ref$initialSelectIdA;\n\n  var _useState = useState(\"\"),\n      searchText = _useState[0],\n      setSearchText = _useState[1];\n\n  var _useState2 = useState({}),\n      checkedIds = _useState2[0],\n      setCheckedIds = _useState2[1];\n\n  useEffect(function () {\n    var gen = {};\n\n    var _iterator = _createForOfIteratorHelper(initialSelectIdArr),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var id = _step.value;\n        gen[id] = {\n          value: data[dataValue],\n          checked: true\n        };\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    setCheckedIds(gen);\n  }, [initialSelectIdArr[0]]);\n\n  var handleCheckChange = function handleCheckChange(event) {\n    if (singleSelect) {\n      var newState = _defineProperty({}, event.target.value, {\n        value: event.target.value,\n        checked: event.target.checked\n      });\n\n      setCheckedIds(newState);\n      createSelectedArrayValue(newState);\n    } else {\n      var _newState2 = _objectSpread(_objectSpread({}, checkedIds), {}, _defineProperty({}, event.target.value, {\n        value: event.target.value,\n        checked: event.target.checked\n      }));\n\n      setCheckedIds(_newState2);\n      createSelectedArrayValue(_newState2);\n    }\n  };\n\n  var createSelectedArrayValue = function createSelectedArrayValue(checkedList) {\n    var arr = [];\n\n    for (var key in checkedList) {\n      if (checkedList[key].checked) arr.push(key);\n    }\n\n    onSelect(arr);\n  }; //const placeholder = <Placeholder />;\n\n\n  var handleChange = function handleChange(e) {\n    setSearchText(e.target.value);\n  };\n\n  return __jsx(React.Fragment, null, search && __jsx(\"div\", {\n    className: \"checklist__search\"\n  }, __jsx(SearchIcon, {\n    className: \"checklist__search-input-icon\"\n  }), __jsx(\"input\", {\n    onChange: handleChange,\n    type: \"text\",\n    value: searchText,\n    className: \"checklist__search-input\",\n    placeholder: placeholder\n  })), __jsx(\"ul\", {\n    className: \"checklist \".concat(listClass)\n  }, data.map(function (item, index) {\n    return (searchText && item.includes(searchText) || !searchText) && __jsx(\"label\", {\n      key: index,\n      className: \"checklist__label\"\n    }, __jsx(\"li\", {\n      className: \"\".concat(itemClass)\n    }, __jsx(\"input\", {\n      className: \"checklist__check\",\n      type: \"checkbox\",\n      name: item[dataName],\n      value: item[dataValue],\n      checked: checkedIds[item[dataValue]] ? checkedIds[item[dataValue]].checked : false,\n      onChange: handleCheckChange\n    }), __jsx(\"span\", null, item[dataName])));\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}