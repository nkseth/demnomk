{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport classnames from \"classnames\";\nimport { Translate, withLocalize } from \"react-localize-redux\";\nimport Switch from \"react-switch\"; // import \"./Search.scss\";\n// import \"./Search-rtl.scss\";\n\nimport { Dropdown, BoxStyle1, GoodItemRow, Pager, MobileMenu, BreadCrump, GoodItemLoader, GoodItemRowLoader } from \"../../../common\";\nimport CheckBoxList from \"./SearchLayout/CheckBoxList/CheckBoxList\";\nimport exp from \"./../../../../assets/icons/express.png\";\nimport expAr from \"./../../../../assets/icons/express-ar.png\"; // import SeeMore from \"./SearchLayout/SeeMore/SeeMore\";\n\nimport RangeBox from \"./SearchLayout/RangeBox/RangeBox\";\nimport GoodItem from \"../../../common/GoodItem\";\nimport { connect } from \"react-redux\";\nimport { SearchBoxHeader, EmptySearch } from \"./SearchLayout\"; // import Fader from \"react-fader\";\n\nimport Pagination from \"react-js-pagination\";\nimport { DesktopsAndBigger, Desktops } from \"../../../../Responsive\";\nimport { fetchSearch, LOADING, selectSearch, priceAddedAction, selectFilters, selectGoods, goodsCreatedDayAddedAction, selectSpecs, changeUrl, brandsChangedAction, pageChangedAction, mobileFilterUpdateAction, goodsOptionsAddedAction, orderByTypeAddedAction, justExistClickAction, categoryClickAction, selectSelectedBrands } from \"./searchSlice\";\nimport { selectCurr, selectLang } from \"../../../../appConfigSlice\";\nimport { withRouter } from \"next/router\";\nimport queryString from \"query-string\";\nimport FiltersData from \"../../filters/filtersData\";\nimport CheckBoxList2 from \"./SearchLayout/CheckBoxList/CheckBoxList2\";\nimport { searchFiltersToQuery } from \"../../../../lib/QueryToFilters\";\nimport Link from \"next/link\";\nimport BrandsCheckList from \"./SearchLayout/CheckBoxList/BrandsCheckList\";\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onMobileFilterClick\", (arrival, brands, range, justExist) => {\n      let specsIds = [];\n\n      for (let key in this.specSelected) {\n        specsIds = [...this.specSelected[key], ...specsIds];\n      }\n\n      this.props.mobileFilterUpdateAction({\n        brands: brands,\n        specsId: specsIds,\n        arrival: arrival[0],\n        price: {\n          min: range.min,\n          max: range.max\n        },\n        justExist\n      });\n    });\n\n    _defineProperty(this, \"onMobileSortClick\", sortId => {\n      this.props.orderByTypeAddedAction(sortId);\n    });\n\n    _defineProperty(this, \"handleSpecSelect\", (specId, selecetdIds, dontSubmit = false) => {\n      this.specSelected[specId] = selecetdIds;\n      if (dontSubmit) return;\n      let ids = [];\n\n      for (let key in this.specSelected) {\n        ids = [...this.specSelected[key], ...ids];\n      }\n\n      this.props.goodsOptionsAddedAction(ids);\n    });\n\n    _defineProperty(this, \"state\", {\n      showfilterBox: false,\n      filterSort: false\n    });\n\n    _defineProperty(this, \"viewHandler\", e => {\n      e.preventDefault();\n      this.setState(state => {\n        return {\n          view: !state.view\n        };\n      });\n    });\n\n    this.lang = this.props.lang;\n    this.currency = this.props.curr;\n    this.state = {\n      view: true,\n      ///// true --> Grid - false --> Row\n      isServer: true\n    };\n    const filtersData = new FiltersData(this.props.translate);\n    this.arrivals = filtersData.arrivals;\n    this.sortedBy = filtersData.sortedBy;\n    this.specSelected = {};\n    this.goodsWrapperRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const selectedOptions = this.props.filters.optionIds;\n    const specs = this.props.specs;\n\n    for (let id of selectedOptions) {\n      for (let key in specs) {\n        if (specs[key].options[id]) {\n          this.specSelected[specs[key].specId] = this.specSelected[specs[key].specId] || [];\n          this.specSelected[specs[key].specId].push(specs[key].options[id].optionId);\n        }\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.props.changeUrlBool) {\n      const filters = this.props.filters;\n      this.props.changeUrl();\n      const queryParam = searchFiltersToQuery(filters);\n      const result = queryString.stringify(queryParam, {\n        arrayFormat: \"comma\"\n      });\n      this.props.router.push(`?${result}`, `/${this.props.curr}-${this.props.lang}/search/?${result}`, {\n        shallow: true\n      });\n      window.scrollTo({\n        top: this.goodsWrapperRef.current.offsetTop,\n        behavior: \"smooth\"\n      });\n    }\n  }\n\n  printLoader() {\n    const loader = [];\n\n    for (let i = 0; i < 10; i++) {\n      if (this.state.view) loader.push(__jsx(GoodItemLoader, null));else loader.push(__jsx(GoodItemRowLoader, null)); // loader.push(<GoodItemLoader />);\n    }\n\n    return loader;\n  }\n\n  render() {\n    var _this$props$parentCat, _this$props$childCate, _Object$keys, _this$data, _this$data$goods, _this$data2, _this$data2$goods;\n\n    this.data = this.props.search.search;\n    this.loading = this.props.status === LOADING;\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"container siteWidthContainer\"\n    }, __jsx(\"div\", {\n      className: \"search-page flex-wrap\"\n    }, __jsx(DesktopsAndBigger, {\n      className: \"w-100\"\n    }, ((_this$props$parentCat = this.props.parentCategory) === null || _this$props$parentCat === void 0 ? void 0 : _this$props$parentCat.length) > 0 ? __jsx(BreadCrump, {\n      className: \"col-12 p-0 mt-2\",\n      data: this.props.parentCategory\n    }) : __jsx(\"div\", {\n      style: {\n        height: \"10px\",\n        width: \"100%\"\n      }\n    })), __jsx(\"div\", {\n      className: \"search-page__left\"\n    }, __jsx(DesktopsAndBigger, null, __jsx(\"aside\", {\n      className: \"search\"\n    }, this.props.childCategory && __jsx(Dropdown, {\n      alwaysOpen: false,\n      headerClass: \"search__filter-header\",\n      containerClass: \"search__list-container\",\n      text: this.props.childCategory.categoryTitle\n    }, __jsx(\"ul\", {\n      className: \"search__filter-list\"\n    }, (_this$props$childCate = this.props.childCategory.child) === null || _this$props$childCate === void 0 ? void 0 : _this$props$childCate.map(cat => {\n      return __jsx(\"li\", {\n        key: cat.categoryId,\n        className: \"search__list-item\"\n      }, __jsx(Dropdown, {\n        headerClass: \"search__drop-header\",\n        text: cat.categoryTitle,\n        haveLink: true,\n        link: `/${this.props.curr}-${this.props.lang}/search?type=2&id=${cat.categoryId}`\n      }, __jsx(\"ul\", {\n        className: \"search__drop-list\"\n      }, cat.child && cat.child.map(child2 => {\n        return __jsx(\"li\", {\n          key: child2.categoryId,\n          className: \"search__list-item\"\n        }, __jsx(Link, {\n          href: `/${this.props.curr}-${this.props.lang}/search?type=2&id=${child2.categoryId}`\n        }, __jsx(\"a\", {\n          className: \"search__list-link\"\n        }, child2.categoryTitle)));\n      }))));\n    }))), __jsx(Dropdown, {\n      alwaysOpen: false,\n      headerClass: \"search__filter-header\",\n      containerClass: \"search__list-container\",\n      text: __jsx(Translate, {\n        id: \"searchAside.Brand\"\n      })\n    }, __jsx(Translate, null, ({\n      translate\n    }) => {\n      return __jsx(BrandsCheckList, {\n        catId: this.props.filters.id,\n        itemClass: \"search__list-item search__list-item--check\",\n        listClass: \"search__filter-list\",\n        placeholder: translate(\"searchplaceholder\"),\n        selecteIds: this.props.filters.brandId,\n        onSelect: (brand, checked) => {\n          this.props.brandsChangedAction(brand, checked);\n        }\n      }) // <CheckBoxList2\n      //   search\n      //   textOpen={<Translate id=\"seemore\" />}\n      //   textClose=\"close\"\n      //   seeMore\n      //   maxItemShow={20}\n      //   placeholder={translate(\"searchplaceholder\")}\n      //   data={this.props.brands}\n      //   dataName=\"brandTitle\"\n      //   dataValue=\"brandId\"\n      //   initialSelectIdArr={this.props.filters.brandId}\n      //   listClass=\"search__filter-list\"\n      //   itemClass=\"search__list-item search__list-item--check\"\n      //   onSelect={(arr) => {\n      //     this.props.BrandAddedAction(arr);\n      //   }}\n      // />\n      ;\n    })), __jsx(\"div\", {\n      className: `dropdown search__list-container`\n    }, __jsx(\"div\", {\n      href: \"#\",\n      className: `dropdown__link search__filter-header single-lined`\n    }, __jsx(\"span\", null, __jsx(Translate, {\n      id: \"just-exist\"\n    })), __jsx(Switch, {\n      onChange: checked => {\n        this.props.justExistClickAction(checked);\n      },\n      width: 46,\n      height: 22,\n      uncheckedIcon: \"\",\n      checkedIcon: \"\",\n      checked: this.props.filters.justExist\n    }))), __jsx(Dropdown, {\n      alwaysOpen: false,\n      headerClass: \"search__filter-header\",\n      containerClass: \"search__list-container\",\n      text: __jsx(Translate, {\n        id: \"searchAside.NewArrivals\"\n      })\n    }, __jsx(CheckBoxList, {\n      listClass: \"search__filter-list\",\n      itemClass: \"search__list-item search__list-item--check\",\n      data: this.arrivals,\n      dataName: \"title\",\n      dataValue: \"value\",\n      initialSelectIdArr: [this.props.filters.goodsCreatedDay],\n      singleSelect: true,\n      onSelect: arr => {\n        this.props.goodsCreatedDayAddedAction(arr[0]);\n      }\n    })), (_Object$keys = Object.keys(this.props.specs || {})) === null || _Object$keys === void 0 ? void 0 : _Object$keys.map(key => {\n      return __jsx(Dropdown, {\n        key: this.props.specs[key].specId,\n        alwaysOpen: false,\n        headerClass: \"search__filter-header\",\n        containerClass: \"search__list-container\",\n        text: this.props.specs[key].specTitle\n      }, __jsx(CheckBoxList2, {\n        listClass: \"search__filter-list\",\n        itemClass: \"search__list-item search__list-item--check\",\n        data: this.props.specs[key].options,\n        dataName: \"optionTitle\",\n        dataValue: \"optionId\",\n        initialSelectIdArr: this.props.filters.optionIds,\n        singleSelect: !this.props.specs[key].isMultiSelectInFilter,\n        onSelect: arr => {\n          this.handleSpecSelect(this.props.specs[key].specId, arr);\n        }\n      }));\n    }), __jsx(Dropdown, {\n      alwaysOpen: false,\n      headerClass: \"search__filter-header\",\n      containerClass: \"search__list-container\",\n      text: __jsx(Translate, {\n        id: \"searchAside.Price-\" + this.currency\n      })\n    }, this.props.maxPrice > 0 && __jsx(RangeBox, {\n      show: \"true\",\n      min: 0,\n      max: this.props.maxPrice,\n      onSet: values => {\n        this.props.priceAddedAction(values.min, values.max);\n      },\n      setText: __jsx(Translate, {\n        id: \"setPrice\"\n      })\n    }))))), __jsx(\"div\", {\n      className: \"search-page__right\"\n    }, __jsx(BoxStyle1, {\n      childRef: this.goodsWrapperRef,\n      headerContent: __jsx(SearchBoxHeader, {\n        newArrivals: this.arrivals,\n        currentView: this.state.view,\n        specSelected: this.specSelected,\n        handleSpecSelect: this.handleSpecSelect,\n        viewHandler: this.viewHandler,\n        showFilter: sortvalue => {\n          this.setState({\n            showfilterBox: true,\n            filterSort: sortvalue\n          });\n        }\n      })\n    }, __jsx(\"div\", {\n      className: classnames(\"search__item-container\", {\n        \"search__item-container--row\": !this.state.view\n      })\n    }, this.loading ? this.printLoader() : ((_this$data = this.data) === null || _this$data === void 0 ? void 0 : (_this$data$goods = _this$data.goods) === null || _this$data$goods === void 0 ? void 0 : _this$data$goods.data.length) === 0 ? __jsx(EmptySearch, null) : (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : (_this$data2$goods = _this$data2.goods) === null || _this$data2$goods === void 0 ? void 0 : _this$data2$goods.data.map(item => {\n      return this.state.view ? __jsx(GoodItem, _extends({}, item, {\n        hover: true\n      })) : __jsx(GoodItemRow, _extends({}, item, {\n        hover: true\n      }));\n    })), __jsx(\"div\", null, __jsx(Pagination, {\n      activePage: this.props.pageNumber,\n      itemsCountPerPage: this.props.perPage,\n      totalItemsCount: this.props.resultGoodsCount,\n      itemClass: \"pager__item\",\n      hideFirstLastPages: true,\n      innerClass: \"pager\",\n      linkClass: \"pager__link\",\n      activeLinkClass: \"active\",\n      pageRangeDisplayed: 5,\n      onChange: pageNumber => {\n        this.props.pageChangedAction(pageNumber);\n      }\n    })))))), __jsx(Desktops, null, __jsx(\"section\", {\n      className: \"search-page-mobile-filter\"\n    }, this.state.showfilterBox ? __jsx(MobileMenu, {\n      filterSort: this.state.filterSort,\n      rtl: this.is_rtl,\n      isMainMenu: false,\n      closeMenu: () => {\n        this.setState({\n          showfilterBox: false,\n          filterSort: false\n        });\n      },\n      selectedBrands: this.props.selectedBrands,\n      data: this.props.search.search,\n      filtersMenu: true,\n      filters: this.props.filters,\n      arrivals: this.arrivals,\n      searchMenu: true,\n      handleSpecSelect: this.handleSpecSelect,\n      specSelected: this.specSelected,\n      mobileFilterClick: this.onMobileFilterClick,\n      sortedBy: this.sortedBy,\n      mobileSortClick: this.onMobileSortClick\n    }) : null)));\n  }\n\n}\n\nconst mapDispatchToProps = {\n  fetchSearch,\n  priceAddedAction,\n  goodsCreatedDayAddedAction,\n  goodsOptionsAddedAction,\n  brandsChangedAction,\n  pageChangedAction,\n  changeUrl,\n  mobileFilterUpdateAction,\n  orderByTypeAddedAction,\n  categoryClickAction,\n  justExistClickAction\n};\n\nconst mapStateToProps = state => {\n  var _selectGoods;\n\n  const filters = selectFilters(state);\n  const search = selectSearch(state);\n  return {\n    lang: selectLang(state),\n    curr: selectCurr(state),\n    search: state.search,\n    status: state.search.status,\n    childCategory: search.childCategory,\n    maxPrice: search.maxPrice,\n    pageNumber: filters.pageNumber,\n    perPage: filters.pageSize,\n    resultGoodsCount: (_selectGoods = selectGoods(state)) === null || _selectGoods === void 0 ? void 0 : _selectGoods.count,\n    goodsCreatedDay: filters.goodsCreatedDay,\n    specs: selectSpecs(state),\n    filters: filters,\n    selectedBrands: selectSelectedBrands(state),\n    changeUrlBool: state.search.changeUrl,\n    parentCategory: search.parentCategory\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withLocalize(withRouter(Search)));","map":null,"metadata":{},"sourceType":"module"}