{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\"; // import \"./MultiAddInput.scss\";\n\nimport { ReactComponent as CloseIcon } from \"./../../../assets/icons/close-naviblue.svg\";\nimport { ReactComponent as AddIcon } from \"./../../../assets/icons/add-icon.svg\";\nlet id = 0;\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleCloseClick\", (itemIndex, e) => {\n      // const newItems = this.state.items.filter((item) => {\n      //   return item.id !== itemId;\n      // });\n      // this.setState({ items: [...newItems] });\n      this.props.handleCloseClick(itemIndex);\n    });\n\n    _defineProperty(this, \"handleAddClick\", e => {\n      if (!this.state.inputText) return; // this.setState({\n      //   items: [\n      //     ...this.state.items,\n      //     {\n      //       id: id,\n      //       text: this.state.inputText,\n      //       item: (\n      //         <li\n      //           className=\"multiaddinput__list-item\"\n      //           style={{\n      //             backgroundColor: this.props.itemBgColor,\n      //             color: this.props.itemColor,\n      //           }}\n      //           key={id}\n      //         >\n      //           {this.state.inputText}\n      //           <CloseIcon\n      //             onClick={this.handleCloseClick.bind(this, id)}\n      //             className=\"multiaddinput__close-icon\"\n      //           />\n      //         </li>\n      //       ),\n      //     },\n      //   ],\n      // });\n\n      this.props.handleAddClick(this.state.inputText);\n      id++;\n      this.setState({\n        inputText: \"\"\n      });\n      this.inputRef.current.focus();\n    });\n\n    this.inputRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      items: [],\n      inputText: \"\"\n    };\n  }\n\n  render() {\n    var _this$props$items;\n\n    return __jsx(\"div\", {\n      className: \"multiaddinput\"\n    }, __jsx(\"div\", {\n      className: \"multiaddinput__input-cnt\"\n    }, __jsx(\"input\", {\n      id: this.props.name,\n      ref: this.inputRef,\n      name: this.props.name,\n      placeholder: this.props.placeholder,\n      type: \"text\",\n      className: \"gray__input multiaddinput__input\",\n      value: this.state.inputText,\n      onChange: e => {\n        this.setState({\n          inputText: e.target.value\n        });\n      }\n    }), __jsx(\"span\", {\n      onClick: this.handleAddClick,\n      className: \"multiaddinput__icon-cnt\"\n    }, __jsx(AddIcon, {\n      className: \"multiaddinput__input-icon\"\n    }))), __jsx(\"ul\", {\n      className: \"multiaddinput__list\"\n    }, (_this$props$items = this.props.items) === null || _this$props$items === void 0 ? void 0 : _this$props$items.map((item, index) => {\n      return __jsx(\"li\", {\n        className: \"multiaddinput__list-item\",\n        style: {\n          backgroundColor: this.props.itemBgColor,\n          color: this.props.itemColor\n        },\n        key: index\n      }, item.pointText, this.props.disabled ? null : __jsx(CloseIcon, {\n        onClick: this.handleCloseClick.bind(this, index),\n        className: \"multiaddinput__close-icon\"\n      }));\n    })));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}