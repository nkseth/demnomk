{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Dropdown from \"react-dropdown\";\nimport { Translate, withLocalize } from \"react-localize-redux\";\nimport { Desktops, DesktopsAndBigger } from \"../../../../../../Responsive\"; // import \"./SearchBoxHeader.scss\";\n// import \"./SearchBoxHeader-rtl.scss\";\n\nimport { Filter } from \"..\";\nimport { ReactComponent as RowItemIcon } from \"./../../../../../../assets/icons/menu.svg\";\nimport { ReactComponent as GridItemIcon } from \"./../../../../../../assets/icons/cols-view.svg\";\nimport { ReactComponent as FilterIcon } from \"./../../../../../../assets/icons/mobile/filter.svg\";\nimport { ReactComponent as Popularity } from \"./../../../../../../assets/icons/mobile/Popularity.svg\";\nimport { initialState, orderByTypeAddedAction, pageSizeAddedAction, selectFilters, selectGoods, priceAddedAction, goodsCreatedDayAddedAction, selectSpecs, brandsRemovedAction, brandsChangedAction, selectSelectedBrands, justExistClickAction } from \"../../searchSlice\";\nimport { connect } from \"react-redux\";\nimport { selectLang } from \"../../../../../../appConfigSlice\";\nimport FiltersData from \"../../../../filters/filtersData\";\nimport { searchPageQueriesDefaults, SEARCH_TYPE_DEAL, SEARCH_TYPE_SEARCH } from \"../../../../../../lib/querys\";\nimport classnames from \"classnames\";\n\nclass SearchBoxHeader extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"renderFilters\", () => {\n      const filtersItem = [];\n      const filters = this.props.filters;\n      const initialFilter = searchPageQueriesDefaults; /// from price - to price filter\n\n      if (filters[\"fromPrice\"] !== initialFilter[\"fromPrice\"] || filters[\"toPrice\"] !== initialFilter[\"toPrice\"]) {\n        filtersItem.push(__jsx(Filter, {\n          key: filtersItem.length + 1,\n          name: this.props.translate(\"searchAside.Price\"),\n          value: `${filters.fromPrice} - ${filters.toPrice}`,\n          onClose: () => {\n            this.props.priceAddedAction(initialFilter[\"fromPrice\"], initialFilter[\"toPrice\"]);\n          }\n        }));\n      } //// goods created day filter\n\n\n      if (filters[\"goodsCreatedDay\"] !== initialFilter[\"goodsCreatedDay\"]) {\n        let currGoodsCreatedDay;\n\n        for (let key in this.newArrivals) {\n          if (this.newArrivals[key].value === filters[\"goodsCreatedDay\"]) {\n            currGoodsCreatedDay = this.newArrivals[key];\n            break;\n          }\n        }\n\n        filtersItem.push(__jsx(Filter, {\n          key: filtersItem.length + 1,\n          name: this.props.translate(\"searchAside.NewArrivals\"),\n          value: currGoodsCreatedDay.title,\n          onClose: () => {\n            this.props.goodsCreatedDayAddedAction(initialFilter[\"goodsCreatedDay\"]);\n          }\n        }));\n      } //// options filter\n\n\n      if (filters[\"optionIds\"].length > 0) {\n        const specs = this.props.specs;\n        const optionsId = filters[\"optionIds\"];\n\n        for (let id of optionsId) {\n          for (let key in specs) {\n            if (specs[key].options[id]) {\n              filtersItem.push(__jsx(Filter, {\n                key: filtersItem.length + 1,\n                name: specs[key].specTitle,\n                value: specs[key].options[id].optionTitle,\n                onClose: () => {\n                  let selectedIds = this.props.specSelected[specs[key].specId];\n                  selectedIds = selectedIds.filter(optionId => {\n                    return optionId !== specs[key].options[id].optionId;\n                  });\n                  this.props.handleSpecSelect(specs[key].specId, selectedIds);\n                }\n              }));\n            }\n          }\n        }\n      } /// brands filter\n\n\n      if (this.props.brands.length > 0) {\n        const brands = this.props.brands;\n\n        for (let brand of brands) {\n          filtersItem.push(__jsx(Filter, {\n            key: filtersItem.length + 1,\n            name: __jsx(Translate, {\n              id: \"searchAside.Brand\"\n            }),\n            value: brand.value,\n            onClose: () => {\n              this.props.brandsChangedAction(brand, false);\n            }\n          }));\n        }\n      } // just exists\n\n\n      if (filters[\"justExist\"]) {\n        filtersItem.push(__jsx(Filter, {\n          key: filtersItem.length + 1,\n          name: __jsx(Translate, {\n            id: \"just-exist\"\n          }),\n          value: \"\",\n          onClose: () => {\n            this.props.justExistClickAction(false);\n          }\n        }));\n      }\n\n      return filtersItem;\n    });\n\n    const filtersData = new FiltersData(this.props.translate);\n    this.sortedBy = filtersData.sortedBy;\n    this.perPage = filtersData.perPage;\n    this.newArrivals = filtersData.arrivals;\n  }\n\n  render() {\n    const filters = this.renderFilters();\n    return __jsx(\"div\", null, __jsx(\"section\", {\n      className: \"searchBoxHeader\"\n    }, __jsx(\"div\", {\n      className: \"searchBoxHeader__left-container\"\n    }, this.props.filters.search && this.props.filters.type === SEARCH_TYPE_SEARCH && __jsx(React.Fragment, null, __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text d-none rtl-d-inline\"\n    }, __jsx(Translate, {\n      id: \"found\"\n    })), __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text searchBoxHeader__header-text--bold\"\n    }, this.props.resultCount), __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text\"\n    }, __jsx(Translate, {\n      id: \"resualtfound\"\n    })), __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text searchBoxHeader__header-text--bold\"\n    }, this.props.filters.search))), __jsx(\"div\", {\n      className: \"searchBoxHeader__right-container\"\n    }, __jsx(React.Fragment, null, __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text align-center\"\n    }, __jsx(Translate, {\n      id: \"sortby\"\n    })), __jsx(Dropdown, {\n      onChange: data => {\n        this.props.orderByTypeAddedAction(data.value);\n      },\n      placeholder: __jsx(Translate, {\n        id: \"sortbySelect\"\n      }),\n      options: this.sortedBy,\n      value: this.sortedBy[this.props.orderByType + 1]\n    })), __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text align-center\"\n    }, __jsx(Translate, {\n      id: \"display\"\n    })), __jsx(Dropdown, {\n      onChange: data => {\n        this.props.pageSizeAddedAction(data.value);\n      },\n      options: this.perPage,\n      value: this.perPage[0]\n    }), __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text align-center\"\n    }, this.props.currentView ? __jsx(Translate, {\n      id: \"row\"\n    }) : __jsx(Translate, {\n      id: \"grid\"\n    })), __jsx(\"a\", {\n      onClick: this.props.viewHandler,\n      href: \"/#\",\n      className: \"searchBoxHeader__row-icon-con\"\n    }, this.props.currentView ? __jsx(RowItemIcon, {\n      className: \"searchBoxHeader__row-icon\"\n    }) : __jsx(GridItemIcon, {\n      className: \"searchBoxHeader__row-icon\"\n    }))), __jsx(\"div\", {\n      className: \"searchBoxHeader__btm-container\"\n    }, filters.length > 0 && __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text align-center\"\n    }, __jsx(Translate, {\n      id: \"filter\"\n    })), filters), __jsx(Desktops, {\n      className: \"w-100\"\n    }, __jsx(\"section\", {\n      className: classnames(\"searchBoxHeader-mobile mt-4\", {\n        \"searchBoxHeader-mobile--deal\": this.props.filters.type == SEARCH_TYPE_DEAL\n      })\n    }, __jsx(\"div\", {\n      onClick: () => this.props.showFilter(false),\n      className: \"searchBoxHeader-mobile__items searchBoxHeader-mobile-filter\"\n    }, __jsx(FilterIcon, null), __jsx(\"span\", null, __jsx(Translate, {\n      id: \"filter2\"\n    }))), this.props.filters.type != SEARCH_TYPE_DEAL && __jsx(\"div\", {\n      onClick: () => this.props.showFilter(true),\n      className: \"searchBoxHeader-mobile__items searchBoxHeader-mobile-popularity\"\n    }, __jsx(Popularity, null), __jsx(\"span\", null, __jsx(Translate, {\n      id: \"popularity\"\n    }))), __jsx(\"div\", {\n      onClick: this.props.viewHandler,\n      className: \"searchBoxHeader-mobile__items searchBoxHeader-mobile-row\"\n    }, __jsx(\"span\", null, this.props.currentView ? __jsx(RowItemIcon, {\n      className: \"searchBoxHeader__row-icon\"\n    }) : __jsx(GridItemIcon, {\n      className: \"searchBoxHeader__row-icon\"\n    })), __jsx(\"span\", null, this.props.currentView ? __jsx(Translate, {\n      id: \"row\"\n    }) : __jsx(Translate, {\n      id: \"grid\"\n    })))))), __jsx(Desktops, {\n      className: \"w-100\"\n    }, __jsx(\"div\", {\n      className: \"searchBoxHeader__mobile-filter-box mb-3 p-1\"\n    }, filters)));\n  }\n\n}\n\nconst mapDispatchToProps = {\n  orderByTypeAddedAction,\n  pageSizeAddedAction,\n  priceAddedAction,\n  goodsCreatedDayAddedAction,\n  brandsChangedAction,\n  justExistClickAction\n};\n\nconst mapStateToProps = state => {\n  var _selectGoods;\n\n  return {\n    lang: selectLang(state),\n    resultCount: (_selectGoods = selectGoods(state)) === null || _selectGoods === void 0 ? void 0 : _selectGoods.count,\n    filters: selectFilters(state),\n    orderByTypeId: selectFilters(state).orderByType,\n    specs: selectSpecs(state),\n    brands: selectSelectedBrands(state)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withLocalize(SearchBoxHeader));","map":null,"metadata":{},"sourceType":"module"}