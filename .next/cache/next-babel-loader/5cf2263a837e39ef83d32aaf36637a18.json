{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { Link } from \"react-router-dom\";\nimport { validatePhoneNumber } from \"../../../../../../../lib/formValidator\";\nimport { useSelector } from \"react-redux\";\nimport { selectLang } from \"../../../../../../../appConfigSlice\";\nimport { FormErrorMsg, Loading } from \"../../../../../../common\";\nimport { client_changeMobileNumber } from \"../../../../../../../lib/api/client/clientCommon\";\nimport { toast } from \"react-toastify\";\nimport { getErrorMsg } from \"../../../../../../../lib/helpers\";\nimport { getToastConfig } from \"../../../../../../../lib/toast\";\nexport default (({\n  handleSituation,\n  data,\n  setData\n}) => {\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: mobile,\n    1: setMobile\n  } = useState(\"\");\n  const lang = useSelector(selectLang);\n  const {\n    0: submitLoading,\n    1: setSubmitLoading\n  } = useState(false);\n\n  const handleSubmit = async () => {\n    if (submitLoading) return;\n\n    for (let key in errors) {\n      if (errors[key]) {\n        toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n        return;\n      }\n    }\n\n    setSubmitLoading(true);\n\n    try {\n      const result = await client_changeMobileNumber({\n        mobileNumber: mobile,\n        addressId: data.addressId\n      });\n\n      if (result.status == \"200\") {\n        setData({\n          phoneNumberVeri: _objectSpread(_objectSpread({}, data), {}, {\n            requestId: result.result.requestId,\n            phoneNumber: mobile\n          })\n        });\n        setSubmitLoading(false);\n        handleSituation({\n          type: \"phoneveri\"\n        });\n      }\n    } catch (err) {\n      var _err$response$data$re;\n\n      if ((_err$response$data$re = err.response.data.result) === null || _err$response$data$re === void 0 ? void 0 : _err$response$data$re.errorText) {\n        var _err$response$data$re2;\n\n        toast.error((_err$response$data$re2 = err.response.data.result) === null || _err$response$data$re2 === void 0 ? void 0 : _err$response$data$re2.errorText, getToastConfig());\n      } else toast.error(err.response.data.message, getToastConfig());\n\n      setSubmitLoading(false);\n    }\n  };\n\n  return __jsx(Translate, null, ({\n    translate: t\n  }) => {\n    return __jsx(React.Fragment, null, __jsx(\"section\", {\n      className: \"add-address-step3\"\n    }, __jsx(\"div\", {\n      className: \"add-address-step3__col\"\n    }, __jsx(\"p\", {\n      className: \"add-address-step3__p1\"\n    }, __jsx(Translate, {\n      id: \"addresses.changephone\"\n    })), __jsx(\"p\", {\n      className: \"add-address-step3__p2\"\n    }, __jsx(Translate, {\n      id: \"addresses.entermobile\"\n    })), __jsx(\"div\", {\n      className: \"add-address-step3__phone-container\"\n    }, __jsx(\"div\", {\n      className: \"add-address-step1__mobile-cnt\"\n    }, __jsx(\"span\", {\n      className: \"add-address-step1__mobile-code\"\n    }, \"+\", data.phoneCode), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"text\",\n      placeholder: t(\"addresses.mobile-number-placeholder\"),\n      name: \"phone\",\n      value: mobile,\n      onChange: e => {\n        setMobile(e.target.value);\n\n        if (errors[e.target.name]) {\n          validatePhoneNumber({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang,\n            iso: data.phoneIso\n          });\n        }\n      },\n      onBlur: e => {\n        validatePhoneNumber({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang,\n          iso: data.phoneIso\n        });\n      }\n    })), __jsx(FormErrorMsg, {\n      show: errors[\"phone\"],\n      msg: errors[\"phone\"]\n    })), __jsx(\"button\", {\n      className: \"primary-btn add-address-step3__btn\",\n      onClick: handleSubmit\n    }, submitLoading ? __jsx(Loading, {\n      type: \"white\",\n      with: \"20px\",\n      height: \"20px\"\n    }) : __jsx(Translate, {\n      id: \"addresses.send-new-code\"\n    })), __jsx(\"a\", {\n      className: \"add-address-step3__link mt-5 mt-md-3 d-block primary-link\",\n      onClick: e => {\n        e.preventDefault();\n        handleSituation({\n          type: \"phoneveri\"\n        });\n      }\n    }, __jsx(Translate, {\n      id: \"addresses.cancel\"\n    })))));\n  });\n});","map":null,"metadata":{},"sourceType":"module"}