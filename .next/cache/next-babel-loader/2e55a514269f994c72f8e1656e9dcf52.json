{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { varitySort } from \"../../GoodDetailAlgo\";\nimport border from \"./../../../../../../assets/icons/border.png\";\nimport classnames from \"classnames\";\nimport { selectLang } from \"../../../../../../appConfigSlice\";\nimport { connect } from \"react-redux\";\nimport { isAr } from \"../../../../../../lib/helpers\";\nimport { withRouter } from \"next/router\";\n\nclass VariSelect extends React.Component {\n  constructor(props) {\n    var _this$props$router$qu;\n\n    super(props);\n\n    _defineProperty(this, \"isAvailable\", id => {\n      const newArray = varitySort([...this.selectedArrayWithoutMe, id]).toString(); // console.log(this.varietyExistencePossibility, \"==\");\n      // console.log(newArray, this.varietyExistencePossibility[newArray]);\n\n      if (this.varietyExistencePossibility[newArray] === 0) return true;\n      if (this.varietyExistencePossibility[newArray]) return true;\n      return false;\n    });\n\n    _defineProperty(this, \"handleClick\", id => {\n      if (this.isAvailable(id)) {\n        const newSelectedObj = _objectSpread(_objectSpread({}, this.variSelected), {}, {\n          [this.type]: id\n        });\n\n        const newArray = varitySort([...this.selectedArrayWithoutMe, id]).toString();\n        this.handleVariSelect(newSelectedObj, this.varietyExistencePossibility[newArray]);\n      } else {\n        for (let key in this.varietyExistencePossibility) {\n          if (key.includes(id.toString())) {\n            this.handleNonMatchedVariSelect(this.varietyExistencePossibility[key]);\n            break;\n          }\n        }\n      }\n    });\n\n    this.textRef = /*#__PURE__*/React.createRef();\n    const {\n      type,\n      data,\n      varietyExistencePossibility,\n      handleVariSelect,\n      handleNonMatchedVariSelect\n    } = this.props;\n    this.type = type;\n    this.data = data;\n    this.varietyExistencePossibility = varietyExistencePossibility;\n    this.handleVariSelect = handleVariSelect;\n    this.handleNonMatchedVariSelect = handleNonMatchedVariSelect;\n    this.findedText = \"\";\n    this.goodId = (_this$props$router$qu = this.props.router.query) === null || _this$props$router$qu === void 0 ? void 0 : _this$props$router$qu.good[0];\n  }\n\n  handleMouseEnter(text) {\n    this.textRef.current.innerHTML = text;\n  }\n\n  componentDidMount() {\n    this.textRef.current.innerHTML = this.findedText;\n  }\n\n  componentDidUpdate() {\n    this.textRef.current.innerHTML = this.findedText;\n  }\n\n  render() {\n    var _this$data;\n\n    const {\n      variSelected\n    } = this.props; // console.log(variSelected)\n\n    this.variSelected = this.props.variSelected;\n    this.whichSelecteId = variSelected[this.type];\n    this.selectedArrayWithoutMe = [];\n\n    for (let key in variSelected) {\n      if (key !== this.type) this.selectedArrayWithoutMe.push(variSelected[key]);\n    }\n\n    return __jsx(\"div\", {\n      className: \"itemDetail__property-item-cnt\"\n    }, __jsx(\"div\", null, __jsx(\"span\", {\n      className: \"itemDetail__small-text\"\n    }, this.type, \":\"), __jsx(\"span\", {\n      ref: this.textRef,\n      className: \"itemDetail__small-value\"\n    })), __jsx(\"ul\", {\n      className: \"itemDetail__property-list\"\n    }, (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.map(item => {\n      const isAva = this.isAvailable(item.fkVariationParameterValueId);\n      const IamSelected = this.whichSelecteId === item.fkVariationParameterValueId;\n      if (IamSelected) this.findedText = item.valueTitle;\n      return __jsx(\"li\", {\n        className: classnames(\"itemDetail__property-item\", \"itemDetail__property-item--padding\", {\n          \"itemDetail__property-item--active\": IamSelected,\n          \"itemDetail__property-item--inactive\": !isAva && !IamSelected,\n          \"itemDetail__property-item--border\": true\n        }),\n        onMouseEnter: () => {\n          this.handleMouseEnter(item.valueTitle);\n        },\n        onMouseLeave: () => {\n          this.handleMouseEnter(this.findedText);\n        },\n        onClick: () => {\n          this.handleClick(item.fkVariationParameterValueId);\n        }\n      }, item.imageUrl ? __jsx(\"img\", {\n        className: \"itemDetail__property-img\",\n        src: `${process.env.NEXT_PUBLIC_Goods_PREFIX}/${this.goodId}/GoodsVariety/${item.imageUrl}`,\n        alt: item.valueTitle,\n        title: item.valueTitle\n      }) : item.valueTitle);\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    lang: selectLang(state)\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(VariSelect));","map":null,"metadata":{},"sourceType":"module"}