{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport SearchIcon from \"./../../../../../assets/icons/img-search.svg\";\nimport SearchIconLeft from \"./../../../../../assets/icons/img-header-search-left.svg\";\nimport Link from \"next/link\";\nimport SearchSugestion from \"./SearchSugestion/SearchSugestion\";\nimport { client_getHomeSerachAutoComplete } from \"./../../../../../lib/api/client/clientHome\";\nimport { connect } from \"react-redux\";\nimport { selectLang, selectCurr } from \"../../../../../appConfigSlice\";\n\nclass SearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"changeSearchInput\", async e => {\n      this.setState({\n        searchQuery: e.target.value\n      });\n\n      if (e.target.value != \"\") {\n        this.setState({\n          showSuggestion: true,\n          showLoader: true\n        });\n        const result = await client_getHomeSerachAutoComplete(e.target.value);\n\n        if (result.result.goods.length != 0) {\n          this.setState({\n            showLoader: false,\n            autoData: result.result\n          });\n        } else {\n          this.setState({\n            showLoader: false,\n            showSuggestion: false\n          });\n        }\n      } else {\n        this.setState({\n          showSuggestion: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"handRedirectSearch\", e => {\n      if (e.which === 13 && this.state.searchQuery != null && this.state.searchQuery != undefined && this.state.searchQuery != \"\") {\n        this.props.history.push(`/${this.props.curr}-${this.props.lang}/search?search=${this.state.searchQuery}`);\n      }\n    });\n\n    this.state = {\n      showSuggestion: false,\n      autoData: {},\n      showLoader: false,\n      searchQuery: \"\"\n    };\n    this.wrapperRef = /*#__PURE__*/React.createRef();\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  handleClickOutside(event) {\n    var _this$wrapperRef$curr;\n\n    if (this.wrapperRef && !((_this$wrapperRef$curr = this.wrapperRef.current) === null || _this$wrapperRef$curr === void 0 ? void 0 : _this$wrapperRef$curr.contains(event.target))) {\n      this.setState({\n        showSuggestion: false\n      });\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"header-top__search-box\",\n      ref: this.wrapperRef\n    }, __jsx(\"input\", {\n      type: \"text\",\n      className: \"header-top__search-input\",\n      placeholder: this.props.placeholder,\n      onChange: this.changeSearchInput,\n      value: this.state.searchQuery,\n      onKeyPress: this.handRedirectSearch\n    }), __jsx(Link, {\n      href: `/${this.props.curr}-${this.props.lang}/search?search=${this.state.searchQuery}`\n    }, __jsx(\"a\", {\n      className: \"header-top__search-btn\"\n    }, this.props.lang === \"en\" ? __jsx(\"img\", {\n      src: SearchIcon,\n      className: \"header-top__search-icon\"\n    }) : __jsx(\"img\", {\n      src: SearchIconLeft,\n      className: \"header-top__search-icon\"\n    }))), this.state.showSuggestion && __jsx(SearchSugestion, {\n      showLoader: this.state.showLoader,\n      data: this.state.autoData\n    }));\n  }\n\n}\n\nexport default SearchInput;","map":null,"metadata":{},"sourceType":"module"}