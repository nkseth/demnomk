{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { LocalizeProvider, Translate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { wrapper } from \"../../../store\";\nimport { translationsPayload, mergeTranslations } from \"../../../translations/payload\";\nimport cartTranslation from \"../../../translations/cart-whishlist-translations.json\";\nimport HeaderTranslations from \"./../../../translations/header-translations.json\";\nimport Footer from \"../../../components/app/footer\";\nimport { Header } from \"../../../components/app/header\";\nimport { CartAndWishlist } from \"../../../components/app/pages/CartAndWishlist\";\nimport { server_fetchHeader, server_fetchFooter } from \"../../../lib/api/client/serverCommon\";\nimport Head from \"next/head\";\nimport { useUserAgent } from \"next-useragent\";\n\nclass CartPage extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const cart = __jsx(CartAndWishlist, null);\n\n    return __jsx(React.Fragment, null, __jsx(LocalizeProvider, {\n      initialize: translationsPayload(mergeTranslations(HeaderTranslations, cartTranslation), this.props.lang)\n    }, __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      return __jsx(Head, null, __jsx(\"title\", null, t(\"@cartTitle\")), __jsx(\"meta\", {\n        property: \"og:title\",\n        content: t(\"@cartTitle\"),\n        key: \"og:title\"\n      }), __jsx(\"meta\", {\n        property: \"title\",\n        content: t(\"@cartTitle\"),\n        key: \"title\"\n      }));\n    }), __jsx(Header, {\n      data: this.props.data.header,\n      lang: this.props.lang,\n      curr: this.props.curr,\n      isDesktop: this.props.ua.isDesktop\n    }), cart, __jsx(Footer, {\n      data: this.props.data.footer,\n      isDesktop: this.props.ua.isDesktop,\n      lang: this.props.lang,\n      cartCount: this.props.data.header.cartCount\n    })));\n  }\n\n}\n\nexport default connect()(CartPage);\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const ua = useUserAgent(context.req.headers[\"user-agent\"]); // initialize page lang and currency\n\n  const Result = await Promise.all([server_fetchHeader(ua.isDesktop), server_fetchFooter()]);\n  return {\n    props: {\n      ua,\n      data: {\n        header: Result[0].result,\n        footer: Result[1].result\n      }\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}