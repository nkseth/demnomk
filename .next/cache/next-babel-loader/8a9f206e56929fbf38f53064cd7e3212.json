{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport SearchIcon from \"./../../../../../../assets/icons/search-gray.svg\"; // import \"./CheckBoxList.scss\";\n// import \"./CheckBoxList-rtl.scss\";\n\nexport default (({\n  data,\n  itemClass,\n  listClass,\n  search,\n  placeholder,\n  dataName,\n  dataValue,\n  singleSelect = false,\n  onSelect = () => {},\n  initialSelectIdArr = [],\n  seeMore,\n  maxItemShow,\n  textOpen,\n  textClose\n}) => {\n  const {\n    0: searchText,\n    1: setSearchText\n  } = useState(\"\");\n  const {\n    0: checkedIds,\n    1: setCheckedIds\n  } = useState({});\n  const {\n    0: seemoreFlag,\n    1: setSeemoreFlag\n  } = useState(false);\n  useEffect(() => {\n    const gen = {};\n\n    for (let id of initialSelectIdArr) {\n      if (data[id]) {\n        gen[id] = {\n          value: data[id][dataValue],\n          checked: true\n        };\n      }\n    }\n\n    setCheckedIds(gen);\n    return () => {};\n  }, [initialSelectIdArr.length]);\n\n  const handleCheckChange = event => {\n    if (singleSelect) {\n      const newState = {\n        [event.target.value]: {\n          value: event.target.value,\n          checked: event.target.checked\n        }\n      };\n      setCheckedIds(newState);\n      createSelectedArrayValue(newState);\n    } else {\n      const newState = _objectSpread(_objectSpread({}, checkedIds), {}, {\n        [event.target.value]: {\n          value: event.target.value,\n          checked: event.target.checked\n        }\n      });\n\n      setCheckedIds(newState);\n      createSelectedArrayValue(newState);\n    }\n  };\n\n  const createSelectedArrayValue = checkedList => {\n    const arr = [];\n\n    for (let key in checkedList) {\n      if (checkedList[key].checked) arr.push(parseInt(key));\n    }\n\n    onSelect(arr);\n  }; //const placeholder = <Placeholder />;\n\n\n  const handleChange = e => {\n    setSearchText(e.target.value);\n  };\n\n  const handleClick = e => {\n    e.preventDefault();\n    setSeemoreFlag(!seemoreFlag);\n  };\n\n  if (!data) return null;\n  const arrayData = Object.keys(data);\n  let count = arrayData.length;\n\n  if (seeMore) {\n    count = maxItemShow;\n\n    if (searchText) {\n      count = arrayData.length;\n    }\n\n    if (seemoreFlag) {\n      count = arrayData.length;\n    }\n  }\n\n  return __jsx(React.Fragment, null, search && __jsx(\"div\", {\n    className: \"checklist__search\"\n  }, __jsx(SearchIcon, {\n    className: \"checklist__search-input-icon\"\n  }), __jsx(\"input\", {\n    onChange: handleChange,\n    type: \"text\",\n    value: searchText,\n    className: \"checklist__search-input\",\n    placeholder: placeholder\n  })), __jsx(\"ul\", {\n    className: `checklist ${listClass}`\n  }, arrayData.slice(0, count).map((key, index) => {\n    return (searchText && data[key][dataName].includes(searchText) || !searchText) && __jsx(\"label\", {\n      key: index,\n      className: \"checklist__label\"\n    }, __jsx(\"li\", {\n      className: `${itemClass}`\n    }, __jsx(\"input\", {\n      className: \"checklist__check\",\n      type: \"checkbox\",\n      name: data[key][dataName],\n      value: data[key][dataValue],\n      checked: checkedIds[data[key][dataValue]] ? checkedIds[data[key][dataValue]].checked : false,\n      onChange: handleCheckChange\n    }), __jsx(\"span\", null, data[key][dataName])));\n  })), seeMore && !searchText && __jsx(\"a\", {\n    href: \"\",\n    onClick: handleClick,\n    className: \"seemore__link\"\n  }, !seemoreFlag ? textOpen : textClose));\n});","map":null,"metadata":{},"sourceType":"module"}