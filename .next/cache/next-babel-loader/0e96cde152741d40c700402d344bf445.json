{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { LocalizeProvider } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { wrapper } from \"../../../store\";\nimport Error from \"next/error\";\nimport { translationsPayload, mergeTranslations } from \"../../../translations/payload\";\nimport searchTranslations from \"../../../translations/search-translations.json\";\nimport HeaderTranslations from \"../../../translations/header-translations.json\";\nimport Footer from \"../../../components/app/footer\";\nimport { Header } from \"../../../components/app/header\";\nimport { Provider } from \"../../../components/app/pages/Provider\";\nimport { server_fetchHeader, server_fetchFooter } from \"../../../lib/api/client/serverCommon\";\nimport { providerQueryToFilters } from \"../../../lib/QueryToFilters\";\nimport { serverProviderUpdate } from \"../../../components/app/pages/Provider/providerSlice\";\nimport { server_fetchProvider } from \"../../../lib/api/client/serverProvider\";\nimport Head from \"next/head\";\nimport { WithUserAgentProps, withUserAgent, useUserAgent } from \"next-useragent\";\n\nclass ProviderPage extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    if (this.props.errorCode !== 200) {\n      return __jsx(Error, {\n        statusCode: this.props.errorCode\n      });\n    }\n\n    const provider = __jsx(Provider, null);\n\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"ajyal.bh | \", this.props.providerName), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: this.props.providerName,\n      key: \"og:title\"\n    }), __jsx(\"meta\", {\n      property: \"title\",\n      content: this.props.providerName,\n      key: \"title\"\n    })), __jsx(LocalizeProvider, {\n      initialize: translationsPayload(mergeTranslations(HeaderTranslations, searchTranslations), this.props.lang)\n    }, __jsx(Header, {\n      data: this.props.data.header,\n      lang: this.props.lang,\n      curr: this.props.curr,\n      isDesktop: this.props.ua.isDesktop\n    }), provider, __jsx(Footer, {\n      isDesktop: this.props.ua.isDesktop,\n      data: this.props.data.footer,\n      lang: this.props.lang,\n      cartCount: this.props.data.header.cartCount\n    })));\n  }\n\n}\n\nexport default connect()(ProviderPage);\nexport const getServerSideProps = wrapper.getServerSideProps(async ({\n  params,\n  store,\n  query,\n  req\n}) => {\n  var _Result$, _Result$2;\n\n  const ua = useUserAgent(req.headers[\"user-agent\"]); // initialize page lang and currency\n\n  const generatedFilters = providerQueryToFilters(query);\n  const providerName = params.providerName[0];\n  const Result = await Promise.all([server_fetchHeader(ua.isDesktop), server_fetchFooter(), server_fetchProvider(generatedFilters, providerName)]);\n\n  if (Result[2].status !== 200) {\n    return {\n      props: {\n        ua,\n        errorCode: Result[2].status\n      }\n    };\n  }\n\n  store.dispatch(serverProviderUpdate({\n    filters: generatedFilters,\n    providerName: providerName,\n    provider: Result[2].result\n  }));\n  return {\n    props: {\n      errorCode: 200,\n      ua,\n      providerName: providerName,\n      data: {\n        header: (_Result$ = Result[0]) === null || _Result$ === void 0 ? void 0 : _Result$.result,\n        footer: (_Result$2 = Result[1]) === null || _Result$2 === void 0 ? void 0 : _Result$2.result\n      }\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}