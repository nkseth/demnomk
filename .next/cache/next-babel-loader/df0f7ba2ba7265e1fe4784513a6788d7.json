{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { BoxStyle2, SelectBox3 as SelectBox, FormErrorMsg, Loading } from \"../../../../../common\";\nimport PaymentAside from \"./PaymentAside\";\nimport { Translate } from \"react-localize-redux\";\nimport { useState } from \"react\";\nimport ItemsBox from \"../ItemsBox\";\nimport { orderContext } from \"../../OrderContext\";\nimport { ProtraitPhonesAndBigger, ProtraitPhones } from \"../../../../../../Responsive\";\nimport { useEffect } from \"react\";\nimport { client_getActivePayment, client_getOrder, client_getPaymentPageUrl } from \"../../../../../../lib/api/client/clientOrder\";\nimport { toast } from \"react-toastify\";\nimport { getErrorMsg } from \"../../../../../../lib/helpers\";\nimport { getToastConfig } from \"../../../../../../lib/toast\";\nimport { selectLang } from \"../../../../../../appConfigSlice\";\nimport { useSelector } from \"react-redux\";\nimport Select from \"react-select\";\nimport Cookies from \"js-cookie\";\nimport { validateEmpty, validateCreditCard, validatePostalCode } from \"../../../../../../lib/formValidator\";\n\nvar Payment = function Payment() {\n  var _useState = useState(false),\n      checked = _useState[0],\n      setChecked = _useState[1];\n\n  var _useState2 = useState(null),\n      payment = _useState2[0],\n      setPayment = _useState2[1];\n\n  var _useState3 = useState(null),\n      paymentType = _useState3[0],\n      setPaymentType = _useState3[1];\n\n  var _useState4 = useState(null),\n      cartType = _useState4[0],\n      setCartType = _useState4[1];\n\n  var _useState5 = useState(null),\n      cartTypeId = _useState5[0],\n      setCartTypeId = _useState5[1];\n\n  var _useState6 = useState(false),\n      placeOrderLoading = _useState6[0],\n      setPlaceOrderLoading = _useState6[1];\n\n  var _useState7 = useState({}),\n      errors = _useState7[0],\n      setErrors = _useState7[1];\n\n  var _useState8 = useState(null),\n      cardName = _useState8[0],\n      setCardName = _useState8[1];\n\n  var _useState9 = useState(null),\n      cardNumber = _useState9[0],\n      setCardNumber = _useState9[1];\n\n  var _useState10 = useState(null),\n      cardMonth = _useState10[0],\n      setCardMonth = _useState10[1];\n\n  var _useState11 = useState(null),\n      cardYear = _useState11[0],\n      setCardYear = _useState11[1];\n\n  var _useState12 = useState(null),\n      cardSecurity = _useState12[0],\n      setCardSecurity = _useState12[1];\n\n  var _useState13 = useState(null),\n      cardZip = _useState13[0],\n      setCardZip = _useState13[1];\n\n  var lang = useSelector(selectLang);\n  var coupon = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name_coupon);\n\n  var handleChange = function handleChange(check) {\n    setChecked(check);\n  };\n\n  useEffect(function () {\n    Promise.all([client_getOrder(coupon), client_getActivePayment()]).then(function (res) {\n      setPayment(res[0].result);\n      var cards = [];\n      res[1].result.forEach(function (item) {\n        cards.push({\n          value: item.methodId,\n          label: __jsx(\"div\", null, __jsx(\"img\", {\n            src: \"\".concat(process.env.NEXT_PUBLIC_PAYMENTLOGO_PREFIX, \"/\").concat(item.methodImageUrl),\n            height: \"20px\",\n            width: \"20px\"\n          }), \" \", item.methodTitle)\n        });\n      });\n      setCartTypeId(cards.find(function (x) {\n        return x.value === 3;\n      }));\n      setCartType(cards);\n    })[\"catch\"](function (ex) {\n      return console.error(ex);\n    }); // client_getOrder()\n    //   .then((res) => {\n    //     \n    //   })\n    //   .catch((err) => {\n    //     console.log(err);\n    //   });\n    // client_getActivePayment()\n    //   .then((res) => {\n    //   })\n    //   .catch((err) => {});\n\n    return function () {};\n  }, []);\n\n  if (!payment) {\n    return __jsx(\"div\", {\n      className: \"row payment no-gutters\"\n    }, __jsx(Loading, {\n      type: \"gray\",\n      styleSheet: {\n        margin: \"80px auto\"\n      },\n      width: \"60px\",\n      height: \"60px\"\n    }));\n  }\n\n  var onCartTypeChange = function onCartTypeChange(event) {\n    setCartTypeId(event);\n  };\n\n  var handlePlaceOrderClick = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var key, result, _err$response$data$re, _err$response$data$re2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              if (cartTypeId) {\n                _context.next = 4;\n                break;\n              }\n\n              toast.error(getErrorMsg(lang, \"select-payment\"), getToastConfig());\n              return _context.abrupt(\"return\");\n\n            case 4:\n              if (!placeOrderLoading) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 6:\n              _context.t0 = _regeneratorRuntime.keys(errors);\n\n            case 7:\n              if ((_context.t1 = _context.t0()).done) {\n                _context.next = 14;\n                break;\n              }\n\n              key = _context.t1.value;\n\n              if (!errors[key]) {\n                _context.next = 12;\n                break;\n              }\n\n              toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n              return _context.abrupt(\"return\");\n\n            case 12:\n              _context.next = 7;\n              break;\n\n            case 14:\n              setPlaceOrderLoading(true);\n              _context.prev = 15;\n              _context.next = 18;\n              return client_getPaymentPageUrl(parseInt(cartTypeId.value), cardName, cardNumber, cardMonth, cardYear, cardSecurity, cardZip, coupon);\n\n            case 18:\n              result = _context.sent;\n\n              if (result.status == \"200\") {\n                window.location.href = result.result;\n              }\n\n              setPlaceOrderLoading(false);\n              _context.next = 27;\n              break;\n\n            case 23:\n              _context.prev = 23;\n              _context.t2 = _context[\"catch\"](15);\n\n              if ((_err$response$data$re = _context.t2.response.data.result) === null || _err$response$data$re === void 0 ? void 0 : _err$response$data$re.errorText) {\n                toast.error((_err$response$data$re2 = _context.t2.response.data.result) === null || _err$response$data$re2 === void 0 ? void 0 : _err$response$data$re2.errorText, getToastConfig());\n              } else toast.error(_context.t2.response.data.message, getToastConfig());\n\n              setPlaceOrderLoading(false);\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[15, 23]]);\n    }));\n\n    return function handlePlaceOrderClick(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: \"row payment no-gutters\"\n  }, __jsx(\"section\", {\n    className: \"col-xl-9 col-lg-8 col-12 order-md-1 order-2\"\n  }, __jsx(\"form\", {\n    className: \"mt-4\",\n    onSubmit: handlePlaceOrderClick\n  }, __jsx(BoxStyle2, {\n    headerContent: __jsx(\"h2\", {\n      className: \"payment__box-header\"\n    }, __jsx(Translate, {\n      id: \"payment.payment\"\n    })),\n    className: \"payment__payment-detail-cnt\"\n  }, __jsx(\"div\", {\n    className: \"row mt-4\"\n  }, __jsx(Select, {\n    className: \"react-select col-md-4 col-8\",\n    options: cartType,\n    value: cartTypeId,\n    onChange: onCartTypeChange\n  })), (cartTypeId === null || cartTypeId === void 0 ? void 0 : cartTypeId.value) === 2 ? __jsx(\"div\", {\n    className: \"payment-method__container mt-4\"\n  }, __jsx(\"div\", {\n    className: \"payment__payment-method\"\n  }, __jsx(Translate, null, function (_ref2) {\n    var translate = _ref2.translate;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3 credimax-card-name\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.name-on-card\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"payment-method__input gray__input\",\n      type: \"text\",\n      required: true,\n      name: \"cardName\",\n      value: cardName,\n      onChange: function onChange(e) {\n        setCardName(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang: lang\n          });\n        }\n      },\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"cardName\"],\n      msg: errors[\"cardName\"]\n    }))), __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3 credimax-card-number\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.card-number\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"payment-method__input gray__input\",\n      type: \"text\",\n      placeholder: \"---- ---- ---- ----\",\n      name: \"cardNumber\",\n      value: cardNumber,\n      onChange: function onChange(e) {\n        setCardNumber(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateCreditCard({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang: lang\n          });\n        }\n      },\n      onBlur: function onBlur(e) {\n        validateCreditCard({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"cardNumber\"],\n      msg: errors[\"cardNumber\"]\n    }))), __jsx(\"div\", {\n      className: \"col-md-3 col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.expiry-date\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"div\", {\n      className: \"d-flex\"\n    }, __jsx(\"input\", {\n      className: \"payment-method__input gray__input date-input-month\",\n      type: \"text\",\n      placeholder: \"MM\",\n      required: true,\n      maxLength: \"2\",\n      name: \"cardMonth\",\n      value: cardMonth,\n      onChange: function onChange(e) {\n        setCardMonth(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang: lang\n          });\n        }\n      },\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      }\n    }), __jsx(\"input\", {\n      className: \"payment-method__input gray__input date-input-year\",\n      type: \"text\",\n      placeholder: \"YY\",\n      maxLength: \"2\",\n      required: true,\n      name: \"cardYear\",\n      value: cardYear,\n      onChange: function onChange(e) {\n        setCardYear(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang: lang\n          });\n        }\n      },\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      }\n    })))), __jsx(\"div\", {\n      className: \"col-md-3 p-md-0 col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3 w-100\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.security-code\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"payment-method__input gray__input\",\n      type: \"text\",\n      required: true,\n      name: \"cardSecurity\",\n      value: cardSecurity,\n      onChange: function onChange(e) {\n        setCardSecurity(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang: lang\n          });\n        }\n      },\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      }\n    })))), __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-md-3 col-12\"\n    }, __jsx(\"label\", {\n      className: \"mt-3 w-100\"\n    }, __jsx(\"span\", {\n      className: \"payment-method__input-label gray__input-label\"\n    }, __jsx(Translate, {\n      id: \"payment-method.postal-code\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"payment-method__input gray__input\",\n      type: \"text\",\n      name: \"cardZip\",\n      value: cardZip,\n      onChange: function onChange(e) {\n        setCardZip(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang: lang\n          });\n        }\n      },\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      }\n    })))));\n  }))) : __jsx(\"div\", {\n    className: \"payment-method__container mt-4\"\n  }, __jsx(\"div\", {\n    className: \"payment__payment-method p-4\"\n  }, __jsx(Translate, null, function (_ref3) {\n    var translate = _ref3.translate;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"row\"\n    }, __jsx(\"div\", {\n      className: \"col-12\"\n    }, __jsx(Translate, {\n      id: \"payment-method.redirectToPyamnetPage\"\n    }))));\n  }))), __jsx(ProtraitPhonesAndBigger, null, __jsx(\"div\", {\n    className: \"payment__btn-cnt d-flex mt-5\"\n  }, __jsx(orderContext.Consumer, null, function (context) {\n    return __jsx(\"button\", {\n      className: \"primary-btn\"\n    }, placeOrderLoading ? __jsx(Loading, {\n      type: \"white\",\n      width: \"20px\",\n      height: \"20px\"\n    }) : (cartTypeId === null || cartTypeId === void 0 ? void 0 : cartTypeId.value) === 2 ? __jsx(Translate, {\n      id: \"payment-method.complate-payment\"\n    }) : __jsx(Translate, {\n      id: \"common.place-order\"\n    }));\n  }))), __jsx(ProtraitPhones, null, __jsx(\"div\", {\n    className: \"checkout-fix justify-content-center\"\n  }, __jsx(orderContext.Consumer, null, function (context) {\n    return __jsx(\"button\", {\n      className: \"primary-btn returns__add-btn\"\n    }, placeOrderLoading ? __jsx(Loading, {\n      type: \"white\",\n      width: \"20px\",\n      height: \"20px\"\n    }) : (cartTypeId === null || cartTypeId === void 0 ? void 0 : cartTypeId.value) === 2 ? __jsx(Translate, {\n      id: \"payment-method.complate-payment\"\n    }) : __jsx(Translate, {\n      id: \"common.place-order\"\n    }));\n  })))), __jsx(ItemsBox, {\n    count: payment.itemsCount,\n    items: payment.items\n  }))), __jsx(\"aside\", {\n    className: \"col-xl-3 col-lg-4 col-12 order-md-2 order-1\"\n  }, __jsx(PaymentAside, {\n    data: payment\n  })));\n};\n\nexport default Payment;","map":null,"metadata":{},"sourceType":"module"}