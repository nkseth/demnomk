{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { ReactComponent as EditIcon } from \"../../../../../../../assets/icons/edit.svg\";\nimport { LandScapePhones } from \"../../../../../../../Responsive\";\nimport { validateEmpty, validatePhoneNumber } from \"../../../../../../../lib/formValidator\";\nimport { FormErrorMsg, Loading } from \"./../../../../../../common\";\nimport { useSelector } from \"react-redux\";\nimport { selectLang, selectCurr } from \"../../../../../../../appConfigSlice\";\nimport { client_getActiveCountries, client_getActiveCities, client_editAddAddress, client_getActiveProvince } from \"../../../../../../../lib/api/client/clientShop\";\nimport { client_addAddress } from \"../../../../../../../lib/api/client/clientShop\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { getToastConfig } from \"../../../../../../../lib/toast\";\nimport { getErrorMsg } from \"./../../../../../../../lib/helpers\";\nimport { useEffect } from \"react\";\nimport Select from \"react-select\";\nimport { isRtl } from \"./../../../../../../../lib/isRtl\";\nimport { useHistory } from \"react-router-dom\";\nexport default (({\n  handleSituation,\n  data,\n  editItem,\n  setData\n}) => {\n  const {\n    0: mobile,\n    1: setMobile\n  } = useState(\"\");\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const lang = useSelector(selectLang);\n  const curr = useSelector(selectCurr);\n  const {\n    0: firstname,\n    1: setFirstname\n  } = useState(\"\");\n  const {\n    0: lastname,\n    1: setLanstname\n  } = useState(\"\");\n  const {\n    0: postalCode,\n    1: setPostalCode\n  } = useState(\"\");\n  const {\n    0: phoneCode,\n    1: setPhoneCode\n  } = useState(\"\");\n  const {\n    0: addressId,\n    1: setAddressId\n  } = useState(0);\n  const {\n    0: addressTitle,\n    1: setAddressTitle\n  } = useState(\"\");\n  const {\n    0: selectedCountry,\n    1: setSelectedCountry\n  } = useState(0);\n  const {\n    0: isDisableCountry,\n    1: setDisableCountry\n  } = useState(false);\n  const {\n    0: selectedCity,\n    1: setSelectedCity\n  } = useState(0);\n  const {\n    0: selectedProvince,\n    1: setSelectedProvince\n  } = useState(0);\n  const {\n    0: countryItems,\n    1: setCountryItems\n  } = useState([]);\n  const {\n    0: cityItems,\n    1: setCityItems\n  } = useState([]);\n  const {\n    0: provinceItems,\n    1: setProvinceItems\n  } = useState([]);\n  const {\n    0: addressEmptyError,\n    1: setAddressEmptyError\n  } = useState(false);\n  const {\n    0: countryEmptyError,\n    1: setCountryEmptyError\n  } = useState(false);\n  const {\n    0: cityEmptyError,\n    1: setcityEmptyError\n  } = useState(false);\n  const {\n    0: provinceEmptyError,\n    1: setProvinceEmptyError\n  } = useState(false);\n  const {\n    0: isEditState,\n    1: setIsEditState\n  } = useState(false);\n  const {\n    0: submitLoading,\n    1: setSubmitLoading\n  } = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    if (editItem != null) {\n      setIsEditState(true);\n      setEditData();\n    } else {\n      getCountris();\n    }\n\n    return () => {\n      editItem = null;\n    };\n  }, []);\n\n  function compare(a, b) {\n    return a.label > b.label ? 1 : b.label > a.label ? -1 : 0;\n  }\n\n  const setEditData = async () => {\n    if (data.address == undefined) {\n      setAddressTitle(editItem.address);\n      data.address = editItem.address;\n      data.Location = {\n        lat: editItem.locationX,\n        lng: editItem.locationY\n      };\n    }\n\n    setAddressId(editItem.addressId);\n    setPostalCode(editItem.postalCode);\n    setLanstname(editItem.transfereeFamily);\n    setFirstname(editItem.transfereeName);\n    setMobile(editItem.transfereeMobile);\n    let city = {\n      value: editItem.fkCityId,\n      label: editItem.cityName\n    };\n    let province = {\n      value: editItem.fkProvinceId,\n      label: editItem.provinceName\n    };\n    let country = {\n      value: editItem.fkCountryId,\n      label: editItem.countryName,\n      phoneCode: editItem.phoneCode\n    };\n    await getCountris();\n\n    if (data.iso === undefined) {\n      await handleCountryChange(country);\n      setSelectedCountry(country);\n      setSelectedCity(city);\n      setSelectedProvince(province);\n      setDisableCountry(true);\n    }\n  };\n\n  const getAddressHandler = () => {\n    handleSituation({\n      type: \"showMap\"\n    });\n  };\n\n  const getCountris = async () => {\n    const result = await client_getActiveCountries();\n    let countries = [];\n    result.result.forEach(item => {\n      countries.push({\n        value: item.countryId,\n        label: item.countryTitle,\n        iso: item.iso,\n        phoneCode: item.phoneCode\n      });\n    });\n    countries.sort(compare);\n    setCountryItems(countries);\n\n    if (data.iso !== undefined) {\n      let currentCountry = countries.filter(x => x.iso === data.iso);\n\n      if (currentCountry.length > 0) {\n        setSelectedCountry(currentCountry[0]);\n        setAddressTitle(data.address);\n        setDisableCountry(true);\n        handleCountryChange(currentCountry[0]);\n      } else {\n        toast.error(getErrorMsg(lang, \"country-add-address\"), getToastConfig());\n        setDisableCountry(false);\n        setSelectedCountry(0);\n        setSelectedCity(0);\n        setPhoneCode(\"\");\n        return;\n      }\n    }\n  };\n\n  const handleCountryChange = async item => {\n    setPhoneCode(item.phoneCode);\n\n    if (item.value != (selectedCountry === null || selectedCountry === void 0 ? void 0 : selectedCountry.value)) {\n      setSelectedProvince(0);\n      setSelectedCity(0);\n    }\n\n    const result = await client_getActiveProvince(item.value);\n    let provinces = [];\n    result.result.forEach(item => {\n      provinces.push({\n        value: item.provinceId,\n        label: item.provinceName\n      });\n    });\n    provinces.sort(compare);\n    setProvinceItems(provinces);\n  };\n\n  const handleProvinceChange = async item => {\n    const result = await client_getActiveCities(item.value);\n\n    if (item.value != (selectedProvince === null || selectedProvince === void 0 ? void 0 : selectedProvince.value)) {\n      setSelectedCity(0);\n    }\n\n    let cities = [];\n    result.result.forEach(item => {\n      cities.push({\n        value: item.cityId,\n        label: item.cityTitle\n      });\n    });\n    cities.sort(compare);\n    setCityItems(cities);\n    setProvinceEmptyError(false);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (submitLoading) return;\n\n    if (data.address == undefined) {\n      setAddressEmptyError(true);\n      return;\n    }\n\n    if (selectedCountry == 0) {\n      setCountryItems(true);\n      return;\n    }\n\n    if (selectedProvince == 0) {\n      setProvinceEmptyError(true);\n      return;\n    }\n\n    if (selectedCity == 0) {\n      setcityEmptyError(true);\n      return;\n    }\n\n    for (let key in errors) {\n      if (errors[key]) {\n        toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n        return;\n      }\n    }\n\n    setSubmitLoading(true);\n\n    if (!isEditState) {\n      const result = await client_addAddress({\n        transfereeMobile: mobile,\n        postalCode: postalCode,\n        address: data.address,\n        locationX: data.Location.lat,\n        locationY: data.Location.lng,\n        transfereeName: firstname,\n        transfereeFamily: lastname,\n        fkCountryId: selectedCountry.value,\n        fkCityId: selectedCity.value,\n        fkProvinceId: selectedProvince.value,\n        isDefualt: data.isDefault\n      });\n\n      if (result.status == 200) {\n        toast.success(getErrorMsg(lang, \"success-add-address\"), getToastConfig());\n        setcityEmptyError(false);\n        setProvinceEmptyError(false);\n        setAddressEmptyError(false);\n        setCountryEmptyError(false);\n        setSubmitLoading(false);\n        setData({\n          phoneNumberVeri: {\n            requestId: result.result.requestId,\n            addressId: result.result.addressId,\n            phoneNumber: mobile,\n            phoneIso: selectedCountry.iso,\n            phoneCode: phoneCode\n          }\n        });\n        handleSituation({\n          type: \"phoneveri\"\n        }); // history.push(\"/\" + curr + \"-\" + lang + \"/panel/addresses\");\n      }\n    } else {\n      const result = await client_editAddAddress({\n        transfereeMobile: mobile,\n        postalCode: postalCode,\n        address: data.address,\n        locationX: data.Location.lat,\n        locationY: data.Location.lng,\n        transfereeName: firstname,\n        transfereeFamily: lastname,\n        fkCountryId: selectedCountry.value,\n        fkCityId: selectedCity.value,\n        fkProvinceId: selectedProvince.value,\n        addressId: addressId,\n        cityName: selectedCity.label,\n        countryName: selectedCountry.label\n      });\n\n      if (result.status == 200) {\n        toast.success(getErrorMsg(lang, \"success-update-address\"), getToastConfig());\n        editItem = null;\n        setcityEmptyError(false);\n        setProvinceEmptyError(false);\n        setAddressEmptyError(false);\n        setCountryEmptyError(false);\n        setSubmitLoading(false);\n        setIsEditState(true);\n        history.push(\"/\" + curr + \"-\" + lang + \"/panel/addresses\");\n      }\n    }\n  };\n\n  return __jsx(Translate, null, ({\n    translate: t\n  }) => {\n    return __jsx(\"form\", {\n      onSubmit: $event => {\n        handleSubmit($event);\n      }\n    }, __jsx(\"section\", {\n      className: \"add-address-step1 no-gutters\"\n    }, __jsx(ToastContainer, _extends({\n      rtl: isRtl(lang)\n    }, getToastConfig())), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"div\", {\n      className: \"d-flex justify-content-between add-address-step1__mapinput gray__input clearfix\"\n    }, __jsx(\"div\", {\n      className: \"col\"\n    }, __jsx(\"span\", {\n      className: \"add-address-step1__mapinput-text\"\n    }, __jsx(Translate, {\n      id: \"addresses.setmap\"\n    })), __jsx(\"span\", {\n      className: \"add-address-step1__mapinput-value\"\n    }, addressTitle)), __jsx(\"button\", {\n      onClick: getAddressHandler,\n      className: \"add-address-step1__mapinput-btn\"\n    }, __jsx(EditIcon, null)))), addressEmptyError && __jsx(\"span\", {\n      className: \"custom-error\"\n    }, __jsx(Translate, {\n      id: \"addresses.empty-address-error\"\n    }))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"addresses.country\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(Select, {\n      className: \"react-select\",\n      options: countryItems,\n      isDisabled: isDisableCountry,\n      onChange: item => {\n        handleCountryChange(item);\n        setSelectedCountry(item);\n      },\n      placeholder: t(\"addresses.country-placeholder\"),\n      value: selectedCountry,\n      required: true\n    })), countryEmptyError && __jsx(\"span\", {\n      className: \"country-error\"\n    }, __jsx(Translate, {\n      id: \"addresses.country-placeholder\"\n    })))), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"addresses.province\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(Select, {\n      className: \"react-select\",\n      options: provinceItems,\n      onChange: setSelectedProvince,\n      onChange: item => {\n        handleProvinceChange(item);\n        setSelectedProvince(item);\n      },\n      placeholder: t(\"addresses.province-placeholder\"),\n      value: selectedProvince,\n      required: true\n    })), provinceEmptyError && __jsx(\"span\", {\n      className: \"country-error\"\n    }, __jsx(Translate, {\n      id: \"addresses.province-placeholder\"\n    }))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"addresses.city\"\n    }), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(Select, {\n      className: \"react-select\",\n      options: cityItems,\n      onChange: item => {\n        setSelectedCity(item);\n        setcityEmptyError(false);\n      },\n      placeholder: t(\"addresses.city-placeholder\"),\n      value: selectedCity,\n      required: true\n    })), cityEmptyError && __jsx(\"span\", {\n      className: \"country-error\"\n    }, __jsx(Translate, {\n      id: \"addresses.city-placeholder\"\n    })))), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.firstname\"), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"text\",\n      name: \"firstname\",\n      placeholder: t(\"addresses.firstname-placeholder\"),\n      onChange: e => {\n        setFirstname(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      value: firstname,\n      required: true,\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"firstname\"],\n      msg: errors[\"firstname\"]\n    }))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.lastname\"), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"text\",\n      name: \"lastname\",\n      placeholder: t(\"addresses.lastname-placeholder\"),\n      onChange: e => {\n        setLanstname(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      required: true,\n      value: lastname,\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"lastname\"],\n      msg: errors[\"lastname\"]\n    })))), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.mobile-number\"), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"div\", {\n      className: \"add-address-step1__mobile-cnt\"\n    }, __jsx(\"span\", {\n      className: \"add-address-step1__mobile-code\"\n    }, \"+\", phoneCode), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"tel\",\n      required: true,\n      name: \"phone\",\n      maxLength: \"15\",\n      placeholder: t(\"addresses.mobile-number-placeholder\"),\n      value: mobile,\n      onChange: e => {\n        setMobile(e.target.value);\n\n        if (errors[e.target.name]) {\n          validatePhoneNumber({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang,\n            iso: selectedCountry.iso\n          });\n        }\n      },\n      onBlur: e => {\n        validatePhoneNumber({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang,\n          iso: selectedCountry.iso\n        });\n      }\n    })), __jsx(FormErrorMsg, {\n      show: errors[\"phone\"],\n      msg: errors[\"phone\"]\n    }))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.postal-code\")), __jsx(\"input\", {\n      className: \"gray__input\",\n      name: \"postalCode\",\n      placeholder: t(\"addresses.postal-code-placeholder\"),\n      type: \"text\",\n      pattern: \"[0-9]*\",\n      value: postalCode,\n      onChange: e => {\n        setPostalCode(e.target.value);\n      }\n    }))))), __jsx(LandScapePhones, {\n      className: \"add-address-step1__check\"\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      id: \"setDefault\",\n      name: \"setDefault\",\n      value: \"Bike\"\n    }), __jsx(\"label\", {\n      htmlFor: \"setDefault\"\n    }, t(\"addresses.set-default-add\"))), __jsx(\"div\", {\n      className: \"add-address-step1__btn-cnt\"\n    }, __jsx(\"button\", {\n      className: \"primary-btn add-address-step1__btn\",\n      type: \"submit\"\n    }, submitLoading ? __jsx(Loading, {\n      type: \"white\",\n      width: \"20px\",\n      height: \"20px\"\n    }) : isEditState ? t(\"addresses.edit\") : t(\"addresses.save\"))));\n  });\n});","map":null,"metadata":{},"sourceType":"module"}