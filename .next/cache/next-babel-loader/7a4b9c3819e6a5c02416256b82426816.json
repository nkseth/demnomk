{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { LocalizeProvider, Translate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { wrapper } from \"../../../store\";\nimport { translationsPayload, mergeTranslations } from \"../../../translations/payload\";\nimport orderTranslations from \"../../../translations/order-translations.json\";\nimport HeaderTranslations from \"./../../../translations/header-translations.json\";\nimport Footer from \"../../../components/app/footer\";\nimport { Header } from \"../../../components/app/header\";\nimport { Order } from \"../../../components/app/pages/Order\";\nimport { server_fetchHeader, server_fetchFooter } from \"../../../lib/api/client/serverCommon\";\nimport Cookies from \"js-cookie\";\nimport { isServer } from \"../../../lib/isServer\";\nimport { selectLang, selectCurr } from \"../../../appConfigSlice\";\nimport { withRouter } from \"next/router\";\nimport Head from \"next/head\";\nimport { WithUserAgentProps, withUserAgent, useUserAgent } from \"next-useragent\";\n\nclass OrderPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (!isServer()) {\n      this.redirect = false;\n      const token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name);\n\n      if (!token) {\n        this.props.router.push(`/${this.props.curr}-${this.props.lang}/Auth`);\n        this.redirect = true;\n      }\n    }\n  }\n\n  render() {\n    if (this.redirect) {\n      return __jsx(\"p\", null, \"Redirecting...\");\n    }\n\n    const order = __jsx(Order, null);\n\n    return __jsx(LocalizeProvider, {\n      initialize: translationsPayload(mergeTranslations(orderTranslations, HeaderTranslations), this.props.lang)\n    }, __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      return __jsx(Head, null, __jsx(\"title\", null, t(\"@orderTitle\")));\n    }), __jsx(Header, {\n      data: this.props.data.header,\n      lang: this.props.lang,\n      curr: this.props.curr,\n      isDesktop: this.props.ua.isDesktop\n    }), order, __jsx(Footer, {\n      data: this.props.data.footer,\n      isDesktop: this.props.ua.isDesktop,\n      lang: this.props.lang,\n      cartCount: this.props.data.header.cartCount\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    lang: selectLang(state),\n    curr: selectCurr(state)\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(OrderPage));\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const ua = useUserAgent(context.req.headers[\"user-agent\"]);\n  const Result = await Promise.all([server_fetchHeader(ua.isDesktop), server_fetchFooter()]);\n  return {\n    props: {\n      ua,\n      data: {\n        header: Result[0].result,\n        footer: Result[1].result\n      }\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}