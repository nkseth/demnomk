{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useReducer, useState } from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { useSelector } from \"react-redux\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\nimport { selectCurr, selectLang } from \"../../../../appConfigSlice\";\nimport { client_fetchTrackingDetail } from \"../../../../lib/api/client/clientTracking\";\nimport { validateEmpty } from \"../../../../lib/formValidator\";\nimport { getErrorMsg } from \"../../../../lib/helpers\";\nimport { isRtl } from \"../../../../lib/isRtl\";\nimport { getToastConfig } from \"../../../../lib/toast\";\nimport { BoxStyle1, FormErrorMsg, Loading } from \"../../../common\";\nimport TrackingSvg from \"./../../../../assets/icons/tracking.svg\";\nimport TrackingResult from \"./TrackingResult\";\n\nconst renderBoxHeader = () => {\n  return __jsx(\"div\", {\n    className: \"profile-edit__header-container\"\n  }, __jsx(\"h2\", {\n    className: \"profile-edit__box-header\"\n  }, __jsx(Translate, {\n    id: \"order-tracking\"\n  })), __jsx(\"p\", {\n    className: \"profile-edit__box-subheader\"\n  }, __jsx(Translate, {\n    id: \"tracking-sub\"\n  })));\n};\n\nexport const TRACK = 1;\nexport const RESULT = 2;\n\nconst Tracking = () => {\n  const lang = useSelector(selectLang);\n  const {\n    0: code,\n    1: setCode\n  } = useState(\"\");\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: clickLoading,\n    1: setClickLoading\n  } = useState(false);\n  const {\n    0: reqResult,\n    1: setReqResult\n  } = useState({});\n\n  const reducer = (state, action) => {\n    return action.type;\n  };\n\n  const {\n    0: situ,\n    1: dispatch\n  } = useReducer(reducer, TRACK);\n\n  const handleClick = async e => {\n    e.preventDefault();\n    if (clickLoading) return;\n\n    for (let key in errors) {\n      if (errors[key]) {\n        toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n        return;\n      }\n    }\n\n    setClickLoading(true);\n\n    try {\n      const res = await client_fetchTrackingDetail(code);\n\n      if (res.status == 200) {\n        setReqResult(res.result);\n        setCode(\"\");\n        dispatch({\n          type: RESULT\n        });\n        setClickLoading(false);\n      }\n    } catch (err) {\n      toast.error(err.response.data.message, getToastConfig());\n      setClickLoading(false);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ToastContainer, _extends({\n    rtl: isRtl(lang)\n  }, getToastConfig())), __jsx(SwitchTransition, {\n    className: \"user-panel__container\"\n  }, __jsx(CSSTransition, {\n    key: situ,\n    classNames: \"user-panel__routes\",\n    timeout: 200\n  }, situ == RESULT ? __jsx(TrackingResult, {\n    result: reqResult,\n    dis: dispatch\n  }) : __jsx(\"div\", {\n    className: \"tracking container siteWidthContainer\"\n  }, __jsx(BoxStyle1, {\n    headerContent: renderBoxHeader()\n  }, __jsx(\"div\", {\n    className: \"tracking-content\"\n  }, __jsx(\"div\", {\n    className: \"verify-email\"\n  }, __jsx(TrackingSvg, {\n    alt: \"verify your email\",\n    className: \"tracking__img\"\n  }), __jsx(\"p\", {\n    className: \"verify-email__btm-text\"\n  }, __jsx(Translate, {\n    id: \"tracking-input-msg\"\n  })), __jsx(\"form\", {\n    className: \"verify-email__form\",\n    onSubmit: handleClick\n  }, __jsx(Translate, null, ({\n    translate: t\n  }) => {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"verify-email__input-cnt\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      className: \"gray__input\",\n      name: \"code\",\n      value: code,\n      required: true,\n      placeholder: t(\"tracking-placeholder\"),\n      onChange: e => {\n        setCode(e.target.value);\n        validateEmpty({\n          name: \"code\",\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      },\n      onBlur: e => {\n        validateEmpty({\n          name: \"code\",\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    })), __jsx(FormErrorMsg, {\n      show: errors[\"code\"],\n      msg: errors[\"code\"]\n    }));\n  }), __jsx(\"button\", {\n    className: \"primary-btn no-address__btn\"\n  }, clickLoading ? __jsx(Loading, {\n    type: \"white\",\n    width: \"20px\",\n    height: \"20px\"\n  }) : __jsx(Translate, {\n    id: \"tracking\"\n  }))))))))));\n};\n\nexport default Tracking;","map":null,"metadata":{},"sourceType":"module"}