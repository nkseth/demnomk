{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { ReactComponent as EditIcon } from \"./../../../../../../assets/icons/edit.svg\";\nimport { ReactComponent as BackIcon } from \"./../../../../../../assets/icons/back.svg\";\nimport { BoxStyle2, FormErrorMsg, Loading } from \"../../../../../common\";\nimport { COMPLETE, SELECT_ADDRESS, VERIFY_PHONE } from \"./ShippingAddressConstant\";\nimport { useState } from \"react\";\nimport { validateEmpty, validatePhoneNumber } from \"../../../../../../lib/formValidator\";\nimport { useSelector } from \"react-redux\";\nimport { selectLang } from \"../../../../../../appConfigSlice\";\nimport { getErrorMsg } from \"../../../../../../lib/helpers\";\nimport { getToastConfig } from \"../../../../../../lib/toast\";\nimport { toast } from \"react-toastify\";\nexport default (({\n  handleSituation,\n  setData,\n  currdata,\n  addAddress\n}) => {\n  const {\n    0: firstname,\n    1: setFirstname\n  } = useState(currdata.firstname);\n  const {\n    0: lastname,\n    1: setLanstname\n  } = useState(currdata.lastname);\n  const {\n    0: mobile,\n    1: setMobile\n  } = useState(currdata.mobileNumber);\n  const {\n    0: postalCode,\n    1: setPostalCode\n  } = useState(currdata.postalCode);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const lang = useSelector(selectLang);\n  const {\n    0: submitLoading,\n    1: setSubmitLoading\n  } = useState(false);\n\n  const handleBackClick = () => {\n    handleSituation(COMPLETE);\n  };\n\n  const updateAddressClick = () => {\n    handleSituation(SELECT_ADDRESS);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (submitLoading) return;\n\n    for (let key in errors) {\n      if (errors[key]) {\n        toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n        return;\n      }\n    }\n\n    setSubmitLoading(true);\n    setData({\n      firstname: firstname,\n      lastname: lastname,\n      postalCode: postalCode,\n      mobileNumber: mobile\n    }, () => {\n      addAddress(() => {\n        if (currdata.isUpdate) {\n          handleSituation(COMPLETE);\n        } else {\n          handleSituation(VERIFY_PHONE);\n        }\n\n        setSubmitLoading(false);\n      });\n    });\n  };\n\n  return __jsx(Translate, null, ({\n    translate: t\n  }) => {\n    return __jsx(React.Fragment, null, __jsx(BoxStyle2, {\n      className: \"orderaddress__change-phone p-5\"\n    }, __jsx(\"form\", {\n      onSubmit: handleSubmit\n    }, __jsx(\"section\", {\n      className: \"add-address-step1 no-gutters\"\n    }, __jsx(\"header\", {\n      className: \"mapAddress__header mapAddress__header--order\"\n    }, __jsx(\"a\", {\n      onClick: handleBackClick\n    }, __jsx(BackIcon, {\n      className: \"mapAddress__back-icon\"\n    }), __jsx(\"span\", {\n      className: \"mapAddress__header-text\"\n    }, __jsx(Translate, {\n      id: \"addresses.addresses\"\n    })))), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"div\", {\n      className: \"d-flex justify-content-between add-address-step1__mapinput gray__input clearfix\"\n    }, __jsx(\"div\", {\n      className: \"col\"\n    }, __jsx(\"span\", {\n      className: \"add-address-step1__mapinput-text\"\n    }, __jsx(Translate, {\n      id: \"addresses.setmap\"\n    })), __jsx(\"span\", {\n      className: \"add-address-step1__mapinput-value\"\n    }, currdata.address)), __jsx(\"a\", {\n      onClick: updateAddressClick,\n      className: \"add-address-step1__mapinput-btn\"\n    }, __jsx(EditIcon, null))))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.mobile-number\"), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"div\", {\n      className: \"add-address-step1__mobile-cnt\"\n    }, __jsx(\"span\", {\n      className: \"add-address-step1__mobile-code mr-0\"\n    }, \"+\"), __jsx(\"span\", {\n      className: \"add-address-step1__mobile-code\"\n    }, currdata.phoneCode), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"tel\",\n      required: true,\n      name: \"phone\",\n      maxLength: \"15\",\n      placeholder: t(\"addresses.mobile-number-placeholder\"),\n      value: mobile,\n      onChange: e => {\n        setMobile(e.target.value);\n\n        if (errors[e.target.name]) {\n          validatePhoneNumber({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang,\n            iso: currdata.iso\n          });\n        }\n      },\n      onBlur: e => {\n        validatePhoneNumber({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang,\n          iso: currdata.iso\n        });\n      }\n    })), __jsx(FormErrorMsg, {\n      show: errors[\"phone\"],\n      msg: errors[\"phone\"]\n    })))), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.firstname\"), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"text\",\n      name: \"firstname\",\n      placeholder: t(\"addresses.firstname-placeholder\"),\n      onChange: e => {\n        setFirstname(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      value: firstname,\n      required: true,\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"firstname\"],\n      msg: errors[\"firstname\"]\n    }))), __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.lastname\"), __jsx(\"span\", {\n      className: \"input-required\"\n    }, \"*\")), __jsx(\"input\", {\n      className: \"gray__input\",\n      type: \"text\",\n      name: \"lastname\",\n      placeholder: t(\"addresses.lastname-placeholder\"),\n      onChange: e => {\n        setLanstname(e.target.value);\n\n        if (errors[e.target.name]) {\n          validateEmpty({\n            name: e.target.name,\n            value: e.target.value,\n            handler: setErrors,\n            lang\n          });\n        }\n      },\n      required: true,\n      value: lastname,\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      }\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"lastname\"],\n      msg: errors[\"lastname\"]\n    })))), __jsx(\"div\", {\n      className: \"row no-gutters justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-md-6\"\n    }, __jsx(\"label\", {\n      className: \"gray__form-label add-address-step1__item\"\n    }, __jsx(\"span\", {\n      className: \"gray__input-label\"\n    }, t(\"addresses.postal-code\")), __jsx(\"input\", {\n      className: \"gray__input\",\n      name: \"postalCode\",\n      placeholder: t(\"addresses.postal-code-placeholder\"),\n      type: \"text\",\n      pattern: \"[0-9]*\",\n      value: postalCode,\n      onChange: e => {\n        setPostalCode(e.target.value);\n      }\n    }))))), __jsx(\"div\", {\n      className: \"add-address-step1__btn-cnt\"\n    }, __jsx(\"button\", {\n      className: \"primary-btn add-address-step1__btn\",\n      type: \"submit\"\n    }, submitLoading ? __jsx(Loading, {\n      type: \"white\",\n      width: \"20px\",\n      height: \"20px\"\n    }) : t(\"addresses.save\"))))));\n  });\n});","map":null,"metadata":{},"sourceType":"module"}