{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { wrapper } from \"../store\";\nimport \"./../node_modules/react-toastify/dist/ReactToastify.min.css\";\nimport \"../styles/react-dropdown/style.css\";\nimport \"../styles/skeleton.min.css\";\nimport \"../styles/react-input-range/index.css\";\nimport \"../styles.scss\";\nimport \"../assets/scss/base/_utilities.scss\"; // import './../styles/globals.css';\n\nimport \"./../styles/owl.carousel.min.css\";\nimport \"./../styles/quill.snow.css\";\nimport \"../styles/globals.js\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useRouter } from \"next/dist/client/router\";\nimport { detectLang, detectCurrency } from \"../lib/analyser\";\nimport { isRtl } from \"../lib/isRtl\";\nimport { isServer } from \"../lib/isServer\";\nimport axiosClient from \"./../lib/api/axios\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Cookies from \"js-cookie\";\nimport { SUCCE_LOGIN, updateLang, updateCurrency } from \"../appConfigSlice\";\nimport App from \"next/app\";\nimport cookieparser from \"cookieparser\";\nimport { checkValidCurr, checkValidLand } from \"../lib/langRoutes\";\nimport Router from \"next/router\";\nimport { PageLoading } from \"../components/common\";\nimport \"react-virtualized/styles.css\";\nimport { registerServiceWorker } from '../serviceWorker.js';\n\nif (!isServer()) {\n  const token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name);\n  const cartId = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name_cart);\n  if (cartId) axiosClient.setCartId(cartId);\n  if (token) axiosClient.setToken(token);\n}\n\nconst MyApp = ({\n  Component,\n  pageProps\n}) => {\n  const vari = useRouter().query[\"lang-curr\"];\n  let lang, curr;\n  const {\n    0: navigation,\n    1: setNavigation\n  } = useState(false);\n\n  if (vari) {\n    lang = detectLang(vari);\n    curr = detectCurrency(vari);\n    axiosClient.setLangAndCurrency(lang, curr);\n  }\n\n  if (isRtl(lang) && !isServer()) {\n    document.body.classList.add(\"rtl\");\n  }\n\n  const dis = useDispatch();\n  useEffect(() => {\n    //// disable mobile menu overflow result after each closed menu\n    document.body.style.overflowY = \"auto\";\n  });\n  useEffect(() => {\n    registerServiceWorker();\n    const token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name);\n\n    if (token) {\n      dis({\n        type: SUCCE_LOGIN,\n        payload: {\n          token: token\n        }\n      });\n    } //// loading\n\n\n    Router.events.on(\"routeChangeStart\", url => {\n      setNavigation(true);\n    });\n    Router.events.on(\"routeChangeComplete\", () => setNavigation(false));\n    Router.events.on(\"routeChangeError\", () => setNavigation(false));\n  }, []);\n  return __jsx(\"div\", {\n    className: isRtl(lang) ? \"rtl\" : \"\"\n  }, __jsx(Component, pageProps), navigation && __jsx(PageLoading, null));\n};\n\nMyApp.getInitialProps = async appContext => {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  const {\n    ctx,\n    router\n  } = appContext;\n  const {\n    req,\n    res,\n    store\n  } = ctx;\n  const lang = detectLang(router.query[\"lang-curr\"]);\n  const curr = detectCurrency(router.query[\"lang-curr\"]);\n\n  if (req && res && isServer()) {\n    if (!checkValidLand(lang) || !checkValidCurr(curr)) {\n      res.writeHead(302, {\n        Location: \"/bhd-en\"\n      });\n      res.end();\n      return {};\n    }\n  }\n\n  if (req && lang && curr) {\n    axiosClient.setToken(null);\n    axiosClient.setCartId(null);\n    store.dispatch(updateLang(lang));\n    store.dispatch(updateCurrency(curr));\n    axiosClient.setLangAndCurrency(lang, curr);\n    const cookies = req.headers.cookie;\n\n    if (cookies) {\n      const cookiesParsed = cookieparser.parse(cookies);\n      const token = cookiesParsed[process.env.NEXT_PUBLIC_Token_Cookie_name];\n      const cartId = cookiesParsed[process.env.NEXT_PUBLIC_Token_Cookie_name_cart];\n\n      if (token) {\n        axiosClient.setToken(token);\n      }\n\n      if (cartId) {\n        axiosClient.setCartId(cartId);\n      }\n    }\n  }\n\n  const appProps = await App.getInitialProps(appContext);\n  return {\n    pageProps: _objectSpread(_objectSpread({}, appProps.pageProps), {}, {\n      lang,\n      curr\n    })\n  };\n};\n\nexport default wrapper.withRedux(MyApp);","map":null,"metadata":{},"sourceType":"module"}