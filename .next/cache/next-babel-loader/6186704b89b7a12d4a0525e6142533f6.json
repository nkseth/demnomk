{"ast":null,"code":"var _class, _temp;\n\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport circleIcon from \"./../../../assets/icons/img-radio-button-off.svg\";\nimport circleFillIcon from \"./../../../assets/icons/img-radio-button-on.svg\"; // import \"./SelectBox2.scss\";\n\nimport classnames from \"classnames\";\nconst SelectBoxContext = /*#__PURE__*/React.createContext();\nexport default class SelectBox3 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", (selectedItem, isSelected) => {\n      let newitems;\n\n      if (this.props.multiSelect) {\n        if (!isSelected) {\n          newitems = this.state.selectedItems.filter(item => {\n            return item.name !== selectedItem.name;\n          });\n        } else {\n          newitems = [...this.state.selectedItems, selectedItem];\n        }\n      } else {\n        if (!isSelected) {\n          newitems = [];\n        } else {\n          newitems = [selectedItem];\n        }\n      }\n\n      this.setState({\n        selectedItems: newitems\n      });\n      this.props.onChange && this.props.onChange(newitems);\n    });\n\n    this.multiSelect = this.props.multiSelect;\n    this.state = {\n      handleChange: this.handleChange,\n      selectedItems: this.props.selectedItems ? this.props.selectedItems : []\n    };\n  }\n\n  render() {\n    return __jsx(SelectBoxContext.Provider, {\n      value: this.state\n    }, __jsx(\"div\", {\n      className: `SelectBox2 ${this.props.className ? this.props.className : \"\"}`\n    }, this.props.children));\n  }\n\n}\nSelectBox3.SelectItem = (_temp = _class = class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"checkSelected\", () => {\n      for (let item of this.context.selectedItems) {\n        if (item.name === this.props.name) {\n          this.selected = true;\n          return;\n        }\n      }\n\n      this.selected = false;\n    });\n\n    _defineProperty(this, \"handleClick\", () => {\n      this.selected = !this.selected;\n      this.context.handleChange({\n        value: this.props.value,\n        name: this.props.name\n      }, this.selected);\n    });\n\n    this.selected = false;\n    this.state = {\n      selected: false\n    }; // this.justCircleClick = this.props.justCircleClick;\n  }\n\n  render() {\n    this.checkSelected();\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: classnames(\"SelectBox2__item\", {\n        \"SelectBox2__item--circleClick\": this.props.justCircleClick\n      }),\n      onClick: () => {\n        if (!this.props.justCircleClick) {\n          this.handleClick();\n        }\n      }\n    }, __jsx(\"img\", {\n      className: \"SelectBox2__img\",\n      alt: \"select item\",\n      src: this.selected ? circleFillIcon : circleIcon,\n      onClick: () => {\n        if (this.props.justCircleClick) {\n          this.handleClick();\n        }\n      }\n    }), __jsx(\"div\", {\n      className: \"SelectBox2__content\"\n    }, this.props.children)));\n  }\n\n}, _defineProperty(_class, \"contextType\", SelectBoxContext), _temp);","map":null,"metadata":{},"sourceType":"module"}