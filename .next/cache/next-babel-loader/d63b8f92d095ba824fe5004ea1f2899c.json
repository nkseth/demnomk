{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\"; // import \"./DeliveryPanel.scss\";\n// import \"./DeliveryPanel-rtl.scss\";\n\nimport { Translate } from \"react-localize-redux\";\nimport DropDown from \"react-dropdown\";\nimport { ReactComponent as SearchIcon } from \"./../../../../../../assets/icons/search-gray.svg\";\nimport { Loading, SelectBox3 as SelectBox } from \"../../../../../common\";\nimport { Scrollbars } from \"react-custom-scrollbars\"; // import { GoodDetailContext } from \"../../GoodDetailContext\";\n\nimport { fetchCities, fetchCountry, fetchProvinces } from \"../../cartAndWishlistSlice\";\nimport { withRouter } from \"next/router\";\n\nclass DeliveryPanel extends React.Component {\n  // static contextType = GoodDetailContext;\n  constructor(props) {\n    super(props); // this.options = [\"bahrain\", \"ardabil\", \"mesr\", \"goonbad\"];\n\n    _defineProperty(this, \"handleCountryChange\", async ({\n      value\n    }) => {\n      this.setState({\n        cityLoading: true\n      });\n      this.providerProvinceIndex = 0;\n      const result = await fetchProvinces(value);\n      const provinceList = result === null || result === void 0 ? void 0 : result.map((province, index) => {\n        if (province.provinceId === this.props.provinceId) this.providerProvinceIndex = index;\n        return {\n          value: province.provinceId,\n          label: province.provinceName\n        };\n      });\n      let cities = [];\n\n      if (provinceList.length > 0) {\n        cities = await fetchCities(provinceList[this.providerProvinceIndex].value);\n      }\n\n      const SelectedProvinceId = provinceList.length > 0 ? provinceList[this.providerProvinceIndex].value : null;\n      this.setState({\n        cityLoading: false,\n        provinceList: provinceList || [],\n        cityList: cities || [],\n        SelectedCountryId: value,\n        SelectedProvinceId: SelectedProvinceId\n      });\n    });\n\n    _defineProperty(this, \"handleProvinceChange\", async ({\n      value\n    }) => {\n      this.setState({\n        cityLoading: true\n      });\n      const result = await fetchCities(value);\n      this.setState({\n        cityLoading: false,\n        cityList: result || [],\n        SelectedProvinceId: value\n      });\n    });\n\n    _defineProperty(this, \"handleCityClick\", async ({\n      value,\n      name\n    }) => {\n      this.props.closePanel();\n      this.props.handleCityChange(this.state.SelectedCountryId, this.state.SelectedProvinceId, name, value);\n    });\n\n    this.state = {\n      search: \"\",\n      countryLoading: false,\n      cityLoading: false,\n      cityList: [],\n      countryList: [],\n      provinceList: [],\n      SelectedCountryId: this.props.countryId,\n      SelectedProvinceId: this.props.provinceId,\n      SelectedCityId: null\n    };\n    this.providerCountryIndex = 0;\n    this.providerProvinceIndex = 0;\n  }\n\n  async componentDidMount() {\n    var _result$, _result$2;\n\n    this.setState(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        countryLoading: true,\n        cityLoading: true\n      });\n    });\n    const result = await Promise.all([fetchCountry(), fetchProvinces(this.props.countryId), fetchCities(this.props.provinceId)]);\n    const countryList = (_result$ = result[0]) === null || _result$ === void 0 ? void 0 : _result$.map((country, index) => {\n      if (country.countryId === this.props.countryId) this.providerCountryIndex = index;\n      return {\n        value: country.countryId,\n        label: __jsx(\"div\", null, __jsx(\"img\", {\n          src: `/assets/flags/${country.flagUrl}`,\n          height: \"15px\",\n          width: \"15px\"\n        }), \" \", country.iso)\n      };\n    });\n    const provinceList = (_result$2 = result[1]) === null || _result$2 === void 0 ? void 0 : _result$2.map((province, index) => {\n      if (province.provinceId === this.props.provinceId) this.providerProvinceIndex = index;\n      return {\n        value: province.provinceId,\n        label: province.provinceName\n      };\n    });\n    this.setState({\n      countryLoading: false,\n      cityLoading: false,\n      cityList: result[2] || [],\n      countryList: countryList,\n      provinceList: provinceList\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"deliveryPanel\"\n    }, __jsx(\"div\", {\n      className: \"deliveryPanel__cnt\"\n    }, __jsx(\"aside\", {\n      className: \"deliveryPanel__panel\",\n      ref: this.props.panelRef\n    }, __jsx(\"header\", {\n      className: \"deliveryPanel__header\"\n    }, __jsx(\"h2\", {\n      className: \"deliveryPanel__header-text\"\n    }, __jsx(Translate, {\n      id: \"panel.del-lo\"\n    })), this.state.countryLoading ? __jsx(Loading, {\n      type: \"gray\",\n      width: \"30px\"\n    }) : __jsx(\"div\", {\n      className: \"deliveryPanel__location\"\n    }, __jsx(\"div\", {\n      className: \"deliveryPanel__location-country\"\n    }, __jsx(DropDown, {\n      disabled: this.state.cityLoading,\n      onChange: this.handleCountryChange,\n      classname: \"gray__dropdown\",\n      options: this.state.countryList,\n      value: this.state.countryList[this.providerCountryIndex]\n    })), __jsx(\"div\", {\n      className: \"deliveryPanel__location-province\"\n    }, __jsx(DropDown, {\n      disabled: this.state.cityLoading,\n      onChange: this.handleProvinceChange,\n      classname: \"gray__dropdown\",\n      options: this.state.provinceList,\n      value: this.state.provinceList[this.providerProvinceIndex]\n    }))), __jsx(\"div\", {\n      className: \"deliveryPanel__search-input-cnt\"\n    }, __jsx(SearchIcon, {\n      className: \"deliveryPanel__search-icon\"\n    }), __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      return __jsx(\"input\", {\n        type: \"text\",\n        className: \"gray__input deliveryPanel__search-input\",\n        placeholder: t(\"panel.src-city\"),\n        value: this.state.search,\n        onChange: e => {\n          this.setState({\n            search: e.target.value\n          });\n        }\n      });\n    }))), __jsx(\"div\", {\n      className: \"deliveryPanel__content-cnt\"\n    }, this.state.cityLoading ? __jsx(Loading, {\n      type: \"gray\",\n      width: \"50px\"\n    }) : __jsx(Scrollbars, {\n      renderView: props => __jsx(\"div\", _extends({}, props, {\n        className: \"deliveryPanel__scrol-view\"\n      })),\n      renderTrackVertical: props => __jsx(\"div\", _extends({}, props, {\n        className: \"deliveryPanel__track-vertical\"\n      })),\n      autoHide: true // Hide delay in ms autoHideTimeout={1000}\n      // Duration for hide animation in ms. autoHideDuration={200}\n      ,\n      style: {\n        height: \"100%\"\n      }\n    }, __jsx(SelectBox, {\n      onChange: items => {\n        this.handleCityClick(items[0]);\n      }\n    }, this.state.cityList.map(city => {\n      if (!this.state.search) return __jsx(SelectBox.SelectItem, {\n        key: city.cityId,\n        name: city.cityId,\n        value: city.cityTitle\n      }, city.cityTitle);else if (city.cityTitle.includes(this.state.search)) {\n        return __jsx(SelectBox.SelectItem, {\n          key: city.cityId,\n          name: city.cityId,\n          value: city.cityTitle\n        }, city.cityTitle);\n      }\n    }))))), __jsx(\"div\", {\n      className: \"deliveryPanel__cover\",\n      onClick: this.props.closePanel\n    })));\n  }\n\n}\n\nexport default withRouter(DeliveryPanel);","map":null,"metadata":{},"sourceType":"module"}