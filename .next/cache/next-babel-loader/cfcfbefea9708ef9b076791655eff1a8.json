{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { LocalizeProvider, Translate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { wrapper } from \"../../../store\";\nimport { translationsPayload, mergeTranslations } from \"../../../translations/payload\";\nimport searchTranslations from \"../../../translations/search-translations.json\";\nimport HeaderTranslations from \"../../../translations/header-translations.json\";\nimport Footer from \"../../../components/app/footer\";\nimport { Header } from \"../../../components/app/header\";\nimport { Search } from \"../../../components/app/pages/Search\";\nimport { server_fetchHeader, server_fetchFooter, server_categoryBrands } from \"../../../lib/api/client/serverCommon\";\nimport { server_fetchSearch } from \"../../../lib/api/client/serverSearch\";\nimport { serverSearchUpdate } from \"../../../components/app/pages/Search/searchSlice\";\nimport { searchQueryToFilters } from \"../../../lib/QueryToFilters\";\nimport Head from \"next/head\";\nimport { WithUserAgentProps, withUserAgent, useUserAgent } from \"next-useragent\";\n\nclass SearchPage extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const search = __jsx(Search, null);\n\n    return __jsx(LocalizeProvider, {\n      initialize: translationsPayload(mergeTranslations(searchTranslations, HeaderTranslations), this.props.lang)\n    }, __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      return __jsx(Head, null, __jsx(\"title\", null, t(\"@searchTitle\")));\n    }), __jsx(Header, {\n      data: this.props.data.header,\n      lang: this.props.lang,\n      curr: this.props.curr,\n      isDesktop: this.props.ua.isDesktop\n    }), search, __jsx(Footer, {\n      lang: this.props.lang,\n      isDesktop: this.props.ua.isDesktop,\n      data: this.props.data.footer,\n      cartCount: this.props.data.header.cartCount\n    }));\n  }\n\n}\n\nexport default connect()(SearchPage);\nexport const getServerSideProps = wrapper.getServerSideProps(async ({\n  req,\n  store,\n  query\n}) => {\n  const generatedFilters = searchQueryToFilters(query);\n  const ua = useUserAgent(req.headers[\"user-agent\"]);\n  const Result = await Promise.all([server_fetchHeader(ua.isDesktop), server_fetchFooter(), server_fetchSearch(generatedFilters), server_categoryBrands({\n    pageSize: generatedFilters.brandId.length,\n    pageNumber: 0,\n    BrandIds: generatedFilters.brandId,\n    catId: generatedFilters.id,\n    search: \"\"\n  })]);\n  store.dispatch(serverSearchUpdate({\n    search: Result[2].result,\n    // search: data.result,\n    filters: generatedFilters,\n    brands: Result[3].result || []\n  }));\n  return {\n    props: {\n      ua,\n      data: {\n        header: Result[0].result,\n        footer: Result[1].result\n      }\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}