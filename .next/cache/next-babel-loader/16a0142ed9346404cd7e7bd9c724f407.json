{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { switchLang } from \"../../../../../lib/switch\";\nimport { Button, FormErrorMsg, Loading } from \"../../../../common\";\nimport { useState } from \"react\";\nimport { validateEmail, validatePassword, validateConfirmPassword, validateEmpty, validatePhoneNumber } from \"../../../../../lib/formValidator\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectLang, selectLogin, LOGIN_CUSTOMER_LOADING, LOADING, SUCCE_LOGIN, selectCurr, ERROR_LOGIN, selectPrevLink, PREVLINK_CHANGE } from \"../../../../../appConfigSlice\";\nimport { client_registerCustomer, client_verifyCustomerMobileNumber } from \"../../../../../lib/api/client/clientCustomer\";\nimport { toast } from \"react-toastify\";\nimport { getToastConfig } from \"../../../../../lib/toast\";\nimport { getErrorMsg, removeCartCookie, setTokenCookie } from \"../../../../../lib/helpers\";\nimport { useRouter } from \"next/router\";\nimport axiosClient from \"../../../../../lib/api/axios\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport Select from \"react-select\";\nimport { client_getActiveCountries } from \"../../../../../lib/api/client/clientShop\";\nimport { useEffect } from \"react\";\nimport VerifyPhone from \"../../../verifyPhone/VerifyPhone\";\nimport Logo from \"./../../../../../assets/images/logo-2.png\";\nexport default (props => {\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  let {\n    0: mobileNumber,\n    1: setMobileNumber\n  } = useState(\"\");\n  let {\n    0: phoneCode,\n    1: setPhoneCode\n  } = useState(\"\");\n  const {\n    0: countryId,\n    1: setCountryId\n  } = useState(null);\n  const {\n    0: countryItems,\n    1: setCountryItems\n  } = useState([]);\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\");\n  let {\n    0: iso,\n    1: setIso\n  } = useState(\"\");\n  const {\n    0: cpassword,\n    1: setCpassword\n  } = useState(\"\");\n  const {\n    0: name,\n    1: setName\n  } = useState(\"\");\n  const {\n    0: family,\n    1: setFamily\n  } = useState(\"\");\n  const {\n    0: captchaRef,\n    1: setcaptchaRef\n  } = useState({});\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({});\n  const {\n    0: captchaErrors,\n    1: setcaptchaErrors\n  } = useState(false);\n  const {\n    0: LoginStatus,\n    1: setLoginStatus\n  } = useState(false);\n  const {\n    0: captchaToken,\n    1: setcaptchaToken\n  } = useState(\"\");\n  const {\n    0: currentSituation,\n    1: setCurrentSituation\n  } = useState(1);\n  const {\n    0: loaderFinalSubmitButton,\n    1: setLoaderFinalSubmitButton\n  } = useState(false);\n  let {\n    0: requestId,\n    1: setrequestId\n  } = useState(\"\");\n  const lang = useSelector(selectLang);\n  const curr = useSelector(selectCurr);\n  const prevLink = useSelector(selectPrevLink);\n  const dis = useDispatch();\n  const router = useRouter();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (LoginStatus) return;\n\n    if (captchaToken === \"\") {\n      setcaptchaErrors(true);\n      return;\n    } else {\n      setcaptchaErrors(false);\n    }\n\n    for (let key in errors) {\n      if (errors[key]) {\n        toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n        return;\n      }\n    }\n\n    dis(async (dispatch, getState) => {\n      dispatch({\n        type: LOGIN_CUSTOMER_LOADING\n      });\n\n      try {\n        setLoginStatus(true);\n        const result = await client_verifyCustomerMobileNumber({\n          captchaToken,\n          mobileNumber: \"+\" + phoneCode + mobileNumber,\n          email\n        });\n\n        if (result.status === 200) {\n          setrequestId(result.result.requestId);\n          setCurrentSituation(2);\n        }\n      } catch (err) {\n        var _err$response;\n\n        if (captchaRef !== null) {\n          captchaRef.reset();\n        }\n\n        toast.error((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data.message, getToastConfig());\n        setPassword(\"\");\n        setCpassword(\"\");\n        setLoginStatus(false);\n      }\n    });\n  };\n\n  useEffect(() => {\n    getCountris();\n    return () => {};\n  }, []);\n\n  const getCountris = async () => {\n    const result = await client_getActiveCountries();\n    let countries = [];\n    result.result.forEach(item => {\n      countries.push({\n        value: item.countryId,\n        label: __jsx(\"div\", null, __jsx(\"img\", {\n          src: `/assets/flags/${item.flagUrl}`,\n          height: \"15px\",\n          width: \"15px\"\n        }), \" \", \"+ \", item.phoneCode),\n        iso: item.iso,\n        phoneCode: item.phoneCode\n      });\n    });\n    setCountryItems(countries);\n  };\n\n  const submitRegister = (smsCode, requestSmsId) => {\n    dis(async (dispatch, getState) => {\n      dispatch({\n        type: LOGIN_CUSTOMER_LOADING\n      });\n\n      try {\n        setLoaderFinalSubmitButton(true);\n        const result = await client_registerCustomer({\n          email,\n          pass: password,\n          name,\n          family,\n          captchaToken,\n          mobileNumber,\n          countryId,\n          phoneCode,\n          smsCode,\n          requestId: requestSmsId\n        });\n\n        if (result.status === 200) {\n          dispatch({\n            type: SUCCE_LOGIN,\n            payload: {\n              token: result.result.token\n            }\n          });\n          setTokenCookie(result.result.token);\n          axiosClient.setToken(result.result.token);\n          toast.success(getErrorMsg(lang, \"succ-regitered\"), getToastConfig());\n\n          if (prevLink) {\n            dispatch({\n              type: PREVLINK_CHANGE,\n              payload: {\n                link: null\n              }\n            });\n            router.push(prevLink);\n          } else {\n            router.push(`/${curr}-${lang}`);\n          }\n\n          removeCartCookie();\n        }\n      } catch (err) {\n        var _err$response2, _err$response3;\n\n        setLoaderFinalSubmitButton(false);\n        toast.error((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data.message, getToastConfig());\n        dispatch({\n          type: ERROR_LOGIN,\n          payload: {\n            error: (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data.message\n          }\n        });\n      }\n    });\n  };\n\n  const handleBackclick = () => {\n    setCurrentSituation(1);\n    setPassword(\"\");\n    setCpassword(\"\");\n    setMobileNumber(\"\");\n    setLoginStatus(false);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      height: \"100%\"\n    }\n  }, currentSituation === 1 ? __jsx(\"div\", {\n    className: \"form sign-up\"\n  }, __jsx(Translate, null, ({\n    translate\n  }) => {\n    return __jsx(React.Fragment, null, !props.isDesktop && __jsx(\"a\", {\n      href: \"/\",\n      className: \"auth-mobile-logo\"\n    }, __jsx(\"img\", {\n      src: Logo\n    })), __jsx(\"a\", {\n      onClick: e => {\n        e.preventDefault();\n        switchLang(props.loc, true);\n      },\n      className: \"auth__lang-slt\",\n      href: \"#\"\n    }, __jsx(Translate, {\n      id: \"lang\"\n    })), props.isDesktop ? __jsx(React.Fragment, null, __jsx(\"h4\", {\n      className: \"auth__header auth__header--signup\"\n    }, __jsx(Translate, {\n      id: \"hi\"\n    })), __jsx(\"h4\", {\n      className: \"auth__header-sub\"\n    }, __jsx(Translate, {\n      id: \"acc-create\"\n    }))) : __jsx(\"h4\", {\n      className: \"auth__header-sub-mobile\"\n    }, __jsx(Translate, {\n      id: \"acc-create\"\n    })), __jsx(\"form\", {\n      action: \"\",\n      onSubmit: handleSubmit\n    }, __jsx(\"div\", {\n      className: \"auth__form auth__form--login\"\n    }, __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"mobileNumber\"\n    })), __jsx(\"div\", {\n      className: \"auth__mobile-number\"\n    }, __jsx(Select, {\n      className: \"react-select\",\n      options: countryItems,\n      placeholder: \"code\",\n      onChange: event => {\n        setIso(event.iso);\n        setCountryId(event.value);\n        setPhoneCode(event.phoneCode);\n      },\n      onBlur: e => {\n        validatePhoneNumber({\n          name: \"mobileNumber\",\n          value: mobileNumber,\n          handler: setErrors,\n          lang,\n          iso: iso\n        });\n      }\n    }), __jsx(\"input\", {\n      className: \"auth__input auth__input-mobile\",\n      type: \"text\",\n      onChange: event => {\n        setMobileNumber(event.target.value);\n      },\n      value: mobileNumber,\n      name: \"mobileNumber\",\n      onBlur: e => {\n        validatePhoneNumber({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang,\n          iso: iso\n        });\n      },\n      required: true,\n      placeholder: translate(\"mobile-placeholder\")\n    })), __jsx(FormErrorMsg, {\n      show: errors[\"mobileNumber\"],\n      msg: errors[\"mobileNumber\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"email\"\n    })), __jsx(\"input\", {\n      className: \"auth__input\",\n      type: \"email\",\n      onChange: event => {\n        setEmail(event.target.value);\n      },\n      value: email,\n      name: \"email\",\n      required: true,\n      onBlur: e => {\n        validateEmail({\n          name: \"email\",\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      },\n      placeholder: translate(\"email-placeholder\"),\n      pattern: \"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\"\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"email\"],\n      msg: errors[\"email\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"Password\"\n    })), __jsx(\"input\", {\n      className: \"auth__input\",\n      type: \"password\",\n      placeholder: translate(\"pass-placeholder\"),\n      onBlur: e => {\n        validatePassword({\n          name: \"password\",\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      },\n      onChange: event => {\n        setPassword(event.target.value);\n      },\n      value: password,\n      name: \"password\",\n      required: true\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"password\"],\n      msg: errors[\"password\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"pas-confirm\"\n    })), __jsx(\"input\", {\n      required: true,\n      className: \"auth__input\",\n      type: \"password\",\n      onBlur: e => {\n        validateConfirmPassword({\n          name: e.target.name,\n          value1: password,\n          value2: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      },\n      onChange: event => {\n        setCpassword(event.target.value);\n        validateConfirmPassword({\n          name: event.target.name,\n          value1: password,\n          value2: event.target.value,\n          handler: setErrors,\n          lang\n        });\n      },\n      value: cpassword,\n      name: \"cpassword\",\n      placeholder: translate(\"cpass-placeholder\")\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"cpassword\"],\n      msg: errors[\"cpassword\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"name\"\n    })), __jsx(\"input\", {\n      required: true,\n      className: \"auth__input\",\n      type: \"text\",\n      placeholder: translate(\"name-placeholder\"),\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      },\n      onChange: event => {\n        setName(event.target.value);\n      },\n      value: name,\n      name: \"name\"\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"name\"],\n      msg: errors[\"name\"]\n    })), __jsx(\"label\", {\n      className: \"auth__form-label auth__form-label--signup\"\n    }, __jsx(\"span\", {\n      className: \"auth__input-label\"\n    }, __jsx(Translate, {\n      id: \"family\"\n    })), __jsx(\"input\", {\n      required: true,\n      className: \"auth__input\",\n      type: \"text\",\n      placeholder: translate(\"family-placeholder\"),\n      onBlur: e => {\n        validateEmpty({\n          name: e.target.name,\n          value: e.target.value,\n          handler: setErrors,\n          lang\n        });\n      },\n      onChange: event => {\n        setFamily(event.target.value);\n      },\n      value: family,\n      name: \"family\"\n    }), __jsx(FormErrorMsg, {\n      show: errors[\"family\"],\n      msg: errors[\"family\"]\n    }))), __jsx(\"div\", {\n      className: \"auth__captcha-cnt\"\n    }, __jsx(ReCAPTCHA // size=\"compact\"\n    , {\n      sitekey: \"6Lfh-usZAAAAAP3ZYWqEZ4hmjWOi_GA606Ho19aW\",\n      onChange: token => {\n        setcaptchaToken(token);\n      },\n      ref: e => setcaptchaRef(e)\n    }), captchaErrors ? __jsx(FormErrorMsg, {\n      show: true,\n      msg: \"please set captcha\"\n    }) : null), __jsx(\"div\", {\n      className: \"auth__btn\",\n      style: {\n        marginTop: \"30px\"\n      }\n    }, __jsx(Button, {\n      radius: \"true\",\n      value: LoginStatus ? __jsx(Loading, {\n        type: \"white\",\n        width: \"20px\",\n        height: \"20px\"\n      }) : __jsx(Translate, {\n        id: \"acc-create2\"\n      })\n    }))), __jsx(\"div\", {\n      className: \"auth__footer-mobile\"\n    }, __jsx(\"h4\", {\n      className: \"auth__header-sub mt-5\"\n    }, __jsx(Translate, {\n      id: \"acc-have\"\n    })), __jsx(\"a\", {\n      onClick: props.clickSignUp,\n      className: \"auth__forget mt-3\"\n    }, __jsx(Translate, {\n      id: \"signIn3\"\n    }))));\n  })) : __jsx(\"div\", {\n    className: \"form \"\n  }, __jsx(VerifyPhone, {\n    Backclick: handleBackclick,\n    loaderSubmitButton: loaderFinalSubmitButton,\n    currdata: {\n      phoneCode: phoneCode,\n      mobileNumber: mobileNumber,\n      iso: iso,\n      requestId: requestId\n    },\n    submitRegister: submitRegister\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}