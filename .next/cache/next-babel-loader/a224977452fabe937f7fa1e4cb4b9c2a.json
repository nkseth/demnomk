{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { CreateShopContext } from \"../CreateShopContext\";\nimport { Translate } from \"react-localize-redux\";\nimport { toast } from \"react-toastify\";\nimport { Button, FormErrorMsg, Loading } from \"../../../../common\";\nimport { getErrorMsg } from \"../../../../../lib/helpers\";\nimport { getToastConfig } from \"../../../../../lib/toast\";\nimport { validateEmail, validatePasswordCreateShop, validateConfirmPassword, validatePhoneNumber } from \"../../../../../lib/formValidator\";\nimport { COMPLETE_AND_NEXT } from \"../CreateShopConstant\";\nimport { client_getActiveCountries, client_checkShopEmail, client_VerifyProviderMobileNumber } from \"./../../../../../lib/api/client/clientShop\";\nimport VerifyPhone from \"../../../verifyPhone/VerifyPhone\";\nimport Select from \"react-select\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setErrors\", func => {\n      const error = func(this.state.errors);\n      this.setState({\n        errors: error\n      });\n    });\n\n    _defineProperty(this, \"handleEmailChange\", event => {\n      this.setState({\n        email: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handlePassChange\", event => {\n      this.setState({\n        pass: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleConfirmPassChange\", event => {\n      this.setState({\n        cPass: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleClick\", () => {});\n\n    _defineProperty(this, \"handleChangeToken\", token => {\n      this.setState({\n        captchaToken: token\n      });\n    });\n\n    _defineProperty(this, \"handleChangeRef\", e => {\n      this.setState({\n        captchaRef: e\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", async e => {\n      e.preventDefault();\n      this.setState({\n        showLoader: true\n      });\n\n      for (let key in this.state.errors) {\n        if (this.state.errors[key]) {\n          toast.error(getErrorMsg(this.state.lang, \"error-detected\"), getToastConfig());\n          this.setState({\n            showLoader: false\n          });\n          return;\n        }\n      }\n\n      if (this.state.captchaToken === \"\") {\n        this.setState({\n          captchaErrors: true\n        });\n        return;\n      } else {\n        this.setState({\n          captchaErrors: false\n        });\n      }\n\n      let checkMobileNumber = false;\n\n      if (this.state.oldMobileNumber !== this.state.mobileNumber) {\n        checkMobileNumber = true;\n      }\n\n      const data = await client_checkShopEmail(\"+\" + this.state.phoneCode + this.state.mobileNumber, this.state.email, checkMobileNumber, this.state.captchaToken);\n\n      if (data.status !== 200) {\n        toast.error(data.message, getToastConfig());\n        this.setState({\n          showLoader: false\n        });\n        return;\n      } else if (data.result == null) {\n        toast.error(data.message, getToastConfig());\n        this.setState({\n          showLoader: false\n        });\n        this.state.captchaRef.reset();\n        return;\n      } else {\n        if (checkMobileNumber) {\n          this.setState({\n            showLoader: false,\n            currentSituation: 2,\n            requestId: data.result.requestId\n          });\n        } else {\n          this.nextSection();\n        }\n      }\n    });\n\n    _defineProperty(this, \"handlerVerifySms\", async (smsCode, requestSmsId) => {\n      try {\n        this.setState({\n          loaderFinalSubmitButton: true\n        });\n        const data = await client_VerifyProviderMobileNumber(\"+\" + this.state.phoneCode + this.state.mobileNumber, smsCode, requestSmsId);\n\n        if (data.status === 200) {\n          this.nextSection();\n        } else {}\n      } catch (err) {\n        var _err$response;\n\n        this.setState({\n          showLoader: false,\n          loaderFinalSubmitButton: false\n        });\n        toast.error((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data.message, getToastConfig());\n      }\n    });\n\n    _defineProperty(this, \"handleBackclick\", () => {\n      this.setState({\n        currentSituation: 1,\n        pass: \"\",\n        cPass: \"\",\n        showLoader: false\n      });\n    });\n\n    _defineProperty(this, \"nextSection\", () => {\n      this.context.handleLogin(this.state.email, this.state.pass, this.state.mobileNumber, this.state.countryId, this.state.iso, this.state.phoneCode, this.state.countryName);\n      this.context.handleStep(COMPLETE_AND_NEXT);\n      this.setState({\n        showLoader: false,\n        loaderFinalSubmitButton: false\n      });\n    });\n\n    this.state = {\n      countryItems: [],\n      email: \"\",\n      pass: \"\",\n      cPass: \"\",\n      mobileNumber: \"\",\n      oldMobileNumber: \"\",\n      countryId: 0,\n      selectedCountry: null,\n      countryName: \"\",\n      iso: \"\",\n      phoneCode: \"\",\n      requestId: \"\",\n      errors: {},\n      showLoader: false,\n      loaderFinalSubmitButton: false,\n      currentSituation: 1,\n      captchaErrors: false,\n      captchaToken: \"\",\n      captchaRef: {}\n    };\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePassChange = this.handlePassChange.bind(this);\n    this.handleConfirmPassChange = this.handleConfirmPassChange.bind(this);\n  }\n\n  async componentDidMount() {\n    const result = await client_getActiveCountries();\n    let countries = [];\n    result.result.forEach(item => {\n      countries.push({\n        value: item.countryId,\n        label: __jsx(\"div\", null, __jsx(\"img\", {\n          src: `/assets/flags/${item.flagUrl}`,\n          height: \"15px\",\n          width: \"15px\"\n        }), \" \", \"+ \", item.phoneCode),\n        iso: item.iso,\n        phoneCode: item.phoneCode,\n        countryName: item.countryTitle\n      });\n    });\n    this.setState({\n      email: this.context.formData.email,\n      mobileNumber: \"\",\n      oldMobileNumber: this.context.formData.phone,\n      pass: this.context.formData.password,\n      cPass: this.context.formData.password,\n      phoneCode: this.context.formData.phoneCode,\n      iso: this.context.formData.iso,\n      countryId: this.context.formData.fkCountryId,\n      countryName: this.context.formData.countryName,\n      countryItems: countries\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      }\n    }, this.state.currentSituation === 1 ? __jsx(\"div\", {\n      className: \"createshop__transition-cnt\"\n    }, __jsx(\"div\", {\n      className: \"mt-5\"\n    }, __jsx(\"h3\", {\n      className: \"createshop__header-text\"\n    }, __jsx(Translate, {\n      id: \"login.signIn-msg1\"\n    })), __jsx(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"auth__form auth__form--login createshop__login createshop__form--login\"\n    }, __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      return __jsx(React.Fragment, null, __jsx(\"label\", {\n        className: \"auth__form-label\"\n      }, __jsx(\"span\", {\n        className: \"auth__input-label\"\n      }, __jsx(Translate, {\n        id: \"login.mobileNumber\"\n      })), __jsx(\"div\", {\n        className: \"auth__mobile-number\"\n      }, __jsx(Select, {\n        className: \"react-select\",\n        options: this.state.countryItems,\n        value: this.state.selectedCountry,\n        placeholder: \"code\",\n        onChange: event => {\n          this.setState({\n            selectedCountry: event,\n            iso: event.iso,\n            countryId: event.value,\n            phoneCode: event.phoneCode,\n            countryName: event.countryName\n          });\n        },\n        onBlur: e => {\n          validatePhoneNumber({\n            name: \"mobileNumber\",\n            value: this.state.mobileNumber,\n            handler: this.setErrors,\n            lang: this.context.lang,\n            iso: this.state.iso\n          });\n        }\n      }), __jsx(\"input\", {\n        className: \"auth__input auth__input-mobile\",\n        type: \"text\",\n        onChange: event => {\n          this.setState({\n            mobileNumber: event.target.value\n          });\n        },\n        value: this.state.mobileNumber,\n        name: \"mobileNumber\",\n        onBlur: e => {\n          validatePhoneNumber({\n            name: e.target.name,\n            value: e.target.value,\n            handler: this.setErrors,\n            lang: this.context.lang,\n            iso: this.state.iso\n          });\n        },\n        required: true,\n        placeholder: t(\"login.mobile-placeholder\")\n      })), __jsx(FormErrorMsg, {\n        show: this.state.errors[\"mobileNumber\"],\n        msg: this.state.errors[\"mobileNumber\"]\n      })), __jsx(\"label\", {\n        className: \"auth__form-label\"\n      }, __jsx(\"span\", {\n        className: \"auth__input-label\"\n      }, __jsx(Translate, {\n        id: \"login.email\"\n      })), __jsx(\"input\", {\n        className: \"gray__input\",\n        type: \"email\",\n        onChange: this.handleEmailChange,\n        placeholder: t(\"login.email-placeholder\"),\n        required: true,\n        value: this.state.email,\n        onBlur: e => {\n          validateEmail({\n            name: \"email\",\n            value: e.target.value,\n            handler: this.setErrors,\n            lang: this.context.lang\n          });\n        },\n        pattern: \"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\"\n      }), __jsx(FormErrorMsg, {\n        show: this.state.errors[\"email\"],\n        msg: this.state.errors[\"email\"]\n      })), __jsx(\"label\", {\n        className: \"auth__form-label\"\n      }, __jsx(\"span\", {\n        className: \"auth__input-label\"\n      }, __jsx(Translate, {\n        id: \"login.pass\"\n      })), __jsx(\"input\", {\n        className: \"gray__input\",\n        type: \"password\",\n        placeholder: t(\"login.pass-placeholder\"),\n        onChange: this.handlePassChange,\n        value: this.state.pass,\n        required: true,\n        onBlur: e => {\n          validatePasswordCreateShop({\n            name: \"password\",\n            value: e.target.value,\n            handler: this.setErrors,\n            lang: this.context.lang\n          });\n        }\n      }), __jsx(FormErrorMsg, {\n        show: this.state.errors[\"password\"],\n        msg: this.state.errors[\"password\"]\n      })), __jsx(\"label\", {\n        className: \"auth__form-label\"\n      }, __jsx(\"span\", {\n        className: \"auth__input-label\"\n      }, __jsx(Translate, {\n        id: \"login.confirm-Pass\"\n      })), __jsx(\"input\", {\n        className: \"gray__input\",\n        type: \"password\",\n        placeholder: t(\"login.confirm-pass-placeholder\"),\n        required: true,\n        value: this.state.cPass,\n        onBlur: e => {\n          validateConfirmPassword({\n            name: e.target.name,\n            value1: this.state.pass,\n            value2: e.target.value,\n            handler: this.setErrors,\n            lang: this.context.lang\n          });\n        },\n        onChange: e => {\n          this.handleConfirmPassChange(e);\n          validateConfirmPassword({\n            name: \"cpassword\",\n            value1: this.state.pass,\n            value2: e.target.value,\n            handler: this.setErrors,\n            lang: this.context.lang\n          });\n        }\n      }), __jsx(FormErrorMsg, {\n        show: this.state.errors[\"cpassword\"],\n        msg: this.state.errors[\"cpassword\"]\n      })));\n    }), __jsx(\"div\", {\n      className: \"auth__captcha-cnt\"\n    }, __jsx(ReCAPTCHA // size=\"compact\"\n    , {\n      sitekey: \"6Lfh-usZAAAAAP3ZYWqEZ4hmjWOi_GA606Ho19aW\",\n      onChange: this.handleChangeToken,\n      ref: this.handleChangeRef\n    }), this.state.captchaErrors ? __jsx(FormErrorMsg, {\n      show: true,\n      msg: \"please set captcha\"\n    }) : null), __jsx(\"div\", {\n      className: \"auth__btn\"\n    }, __jsx(Button, {\n      radius: \"true\",\n      type: \"submit\",\n      value: this.state.showLoader ? __jsx(Loading, {\n        type: \"white\",\n        width: \"20px\",\n        height: \"20px\"\n      }) : __jsx(Translate, {\n        id: \"login.signup\"\n      })\n    })))), __jsx(\"div\", {\n      className: \"createshop__btm text-align-center-ltr mb-5\"\n    }, __jsx(\"p\", {\n      className: \"createshop__text1\"\n    }, __jsx(Translate, {\n      id: \"login.dont-acc\"\n    })), __jsx(\"a\", {\n      href: \"https://panel.ajyal.bh\",\n      className: \"createshop__text-sky\"\n    }, __jsx(Translate, {\n      id: \"login.signup-msg1\"\n    })))) : __jsx(\"div\", {\n      className: \"createshop__transition-cnt mt-5\"\n    }, __jsx(VerifyPhone, {\n      Backclick: this.handleBackclick,\n      loaderSubmitButton: this.state.loaderFinalSubmitButton,\n      currdata: {\n        phoneCode: this.state.phoneCode,\n        mobileNumber: this.state.mobileNumber,\n        iso: this.state.iso,\n        requestId: this.state.requestId\n      },\n      submitRegister: this.handlerVerifySms\n    })));\n  }\n\n}\n\n_defineProperty(Login, \"contextType\", CreateShopContext);\n\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}