{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { client_categoryBrands } from \"../../../../../../lib/api/client/clientCommon\";\nimport { Loading } from \"../../../../../common\";\nimport SearchIcon from \"./../../../../../../assets/icons/search-gray.svg\"; // import \"./CheckBoxList.scss\";\n// import \"./CheckBoxList-rtl.scss\";\n\nlet SearchTimer = null;\nexport default (({\n  catId,\n  itemClass,\n  listClass,\n  placeholder,\n  pageSize = 10,\n  onSelect = () => {},\n  selecteIds = []\n}) => {\n  const {\n    0: brands,\n    1: setBrands\n  } = useState([]);\n  const {\n    0: brandsLoading,\n    1: setBrandsLoading\n  } = useState(false);\n  const {\n    0: seeLoading,\n    1: setSeeLoading\n  } = useState(false);\n  const query = React.useMemo(() => {\n    return {\n      pageSize: pageSize,\n      pageNumber: 1,\n      search: \"\",\n      catId,\n      BrandIds: selecteIds\n    };\n  }, [catId]);\n  query.BrandIds = selecteIds;\n  const resCount = useRef(200);\n\n  const getBrands = () => {\n    setBrandsLoading(true);\n    client_categoryBrands(query).then(res => {\n      resCount.current = res.result.length;\n      setBrands(res.result);\n      setBrandsLoading(false);\n    }).catch(err => {\n      console.log(err);\n      setBrands([]);\n      setBrandsLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    getBrands();\n  }, [catId]);\n\n  const handleSeeClick = e => {\n    e.preventDefault();\n    if (seeLoading) return;\n    setSeeLoading(true);\n    query.pageNumber = query.pageNumber + 1;\n    client_categoryBrands(query).then(res => {\n      resCount.current = res.result.length;\n      setBrands([...brands, ...res.result]);\n    }).catch(err => {\n      console.log(err);\n      setBrands([]);\n    }).finally(() => {\n      setSeeLoading(false);\n    });\n  };\n\n  const handleSearchChange = e => {\n    const q = e.target.value;\n    query.search = q;\n    query.pageNumber = 1;\n\n    if (SearchTimer) {\n      clearTimeout(SearchTimer);\n      SearchTimer = null;\n    }\n\n    const callback = async query => {\n      setBrandsLoading(true);\n\n      try {\n        const res = await client_categoryBrands(query);\n\n        if (res.result) {\n          resCount.current = res.result.length;\n          setBrands(res.result);\n        }\n      } catch (er) {\n        setBrands([]);\n      } finally {\n        setBrandsLoading(false);\n      }\n    };\n\n    SearchTimer = setTimeout(callback.bind(null, query), 500);\n  };\n\n  const handleCheckChange = e => {\n    onSelect({\n      value: e.target.name,\n      id: e.target.value\n    }, e.target.checked);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"checklist__search\"\n  }, __jsx(SearchIcon, {\n    className: \"checklist__search-input-icon\"\n  }), __jsx(\"input\", {\n    onChange: handleSearchChange,\n    type: \"text\" // value={searchText}\n    ,\n    className: \"checklist__search-input\",\n    placeholder: placeholder\n  })), __jsx(\"ul\", {\n    className: `checklist ${listClass}`\n  }, brandsLoading ? __jsx(Loading, {\n    width: \"20px\",\n    height: \"20px\"\n  }) : brands.map((brand, index) => {\n    return __jsx(\"label\", {\n      key: index,\n      className: \"checklist__label\"\n    }, __jsx(\"li\", {\n      className: `${itemClass} d-flex justify-content-between align-items-center`\n    }, __jsx(\"div\", null, __jsx(\"input\", {\n      className: \"checklist__check\",\n      type: \"checkbox\",\n      name: brand.brandTitle,\n      value: brand.brandId,\n      checked: selecteIds.includes(brand.brandId) ? true : false,\n      onChange: handleCheckChange\n    }), __jsx(\"span\", null, brand.brandTitle)), __jsx(\"span\", null, \"(\", brand.goodsCount, \")\")));\n  })), resCount.current >= pageSize && !brandsLoading && __jsx(React.Fragment, null, seeLoading ? __jsx(Loading, {\n    width: \"20px\",\n    height: \"20px\"\n  }) : __jsx(\"a\", {\n    href: \"\",\n    onClick: handleSeeClick,\n    className: \"seemore__link\"\n  }, __jsx(Translate, {\n    id: \"seemore\"\n  }))));\n});","map":null,"metadata":{},"sourceType":"module"}