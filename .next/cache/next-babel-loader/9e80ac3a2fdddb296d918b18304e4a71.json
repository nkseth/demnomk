{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useReducer, useState } from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { useSelector } from \"react-redux\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\nimport { selectCurr, selectLang } from \"../../../../appConfigSlice\";\nimport { client_fetchTrackingDetail } from \"../../../../lib/api/client/clientTracking\";\nimport { validateEmpty } from \"../../../../lib/formValidator\";\nimport { getErrorMsg } from \"../../../../lib/helpers\";\nimport { isRtl } from \"../../../../lib/isRtl\";\nimport { getToastConfig } from \"../../../../lib/toast\";\nimport { BoxStyle1, FormErrorMsg, Loading } from \"../../../common\";\nimport TrackingSvg from \"./../../../../assets/icons/tracking.svg\";\nimport TrackingResult from \"./TrackingResult\";\n\nvar renderBoxHeader = function renderBoxHeader() {\n  return __jsx(\"div\", {\n    className: \"profile-edit__header-container\"\n  }, __jsx(\"h2\", {\n    className: \"profile-edit__box-header\"\n  }, __jsx(Translate, {\n    id: \"order-tracking\"\n  })), __jsx(\"p\", {\n    className: \"profile-edit__box-subheader\"\n  }, __jsx(Translate, {\n    id: \"tracking-sub\"\n  })));\n};\n\nexport var TRACK = 1;\nexport var RESULT = 2;\n\nvar Tracking = function Tracking() {\n  var lang = useSelector(selectLang);\n\n  var _useState = useState(\"\"),\n      code = _useState[0],\n      setCode = _useState[1];\n\n  var _useState2 = useState({}),\n      errors = _useState2[0],\n      setErrors = _useState2[1];\n\n  var _useState3 = useState(false),\n      clickLoading = _useState3[0],\n      setClickLoading = _useState3[1];\n\n  var _useState4 = useState({}),\n      reqResult = _useState4[0],\n      setReqResult = _useState4[1];\n\n  var reducer = function reducer(state, action) {\n    return action.type;\n  };\n\n  var _useReducer = useReducer(reducer, TRACK),\n      situ = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var handleClick = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var key, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n\n              if (!clickLoading) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.t0 = _regeneratorRuntime.keys(errors);\n\n            case 4:\n              if ((_context.t1 = _context.t0()).done) {\n                _context.next = 11;\n                break;\n              }\n\n              key = _context.t1.value;\n\n              if (!errors[key]) {\n                _context.next = 9;\n                break;\n              }\n\n              toast.error(getErrorMsg(lang, \"error-detected\"), getToastConfig());\n              return _context.abrupt(\"return\");\n\n            case 9:\n              _context.next = 4;\n              break;\n\n            case 11:\n              setClickLoading(true);\n              _context.prev = 12;\n              _context.next = 15;\n              return client_fetchTrackingDetail(code);\n\n            case 15:\n              res = _context.sent;\n\n              if (res.status == 200) {\n                setReqResult(res.result);\n                setCode(\"\");\n                dispatch({\n                  type: RESULT\n                });\n                setClickLoading(false);\n              }\n\n              _context.next = 23;\n              break;\n\n            case 19:\n              _context.prev = 19;\n              _context.t2 = _context[\"catch\"](12);\n              toast.error(_context.t2.response.data.message, getToastConfig());\n              setClickLoading(false);\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[12, 19]]);\n    }));\n\n    return function handleClick(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(ToastContainer, _extends({\n    rtl: isRtl(lang)\n  }, getToastConfig())), __jsx(SwitchTransition, {\n    className: \"user-panel__container\"\n  }, __jsx(CSSTransition, {\n    key: situ,\n    classNames: \"user-panel__routes\",\n    timeout: 200\n  }, situ == RESULT ? __jsx(TrackingResult, {\n    result: reqResult,\n    dis: dispatch\n  }) : __jsx(\"div\", {\n    className: \"tracking container siteWidthContainer\"\n  }, __jsx(BoxStyle1, {\n    headerContent: renderBoxHeader()\n  }, __jsx(\"div\", {\n    className: \"tracking-content\"\n  }, __jsx(\"div\", {\n    className: \"verify-email\"\n  }, __jsx(TrackingSvg, {\n    alt: \"verify your email\",\n    className: \"tracking__img\"\n  }), __jsx(\"p\", {\n    className: \"verify-email__btm-text\"\n  }, __jsx(Translate, {\n    id: \"tracking-input-msg\"\n  })), __jsx(\"form\", {\n    className: \"verify-email__form\",\n    onSubmit: handleClick\n  }, __jsx(Translate, null, function (_ref2) {\n    var t = _ref2.translate;\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"verify-email__input-cnt\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      className: \"gray__input\",\n      name: \"code\",\n      value: code,\n      required: true,\n      placeholder: t(\"tracking-placeholder\"),\n      onChange: function onChange(e) {\n        setCode(e.target.value);\n        validateEmpty({\n          name: \"code\",\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      },\n      onBlur: function onBlur(e) {\n        validateEmpty({\n          name: \"code\",\n          value: e.target.value,\n          handler: setErrors,\n          lang: lang\n        });\n      }\n    })), __jsx(FormErrorMsg, {\n      show: errors[\"code\"],\n      msg: errors[\"code\"]\n    }));\n  }), __jsx(\"button\", {\n    className: \"primary-btn no-address__btn\"\n  }, clickLoading ? __jsx(Loading, {\n    type: \"white\",\n    width: \"20px\",\n    height: \"20px\"\n  }) : __jsx(Translate, {\n    id: \"tracking\"\n  }))))))))));\n};\n\nexport default Tracking;","map":null,"metadata":{},"sourceType":"module"}