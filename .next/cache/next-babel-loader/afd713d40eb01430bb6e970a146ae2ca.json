{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\"; // import \"./Auth.scss\";\n// import \"./Auth-rtl.scss\";\n\nimport { Translate } from \"react-localize-redux\";\nimport { SignUp } from \"./SignUp\";\nimport { SignIn } from \"./SignIn\";\nimport { connect } from \"react-redux\";\nimport { isRtl } from \"../../../../lib/isRtl\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { getToastConfig } from \"../../../../lib/toast\";\nimport { selectLang, selectLogin, selectCurr } from \"../../../../appConfigSlice\";\nimport { withRouter } from \"next/router\";\n\nclass Auth extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"clickHandler\", () => {\n      this.conRef.current.classList.toggle(\"s--signup\");\n    });\n\n    this.is_signup = this.props.router.query.signup != undefined;\n    this.is_rtl = isRtl(this.props.lang);\n    this.conRef = /*#__PURE__*/React.createRef();\n    this.leftForm = this.is_rtl ? __jsx(SignIn, {\n      loc: this.props.loc,\n      isDesktop: this.props.isDesktop,\n      clickSignUp: this.clickHandler\n    }) : __jsx(SignUp, {\n      loc: this.props.loc,\n      isDesktop: this.props.isDesktop,\n      clickSignUp: this.clickHandler\n    });\n    this.righForm = this.is_rtl ? __jsx(SignUp, {\n      loc: this.props.loc,\n      clickSignUp: this.clickHandler,\n      isDesktop: this.props.isDesktop\n    }) : __jsx(SignIn, {\n      loc: this.props.loc,\n      clickSignUp: this.clickHandler,\n      isDesktop: this.props.isDesktop\n    });\n  }\n\n  render() {\n    const backImage = this.props.data.backgroundImage ? `${process.env.NEXT_PUBLIC_LOGO_PREFIX}/${this.props.data.backgroundImage}` : `/assets/imgs/login.jpg`;\n    return __jsx(\"section\", {\n      className: \"auth\"\n    }, __jsx(ToastContainer, _extends({\n      rtl: this.is_rtl\n    }, getToastConfig())), __jsx(\"div\", {\n      className: `cont ${this.is_signup ? \"s--signup\" : \"\"}`,\n      ref: this.conRef\n    }, this.leftForm, __jsx(\"div\", {\n      className: \"sub-cont\"\n    }, __jsx(\"style\", null, `.img-auth-logo::before{\n                    background-image: url(\"${backImage}\")!important;\n                `), __jsx(\"div\", {\n      className: \"img img-auth-logo\"\n    }, __jsx(\"a\", {\n      href: \"/\",\n      className: \"auth__logo\"\n    }, __jsx(\"img\", {\n      src: `${process.env.NEXT_PUBLIC_LOGO_PREFIX}/${this.props.data.logo}`\n    })), __jsx(\"div\", {\n      className: \"img__text m--up\"\n    }, __jsx(\"h3\", {\n      className: \"auth__up-header\"\n    }, __jsx(Translate, {\n      id: \"new\"\n    })), __jsx(\"p\", {\n      className: \"auth__up-p\"\n    }, __jsx(Translate, {\n      id: \"sign-dis\"\n    }))), __jsx(\"div\", {\n      className: \"img__text m--in\"\n    }, __jsx(\"h3\", {\n      className: \"auth__up-header\"\n    }, __jsx(Translate, {\n      id: \"acc-have\"\n    })), __jsx(\"p\", {\n      className: \"auth__up-p\"\n    }, __jsx(Translate, {\n      id: \"login2\"\n    }))), __jsx(\"div\", {\n      onClick: this.clickHandler,\n      className: \"img__btn\"\n    }, __jsx(\"span\", {\n      className: \"m--up\"\n    }, __jsx(Translate, {\n      id: \"signUp3\"\n    })), __jsx(\"span\", {\n      className: \"m--in\"\n    }, __jsx(Translate, {\n      id: \"signIn3\"\n    })))), this.righForm)));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isLogin: selectLogin(state).isLogin,\n    lang: selectLang(state),\n    cur: selectCurr(state)\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(Auth));","map":null,"metadata":{},"sourceType":"module"}