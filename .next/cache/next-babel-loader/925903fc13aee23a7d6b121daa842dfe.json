{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Translate } from \"react-localize-redux\";\nimport { CreateShopContext } from \"../CreateShopContext\";\nimport SelectAddress from \"./../../UserPanel/PanelPages/Addresses/AddressesLayouts/SelectAddress\";\nimport { BoxStyle3 } from \"./../../../../common\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { COMPLETE_AND_NEXT } from \"../CreateShopConstant\";\nimport { FormErrorMsg } from \"../../../../common\";\nimport Select from \"react-select\";\nimport { client_getParentCategory } from \"./../../../../../lib/api/client/clientShop\";\nimport Geocode from \"react-geocode\";\nimport { validateEmpty, validatePhoneNumber } from \"../../../../../lib/formValidator\";\n\nclass Store extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setErrors\", func => {\n      const error = func(this.state.errors);\n      this.setState({\n        errors: error\n      });\n    });\n\n    _defineProperty(this, \"setData\", data => {\n      const newData = _objectSpread({}, this.state.data);\n\n      for (let key in data) {\n        newData[key] = data[key];\n      }\n\n      this.setState({\n        fullAddress: newData.address,\n        lat: newData.Location.lat,\n        lang: newData.Location.lng,\n        dontSetLocation: false\n      });\n    });\n\n    _defineProperty(this, \"handlePersonChange\", event => {\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        personId: event.value\n      }));\n    });\n\n    _defineProperty(this, \"handleNameChange\", event => {\n      this.setState({\n        name: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleShopNameChange\", event => {\n      this.setState({\n        shopName: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleAddressChange\", event => {\n      this.setState({\n        fullAddress: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handlePhoneChange\", event => {\n      this.setState({\n        phone: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault();\n      debugger;\n\n      if (this.state.selectedCategory == null) {\n        this.setState({\n          categoryEmptyError: true\n        });\n        return;\n      }\n\n      for (let key in this.state.errors) {\n        if (this.state.errors[key]) {\n          return;\n        }\n      }\n\n      this.context.handleStore(this.state.personId, this.state.name, this.state.shopName, this.state.fullAddress, this.state.selectedCategory, this.state.phone, this.state.lat, this.state.lang);\n      this.context.handleStep(COMPLETE_AND_NEXT);\n      this.setState({\n        categoryEmptyError: false\n      });\n    });\n\n    _defineProperty(this, \"handleCategoryChange\", item => {\n      this.setState(_objectSpread(_objectSpread({}, this.state), {}, {\n        selectedCategory: item\n      }));\n    });\n\n    this.state = {\n      showSelectAddress: false,\n      data: {},\n      personId: 1,\n      errors: {},\n      name: \"\",\n      shopName: \"\",\n      fullAddress: \"\",\n      phone: \"\",\n      lat: 0,\n      lang: 0,\n      dontSetLocation: true,\n      selectedCategory: null,\n      categoryOptions: [],\n      categoryEmptyError: false,\n      cityName: \"\",\n      countryName: \"\",\n      phoneCode: \"\",\n      iso: \"\",\n      optopns: [{\n        value: 1,\n        label: \"Legal\"\n      }, {\n        value: 2,\n        label: \"Natural\"\n      }]\n    };\n    this.API_KEY = process.env.NEXT_PUBLIC_GOOGLE_MAP_API_KEY;\n    this.handleSituation = this.handleSituation.bind(this);\n    this.handlePersonChange = this.handlePersonChange.bind(this);\n    this.handleAddressChange = this.handleAddressChange.bind(this);\n    this.handleShopNameChange = this.handleShopNameChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.handlePhoneChange = this.handlePhoneChange.bind(this);\n  }\n\n  async componentDidMount() {\n    const result = await client_getParentCategory();\n    let items = [];\n    result.result.forEach(item => {\n      items.push({\n        value: item.categoryId,\n        label: item.categoryTitle\n      });\n    });\n    this.state.categoryOptions = items; // let phoneNumber = \"\";\n    // if (this.context.formData.phone === \"\") {\n    //   phoneNumber = \"+\" + this.context.formData.phoneCode;\n    // } else {\n    //   phoneNumber = this.context.formData.phone;\n    // }\n\n    this.setState({\n      personId: this.context.formData.fkPersonId == 2 ? 2 : 1,\n      name: this.context.formData.fkPersonId == 2 ? this.context.formData.fullName : this.context.formData.companyName,\n      shopName: this.context.formData.storeName,\n      fullAddress: this.context.formData.address,\n      selectedCategory: this.context.filesData.selectedCategory,\n      phone: this.context.formData.phone,\n      cityName: this.context.formData.cityName,\n      countryName: this.context.formData.countryName,\n      iso: this.context.formData.iso,\n      lat: this.context.formData.locationX,\n      lang: this.context.formData.locationY\n    });\n    Geocode.setApiKey(this.API_KEY);\n\n    if (this.state.lat == 0 && this.state.lang == 0) {\n      Geocode.fromAddress(this.state.cityName, null, this.props.lang).then(response => {\n        const address = response.results[0].geometry;\n        this.setState({\n          lat: address.location.lat,\n          lang: address.location.lng\n        });\n      }, error => {});\n    } else {\n      this.setState({\n        dontSetLocation: false\n      });\n    }\n  }\n\n  handleSituation({\n    type\n  }) {\n    switch (type) {\n      case \"showMap\":\n        this.setState({\n          showSelectAddress: true\n        });\n        break;\n\n      case \"hideMap\":\n        this.setState({\n          showSelectAddress: false\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    return __jsx(\"form\", {\n      className: \"createshop__transition-cnt\",\n      onSubmit: this.handleSubmit\n    }, __jsx(\"div\", {\n      className: \"mt-5\"\n    }, __jsx(\"h3\", {\n      className: \"createshop__header-text\"\n    }, __jsx(Translate, {\n      id: \"store.store-msg1\"\n    })), __jsx(\"div\", {\n      className: \"createshop__form createshop__form--store\"\n    }, __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      if (this.state.showSelectAddress) {\n        return __jsx(CSSTransition, {\n          appear: true,\n          in: true,\n          classNames: \"user-panel__routes\",\n          timeout: 400\n        }, __jsx(BoxStyle3, null, __jsx(SelectAddress, {\n          setData: this.setData,\n          handleSituation: this.handleSituation,\n          lat: this.state.lat,\n          lng: this.state.lang,\n          dontSetLocation: this.state.dontSetLocation,\n          selectedCountry: this.state.countryName\n        })));\n      } else {\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"createshop__form-cnt row justify-content-between\"\n        }, __jsx(\"div\", {\n          className: \"col-12 col-sm-6\"\n        }, __jsx(\"label\", {\n          className: \"auth__form-label\"\n        }, __jsx(\"span\", {\n          className: \"auth__input-label\"\n        }, __jsx(Translate, {\n          id: \"store.person\"\n        })), __jsx(Select, {\n          className: \"react-select\",\n          options: this.state.optopns,\n          onChange: this.handlePersonChange,\n          placeholder: t(\"store.person-placeholder\"),\n          value: this.state.personId == 1 ? this.state.optopns[0] : this.state.optopns[1],\n          required: true\n        }))), __jsx(\"div\", {\n          className: \"col-12 col-sm-6\"\n        }, __jsx(\"label\", {\n          className: \"auth__form-label\"\n        }, __jsx(\"span\", {\n          className: \"auth__input-label\"\n        }, this.state.personId != 2 && __jsx(Translate, {\n          id: \"store.company-name\"\n        }), this.state.personId == 2 && __jsx(Translate, {\n          id: \"store.fullname\"\n        })), __jsx(\"input\", {\n          className: \"gray__input\",\n          type: \"string\",\n          placeholder: this.state.personId == 2 ? t(\"store.full-name-placeholder\") : t(\"store.company-name-placeholder\"),\n          onBlur: e => {\n            validateEmpty({\n              name: \"name\",\n              value: e.target.value,\n              handler: this.setErrors,\n              lang: this.context.lang\n            });\n          },\n          required: true,\n          onChange: this.handleNameChange,\n          value: this.state.name\n        }), __jsx(FormErrorMsg, {\n          show: this.state.errors[\"name\"],\n          msg: this.state.errors[\"name\"]\n        }))), __jsx(\"div\", {\n          className: \"col-12 col-sm-6\"\n        }, __jsx(\"label\", {\n          className: \"auth__form-label\"\n        }, __jsx(\"span\", {\n          className: \"auth__input-label\"\n        }, __jsx(Translate, {\n          id: \"store.store-name\"\n        })), __jsx(\"input\", {\n          className: \"gray__input\",\n          type: \"string\",\n          placeholder: t(\"store.store-name-placeholder\"),\n          onBlur: e => {\n            validateEmpty({\n              name: \"Companyname\",\n              value: e.target.value,\n              handler: this.setErrors,\n              lang: this.context.lang\n            });\n          },\n          required: true,\n          onChange: this.handleShopNameChange,\n          value: this.state.shopName\n        }), __jsx(FormErrorMsg, {\n          show: this.state.errors[\"Companyname\"],\n          msg: this.state.errors[\"Companyname\"]\n        }))), __jsx(\"div\", {\n          className: \"col-12\"\n        }, __jsx(\"label\", {\n          className: \"auth__form-label\"\n        }, __jsx(\"span\", {\n          className: \"auth__input-label\"\n        }, __jsx(Translate, {\n          id: \"store.kind-pro\"\n        })), __jsx(Select, {\n          className: \"react-select\",\n          options: this.state.categoryOptions,\n          onChange: this.handleCategoryChange,\n          placeholder: t(\"store.kind-pro-placeholder\"),\n          value: this.state.selectedCategory,\n          required: true\n        })), this.state.categoryEmptyError && __jsx(\"span\", {\n          className: \"country-error\"\n        }, __jsx(Translate, {\n          id: \"store.select-category-error\"\n        }))), __jsx(\"div\", {\n          className: \"col-12\"\n        }, __jsx(\"label\", {\n          className: \"auth__form-label\"\n        }, __jsx(\"span\", {\n          className: \"select-address-wrapper\",\n          onClick: () => this.handleSituation({\n            type: \"showMap\"\n          })\n        }, __jsx(Translate, {\n          id: \"addresses.select-map\"\n        }), __jsx(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          id: \"placeholder\",\n          width: \"21.225\",\n          height: \"33.106\",\n          viewBox: \"0 0 21.225 33.106\"\n        }, __jsx(\"path\", {\n          id: \"Subtraction_7\",\n          fill: \"#acb1b8\",\n          d: \"M10.613 33.106L6.25 20.286a10.612 10.612 0 1 1 8.727 0L10.614 33.1zm0-30a7.5 7.5 0 1 0 7.5 7.5 7.513 7.513 0 0 0-7.5-7.497z\",\n          \"data-name\": \"Subtraction 7\"\n        }))))), __jsx(\"div\", {\n          className: \"col-12\"\n        }, __jsx(\"label\", {\n          className: \"auth__form-label\"\n        }, __jsx(\"span\", {\n          className: \"auth__input-label\"\n        }, __jsx(Translate, {\n          id: \"store.address\"\n        })), __jsx(\"textarea\", {\n          placeholder: t(\"store.address-placeholder\"),\n          className: \"gray__input\",\n          rows: \"5\",\n          value: this.state.fullAddress,\n          onChange: this.handleAddressChange\n        }), __jsx(FormErrorMsg, {\n          show: this.state.errors[\"Address\"],\n          msg: this.state.errors[\"Address\"]\n        })))));\n      }\n    }))), __jsx(\"div\", {\n      className: \"createshop__btm text-align-center-ltr mb-5\"\n    }, !this.state.showSelectAddress ? __jsx(\"div\", {\n      className: \"auth__btn\"\n    }, __jsx(\"button\", {\n      type: \"submit\",\n      className: \"createshop__primary-btn primary-btn\"\n    }, __jsx(Translate, {\n      id: \"country.next\"\n    }))) : null));\n  }\n\n}\n\n_defineProperty(Store, \"contextType\", CreateShopContext);\n\nexport default Store;","map":null,"metadata":{},"sourceType":"module"}