{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport { withRouter } from \"next/router\";\nimport { LocalizeProvider, Translate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { wrapper } from \"../../../store\";\nimport { translationsPayload, mergeTranslations } from \"../../../translations/payload\";\nimport UserPanelTranslations from \"../../../translations/user-panel-translations.json\";\nimport HeaderTranslations from \"./../../../translations/header-translations.json\";\nimport { isServer } from \"../../../lib/isServer\"; // import { StaticRouter, BrowserRouter } from \"react-router-dom\";\n// import Footer from \"../../../components/app/footer\";\n// import { Header } from \"../../../components/app/header\";\n\nimport { server_fetchHeader, server_fetchFooter } from \"../../../lib/api/client/serverCommon\";\nimport Cookies from \"js-cookie\";\nimport Head from \"next/head\";\nimport dynamic from \"next/dynamic\";\nimport { WithUserAgentProps, withUserAgent, useUserAgent } from \"next-useragent\";\nconst PanelDesktop = dynamic(() => import(\"./PanelDesktop\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./PanelDesktop\")],\n    modules: [\"./PanelDesktop\"]\n  }\n});\nconst PanelMobile = dynamic(() => import(\"./PanelMobile\"), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./PanelMobile\")],\n    modules: [\"./PanelMobile\"]\n  }\n});\n\nclass Panel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (!isServer()) {\n      this.redirect = false;\n      this.isLogin = true;\n      const token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name); // check user is login or not\n\n      if (!token) {\n        this.isLogin = false;\n      }\n\n      if (!this.isLogin) {\n        if (this.props.ua.isDesktop) {\n          this.props.router.push(`/${this.props.curr}-${this.props.lang}/Auth`);\n          this.redirect = true;\n        } else {\n          if (this.props.router.asPath == `/${this.props.curr}-${this.props.lang}/panel` || this.props.router.asPath == `/${this.props.curr}-${this.props.lang}/panel/`) {\n            return;\n          }\n\n          this.props.router.push(`/${this.props.curr}-${this.props.lang}/Auth`);\n          this.redirect = true;\n        }\n      }\n    }\n  }\n\n  render() {\n    var _this$props$data$head, _this$props$data$head2;\n\n    if (this.redirect) {\n      return __jsx(\"p\", null, \"Redirecting...\");\n    }\n\n    const loc = \"/\" + this.props.router.asPath.split(\"/\")[1] + \"/panel\";\n    return __jsx(React.Fragment, null, __jsx(LocalizeProvider, {\n      initialize: translationsPayload(mergeTranslations(UserPanelTranslations, HeaderTranslations), this.props.lang)\n    }, __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      return __jsx(Head, null, __jsx(\"title\", null, t(\"@userpanelTitle\")));\n    }), !this.props.ua.isDesktop ? __jsx(PanelMobile, _extends({\n      wishCount: (_this$props$data$head = this.props.data.header) === null || _this$props$data$head === void 0 ? void 0 : _this$props$data$head.wishListCount,\n      customerFullName: (_this$props$data$head2 = this.props.data.header) === null || _this$props$data$head2 === void 0 ? void 0 : _this$props$data$head2.customerFullName\n    }, this.props, {\n      loc: loc\n    })) : __jsx(PanelDesktop, _extends({}, this.props, {\n      loc: loc\n    }))));\n  }\n\n}\n\nexport default connect()(withRouter(withUserAgent(Panel)));\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const ua = useUserAgent(context.req.headers[\"user-agent\"]);\n  const Result = await Promise.all([server_fetchHeader(ua.isDesktop), server_fetchFooter()]);\n  return {\n    props: {\n      ua,\n      useragent: ua.source,\n      data: {\n        header: Result[0].result,\n        footer: Result[1].result\n      }\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}