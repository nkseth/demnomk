{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { LocalizeProvider, Translate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { wrapper } from \"../../../store\";\nimport Error from \"next/error\";\nimport { translationsPayload } from \"../../../translations/payload\";\nimport HeaderTranslations from \"../../../translations/header-translations.json\";\nimport Footer from \"../../../components/app/footer\";\nimport { Header } from \"../../../components/app/header\";\nimport { server_fetchHeader, server_fetchFooter } from \"../../../lib/api/client/serverCommon\";\nimport Head from \"next/head\";\nimport Content from \"../../../components/app/pages/content/Content\";\nimport { server_fetchContent } from \"../../../lib/api/client/serverContent\";\nimport { WithUserAgentProps, withUserAgent, useUserAgent } from \"next-useragent\";\n\nclass TrackingPage extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    if (this.props.errorCode !== 200) {\n      return __jsx(Error, {\n        statusCode: this.props.errorCode\n      });\n    }\n\n    const content = __jsx(Content, {\n      content: this.props.content\n    });\n\n    return __jsx(LocalizeProvider, {\n      initialize: translationsPayload(HeaderTranslations, this.props.lang)\n    }, __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      return __jsx(Head, null);\n    }), __jsx(Header, {\n      data: this.props.data.header,\n      lang: this.props.lang,\n      curr: this.props.curr,\n      isDesktop: this.props.ua.isDesktop\n    }), content, __jsx(Footer, {\n      lang: this.props.lang,\n      isDesktop: this.props.ua.isDesktop,\n      data: this.props.data.footer,\n      cartCount: this.props.data.header.cartCount\n    }));\n  }\n\n}\n\nexport default connect()(TrackingPage);\nexport const getServerSideProps = wrapper.getServerSideProps(async ({\n  req,\n  query\n}) => {\n  // const generatedFilters = searchQueryToFilters(query);\n  const {\n    type\n  } = query;\n  const ua = useUserAgent(req.headers[\"user-agent\"]);\n  const Result = await Promise.all([server_fetchHeader(ua.isDesktop), server_fetchFooter(), server_fetchContent(type)]);\n\n  if (Result[2].status !== 200) {\n    return {\n      props: {\n        ua,\n        errorCode: Result[2].status\n      }\n    };\n  }\n\n  return {\n    props: {\n      errorCode: 200,\n      content: Result[2].result,\n      ua,\n      data: {\n        header: Result[0].result,\n        footer: Result[1].result\n      }\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}