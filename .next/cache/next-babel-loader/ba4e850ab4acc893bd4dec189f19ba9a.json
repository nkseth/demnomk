{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Translate } from \"react-localize-redux\"; // import \"./CartAndWishlist.scss\";\n// import \"./CartAndWishlist-rtl.scss\";\n\nimport { connect } from \"react-redux\";\nimport { BoxStyle1, Button, Loading } from \"../../../common\";\nimport { CartAndWishlistItem, CartAndWishlistAside, EmptyCart } from \"./CartAndWishlistLayouts\";\nimport { fetchCart, selectStatus, IDLE, selectCart, ERROR, fetchWishList, selectWishListStatus, selectWishList, selectCityId, selectCityText, selectCountryId, cityChanged, addCoupon, selectCoupon, selectErrorMsg } from \"./cartAndWishlistSlice\";\nimport { selectLang, LOADING, selectCurr, selectLogin, PREVLINK_CHANGE } from \"../../../../appConfigSlice\";\nimport { CSSTransition } from \"react-transition-group\";\nimport DeliveryPanel from \"./CartAndWishlistLayouts/DeliveryPanel/DeliveryPanel\";\nimport { client_addItemCount, client_addToCart, client_likeGood, client_removeFromCart } from \"../../../../lib/api/client/clientCart\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport { getToastConfig } from \"../../../../lib/toast\";\nimport { isRtl } from \"../../../../lib/isRtl\";\nimport { formatMoney, removeCouponCookie, setCouponCookie } from \"../../../../lib/helpers\";\nimport { withRouter } from \"next/router\";\nimport Cookies from \"js-cookie\";\nimport { unwrapResult } from \"@reduxjs/toolkit\";\n\nclass CardAndWhishlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"openPanel\", () => {\n      this.setState({\n        inProp: true\n      });\n    });\n\n    _defineProperty(this, \"closePanel\", () => {\n      this.setState({\n        inProp: false\n      });\n    });\n\n    _defineProperty(this, \"removeItemFromCart\", async goodItemId => {\n      try {\n        const result = await client_removeFromCart(goodItemId);\n\n        if (result.status === 200) {\n          this.props.fetchCart({\n            code: this.props.coupon\n          });\n        }\n      } catch (err) {}\n    });\n\n    _defineProperty(this, \"handleItemQuantityChange\", async (count, goodId, providerId) => {\n      try {\n        const result = await client_addItemCount({\n          goodsId: goodId,\n          providerId,\n          number: count,\n          cityId: this.props.cityId,\n          countryId: this.props.countryId,\n          provinceId: this.props.provinceId\n        });\n\n        if (result.status === 200) {\n          this.props.fetchCart({\n            code: this.props.coupon,\n            city: this.props.cityId,\n            country: this.props.countryId,\n            province: this.props.provinceId\n          });\n        }\n      } catch (err) {}\n    });\n\n    _defineProperty(this, \"handleRemoveFromWishlist\", async goodId => {\n      const result = await client_likeGood(goodId);\n\n      if (result.status === 200) {\n        this.props.fetchWishList();\n      }\n    });\n\n    _defineProperty(this, \"handleMoveWishToCart\", async (goodId, providerId) => {\n      try {\n        const result = await client_addToCart({\n          goodId: goodId,\n          providerId: providerId,\n          count: 1,\n          countryId: this.props.countryId,\n          cityId: this.props.cityId\n        });\n\n        if (result.status === 200) {\n          this.props.fetchCart({\n            code: this.props.coupon,\n            city: this.props.cityId,\n            country: this.props.countryId,\n            province: this.props.provinceId\n          });\n        }\n      } catch (err) {// return false;\n      }\n    });\n\n    _defineProperty(this, \"handleCouponClick\", async couponCode => {\n      try {\n        const result = await this.props.fetchCart({\n          code: couponCode,\n          city: this.props.cityId,\n          country: this.props.countryId,\n          province: this.props.provinceId\n        });\n        unwrapResult(result);\n        this.props.addCoupon(couponCode);\n\n        if (couponCode) {\n          setCouponCookie(couponCode);\n        } else {\n          removeCouponCookie();\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    });\n\n    _defineProperty(this, \"handleCityChange\", async (countryId, provinceId, cityId, cityText) => {\n      this.props.cityChanged({\n        cityId,\n        countryId,\n        cityText\n      });\n      this.props.fetchCart({\n        code: this.props.coupon,\n        city: cityId,\n        country: countryId,\n        province: provinceId\n      });\n    });\n\n    _defineProperty(this, \"handleCheckOutClick\", async () => {\n      if (!this.props.isLogin) {\n        this.props.prevUrlChange(this.props.router.asPath);\n        this.props.router.push(`/${this.props.curr}-${this.props.lang}/Auth`);\n        return;\n      }\n\n      let digitalFile = false;\n      const downloadAbleItem = this.props.cart.items.filter(x => x.isDownloadable);\n\n      if (downloadAbleItem.length == this.props.cart.items.length) {\n        digitalFile = true;\n      }\n\n      if (digitalFile) {\n        this.props.router.push(`/${this.props.curr}-${this.props.lang}/order?to=downloadable`);\n      } else {\n        this.props.router.push(`/${this.props.curr}-${this.props.lang}/order`);\n      }\n    });\n\n    this.state = {\n      cartLoading: false,\n      inProp: false,\n      changeCityLoading: false,\n      mobileCheckoutLoading: false\n    };\n    this.panelRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    const coupon = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name_coupon);\n\n    if (coupon) {\n      this.props.addCoupon(coupon);\n    }\n\n    this.props.fetchCart({\n      code: coupon\n    });\n    this.props.fetchWishList();\n  }\n\n  renderCartBoxHeader() {\n    return __jsx(\"div\", {\n      className: \"cart__header-container\"\n    }, this.props.cart.itemsCount !== 0 && __jsx(\"div\", {\n      className: \"itemDetail__deli-cnt cart__deli-cnt\"\n    }, this.state.changeCityLoading ? __jsx(Loading, {\n      type: \"gray\",\n      width: \"20px\",\n      height: \"20px\"\n    }) : __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"itemDetail__item\"\n    }, __jsx(\"span\", {\n      className: \"item-currect-address-1\"\n    }, __jsx(Translate, {\n      id: \"deliver.deliverCurrect\"\n    })), __jsx(\"span\", {\n      className: \"itemDetail__item-small-text d-flex\"\n    }, __jsx(Translate, {\n      id: \"deliver.deliverTo\"\n    }), __jsx(\"span\", {\n      className: \"itemDetail__item-small-text itemDetail__item-small-text--bold\"\n    }, this.props.cityText)), __jsx(\"span\", {\n      className: \"itemDetail__link mr-3 ml-3\",\n      onClick: this.openPanel\n    }, __jsx(Translate, {\n      id: \"deliver.changeAre\"\n    }))), __jsx(\"span\", {\n      className: \"item-currect-address-2\"\n    }, __jsx(Translate, {\n      id: \"deliver.deliverCurrect\"\n    })))), __jsx(\"h2\", {\n      className: \"cart__box-header\"\n    }, __jsx(Translate, {\n      id: \"cart-cart.mycart\"\n    })), __jsx(\"p\", {\n      className: \"cart__box-subheader\"\n    }, this.props.cart.itemsCount, \"\\xA0\", this.props.cart.itemsCount > 1 ? __jsx(Translate, {\n      id: \"cart-cart.items\"\n    }) : __jsx(Translate, {\n      id: \"cart-cart.item\"\n    })));\n  }\n\n  renderWishlistBoxHeader() {\n    return __jsx(\"div\", {\n      className: \"cart__header-container\"\n    }, __jsx(\"h2\", {\n      className: \"cart__box-header\"\n    }, __jsx(Translate, {\n      id: \"cart-wishlist.mywishlist\"\n    })), __jsx(\"p\", {\n      className: \"cart__box-subheader\"\n    }, this.props.wishList.length, \"\\xA0\", this.props.wishList.length > 1 ? __jsx(Translate, {\n      id: \"cart-cart.items\"\n    }) : __jsx(Translate, {\n      id: \"cart-cart.item\"\n    })));\n  }\n\n  componentDidUpdate() {\n    if (this.props.cartStatus === ERROR) {\n      toast.error(this.props.errorText, getToastConfig());\n    }\n  }\n\n  render() {\n    var _this$props$cart, _this$props$cart2, _this$props$cart3, _this$props$cart4, _this$props$cart5;\n\n    const load = __jsx(Loading, {\n      type: \"gray\",\n      width: \"80px\",\n      styleSheet: {\n        margin: \"100px auto\"\n      }\n    });\n\n    if (this.state.cartLoading) {\n      return __jsx(React.Fragment, null, load);\n    }\n\n    if (this.props.isLogin) {\n      if (this.props.cartLoading || this.props.wishListLoading) {\n        return __jsx(React.Fragment, null, load);\n      }\n    } else {\n      if (this.props.cartLoading) return __jsx(React.Fragment, null, load);\n    }\n\n    if (!this.props.isLogin && this.props.cart.itemsCount === 0) {\n      return __jsx(EmptyCart, {\n        icon: true,\n        dark: true,\n        p1: __jsx(Translate, {\n          id: \"emptyshop\"\n        }),\n        p2: __jsx(Translate, {\n          id: \"startshopping\"\n        }),\n        history: this.props.router\n      });\n    }\n\n    if (this.props.isLogin) {\n      if (this.props.cart.itemsCount === 0 && this.props.wishList.length === 0) {\n        return __jsx(EmptyCart, {\n          icon: true,\n          dark: true,\n          p1: __jsx(Translate, {\n            id: \"emptyshop\"\n          }),\n          p2: __jsx(Translate, {\n            id: \"startshopping\"\n          }),\n          history: this.props.router\n        });\n      }\n    }\n\n    return __jsx(\"section\", {\n      className: \"container siteWidthContainer cart-wishlist-section\"\n    }, __jsx(ToastContainer, _extends({\n      rtl: isRtl(this.props.lang)\n    }, getToastConfig())), __jsx(CSSTransition, {\n      unmountOnExit: true,\n      in: this.state.inProp,\n      timeout: 300,\n      classNames: \"goodDetail__panel--anim\",\n      nodeRef: this.panelRef\n    }, __jsx(DeliveryPanel, {\n      panelRef: this.panelRef,\n      closePanel: this.closePanel,\n      countryId: this.props.cart.countryId,\n      provinceId: this.props.cart.provinceId,\n      handleCityChange: this.handleCityChange\n    })), __jsx(\"div\", {\n      className: \"row no-gutters\"\n    }, __jsx(\"div\", {\n      className: ((_this$props$cart = this.props.cart) === null || _this$props$cart === void 0 ? void 0 : _this$props$cart.itemsCount) > 0 ? \"col-12 col-xl-9\" : \"col\"\n    }, __jsx(BoxStyle1, {\n      headerContent: this.renderCartBoxHeader()\n    }, __jsx(\"div\", {\n      className: \"cart\"\n    }, ((_this$props$cart2 = this.props.cart) === null || _this$props$cart2 === void 0 ? void 0 : _this$props$cart2.itemsCount) <= 0 ? __jsx(EmptyCart, {\n      normal: true,\n      p1: __jsx(Translate, {\n        id: \"emptyshop\"\n      }),\n      p2: __jsx(Translate, {\n        id: \"have-wish\"\n      }),\n      history: this.props.router\n    }) : __jsx(React.Fragment, null, (_this$props$cart3 = this.props.cart) === null || _this$props$cart3 === void 0 ? void 0 : _this$props$cart3.items.map((item, index) => {\n      return __jsx(CartAndWishlistItem, _extends({\n        key: index,\n        removeItemFromCart: this.removeItemFromCart,\n        handleItemQuantityChange: this.handleItemQuantityChange,\n        showQuantity: true,\n        key: item.itemId\n      }, item));\n    })))), this.props.isLogin ? this.props.wishListLoading ? __jsx(Loading, {\n      type: \"gray\",\n      width: \"50px\",\n      height: \"50px\",\n      styleSheet: {\n        margin: \"80px auto\"\n      }\n    }) : __jsx(BoxStyle1, {\n      headerContent: this.renderWishlistBoxHeader()\n    }, this.props.wishList.length > 0 ? __jsx(\"div\", {\n      className: \"cart\"\n    }, this.props.wishList.map((item, index) => {\n      return __jsx(CartAndWishlistItem, _extends({\n        key: index,\n        handleRemoveFromWishlist: this.handleRemoveFromWishlist,\n        handleMoveWishToCart: this.handleMoveWishToCart,\n        wishlistItem: true\n      }, item));\n    })) : __jsx(EmptyCart, {\n      normal: true,\n      p1: __jsx(Translate, {\n        id: \"emptyWish\"\n      }),\n      p2: \"\",\n      history: this.props.router\n    })) : null, !this.props.isLogin && __jsx(BoxStyle1, {\n      headerContent: this.renderWishlistBoxHeader()\n    }, __jsx(\"div\", {\n      className: \"cart\"\n    }, __jsx(EmptyCart, {\n      normal: true,\n      p1: __jsx(Translate, {\n        id: \"emptyWish\"\n      }),\n      p2: __jsx(Translate, {\n        id: \"login-wish\"\n      }),\n      history: this.props.router\n    })))), ((_this$props$cart4 = this.props.cart) === null || _this$props$cart4 === void 0 ? void 0 : _this$props$cart4.itemsCount) > 0 && __jsx(\"div\", {\n      className: \"col-12 col-xl-3\"\n    }, __jsx(CartAndWishlistAside, {\n      data: this.props.cart,\n      addCoupon: this.handleCouponClick,\n      checkOut: this.handleCheckOutClick\n    }), __jsx(\"div\", {\n      className: \"checkout-fix\"\n    }, __jsx(Button, {\n      radius: \"true\",\n      onClick: () => {\n        this.setState({\n          mobileCheckoutLoading: true\n        });\n        this.handleCheckOutClick();\n      },\n      value: this.state.mobileCheckoutLoading ? __jsx(Loading, {\n        type: \"white\",\n        with: \"20px\",\n        height: \"20px\"\n      }) : __jsx(React.Fragment, null, __jsx(Translate, {\n        id: \"aside.buy\"\n      }), \"\\xA0\", (_this$props$cart5 = this.props.cart) === null || _this$props$cart5 === void 0 ? void 0 : _this$props$cart5.itemsCount, \"\\xA0\", __jsx(Translate, {\n        id: \"aside.items\"\n      }), \"\\xA0\", __jsx(\"span\", null, __jsx(Translate, {\n        id: this.props.curr\n      }), \"\\xA0 \", formatMoney(this.props.cart.total)))\n    })))));\n  }\n\n}\n\nconst prevUrlChange = url => {\n  return {\n    type: PREVLINK_CHANGE,\n    payload: {\n      link: url\n    }\n  };\n};\n\nconst mapDispatchToProps = {\n  prevUrlChange,\n  fetchCart,\n  cityChanged,\n  fetchWishList,\n  addCoupon\n};\n\nconst mapStateToProps = state => {\n  return {\n    lang: selectLang(state),\n    curr: selectCurr(state),\n    cartLoading: selectStatus(state) === LOADING || selectStatus(state) === IDLE,\n    cartStatus: selectStatus(state),\n    cart: selectCart(state),\n    isLogin: selectLogin(state).isLogin,\n    wishListLoading: selectWishListStatus(state) === LOADING || selectWishListStatus(state) === IDLE,\n    wishList: selectWishList(state),\n    countryId: selectCountryId(state),\n    cityId: selectCityId(state),\n    cityText: selectCityText(state),\n    coupon: selectCoupon(state),\n    errorText: selectErrorMsg(state)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(CardAndWhishlist));","map":null,"metadata":{},"sourceType":"module"}