{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\"; // import \"./ShippingAddress.scss\";\n// import \"./ShippingAddress-rtl.scss\";\n\nimport { COMPLETE, VERIFY_PHONE, CHANGE_PHONE, SELECT_ADDRESS, GET_ADDRESS_DETAIL } from \"./ShippingAddressConstant\";\nimport { SwitchTransition, CSSTransition } from \"react-transition-group\";\nimport VerifyPhone from \"./VerifyPhone\";\nimport ChangePhone from \"./ChangePhone\";\nimport { COMPLETE_AND_NEXT } from \"../../OrderConstants\";\nimport { orderContext } from \"../../OrderContext\";\nimport SelectAddress from \"./SelectAddress\";\nimport AddressDetails from \"./AddressDetails\";\nimport AddressesList from \"./AddressesList\";\nimport { client_addAddress, client_updateAddress } from \"../../../../../../lib/api/client/clientOrder\";\nexport default class ShippingAddress extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"setData\", (newData, cb) => {\n      this.setState(state => {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: _objectSpread(_objectSpread({}, state.data), newData)\n        });\n      }, () => {\n        if (cb) {\n          cb();\n        }\n      });\n    });\n\n    _defineProperty(this, \"addNewAddress\", async cb => {\n      if (this.state.data.isUpdate) {\n        try {\n          const result = await client_updateAddress({\n            addressId: this.state.data.addressId,\n            transfereeMobile: this.state.data.mobileNumber,\n            postalCode: this.state.data.postalCode,\n            address: this.state.data.address,\n            locationX: this.state.data.lat,\n            locationY: this.state.data.lng,\n            transfereeName: this.state.data.firstname,\n            transfereeFamily: this.state.data.lastname\n          });\n\n          if (result.status === 200) {\n            cb && cb();\n          }\n        } catch (err) {}\n      } else {\n        try {\n          const result = await client_addAddress({\n            transfereeMobile: this.state.data.mobileNumber,\n            postalCode: this.state.data.postalCode,\n            address: this.state.data.address,\n            locationX: this.state.data.lat,\n            locationY: this.state.data.lng,\n            transfereeName: this.state.data.firstname,\n            transfereeFamily: this.state.data.lastname\n          });\n\n          if (result.status === 200) {\n            this.setData({\n              addressId: result.result.addressId,\n              requestId: result.result.requestId\n            }, () => {\n              cb && cb();\n            });\n          }\n        } catch (err) {}\n      }\n    });\n\n    _defineProperty(this, \"handleContinueClick\", () => {\n      this.bool ? this.handleSituation(VERIFY_PHONE) : this.context.handleStep(COMPLETE_AND_NEXT);\n      this.bool = false;\n    });\n\n    this.state = {\n      situation: COMPLETE,\n      get_address_Loading: false,\n      data: {\n        addressId: null,\n        requestId: null,\n        isUpdate: false,\n        address: null,\n        iso: null,\n        phoneCode: null,\n        firstname: null,\n        lastname: null,\n        postalCode: null,\n        mobileNumber: null,\n        lat: null,\n        lng: null\n      }\n    }; // for test\n\n    this.bool = true; ////\n\n    this.handleSituation = this.handleSituation.bind(this);\n  }\n\n  handleSituation(type) {\n    let situation;\n\n    switch (type) {\n      case CHANGE_PHONE:\n        situation = CHANGE_PHONE;\n        break;\n\n      case COMPLETE:\n        situation = COMPLETE;\n        break;\n\n      case VERIFY_PHONE:\n        situation = VERIFY_PHONE;\n        break;\n\n      case GET_ADDRESS_DETAIL:\n        situation = GET_ADDRESS_DETAIL;\n        break;\n\n      case SELECT_ADDRESS:\n        situation = SELECT_ADDRESS;\n        break;\n\n      default:\n        situation = COMPLETE;\n        break;\n    }\n\n    this.setState({\n      situation\n    });\n  }\n\n  render() {\n    let content;\n    const situation = this.state.situation;\n\n    switch (situation) {\n      case COMPLETE:\n        content = __jsx(AddressesList, {\n          setData: this.setData,\n          handleSituation: this.handleSituation,\n          handleOrderStep: this.props.handleOrderStep\n        });\n        break;\n\n      case VERIFY_PHONE:\n        content = __jsx(VerifyPhone, {\n          setData: this.setData,\n          currdata: this.state.data,\n          handleSituation: this.handleSituation\n        });\n        break;\n\n      case CHANGE_PHONE:\n        content = __jsx(ChangePhone, {\n          setData: this.setData,\n          handleSituation: this.handleSituation,\n          currdata: this.state.data\n        });\n        break;\n\n      case SELECT_ADDRESS:\n        content = __jsx(SelectAddress, {\n          handleSituation: this.handleSituation,\n          setData: this.setData,\n          lat: this.state.data.lat,\n          lng: this.state.data.lng\n        });\n        break;\n\n      case GET_ADDRESS_DETAIL:\n        content = __jsx(AddressDetails, {\n          addAddress: this.addNewAddress,\n          setData: this.setData,\n          handleSituation: this.handleSituation,\n          currdata: this.state.data\n        });\n        break;\n\n      default:\n        content = this.renderAddresses();\n        break;\n    }\n\n    return __jsx(React.Fragment, null, __jsx(SwitchTransition, null, __jsx(CSSTransition, {\n      key: this.state.situation,\n      key: this.state.situation,\n      classNames: \"user-panel__routes\",\n      timeout: 200\n    }, content)));\n  }\n\n}\n\n_defineProperty(ShippingAddress, \"contextType\", orderContext);","map":null,"metadata":{},"sourceType":"module"}