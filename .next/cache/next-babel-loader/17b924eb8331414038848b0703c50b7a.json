{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { LocalizeProvider, Translate } from \"react-localize-redux\";\nimport { connect } from \"react-redux\";\nimport { wrapper } from \"../../../store\";\nimport { translationsPayload } from \"../../../translations/payload\";\nimport authTranslations from \"../../../translations/auth-translations.json\";\nimport Auth from \"../../../components/app/pages/Auth\";\nimport { withRouter } from \"next/router\";\nimport Cookies from \"js-cookie\";\nimport { isServer } from \"../../../lib/isServer\";\nimport { client_authDetials } from \"../../../lib/api/client/clientCustomer\";\nimport Head from \"next/head\";\nimport { useUserAgent } from \"next-useragent\";\n\nclass AuthPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (!isServer()) {\n      this.redirect = false;\n      const token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name);\n\n      if (token) {\n        this.props.router.push(`/${this.props.curr}-${this.props.lang}/panel/profile`);\n        this.redirect = true;\n      }\n    }\n  }\n\n  render() {\n    if (this.redirect) {\n      return __jsx(\"p\", null, \"Redirecting...\");\n    }\n\n    return __jsx(React.Fragment, null, __jsx(LocalizeProvider, {\n      initialize: translationsPayload(authTranslations, this.props.lang)\n    }, __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      return __jsx(Head, null, __jsx(\"title\", null, t(\"@authtitle\")));\n    }), __jsx(Auth, {\n      lang: this.props.lang,\n      loc: this.props.router.asPath,\n      data: this.props.data,\n      isDesktop: this.props.ua.isDesktop\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nexport default connect(mapStateToProps)(withRouter(AuthPage));\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const Result = await Promise.all([client_authDetials()]);\n  const ua = useUserAgent(context.req.headers[\"user-agent\"]);\n  return {\n    props: {\n      ua,\n      data: Result[0].result\n    }\n  };\n}); // export const getStaticProps = wrapper.getStaticProps(\n//   async ({ params, store }) => {\n//     const lang = detectLang(params[\"lang-curr\"]);\n//     const curr = detectCurrency(params[\"lang-curr\"]);\n//     store.dispatch(updateLang(lang));\n//     store.dispatch(updateCurrency(curr));\n//     axiosClient.setLangAndCurrency(lang, curr);\n//     return {\n//       props: { lang, curr },\n//     };\n//   }\n// );\n// export async function getStaticPaths() {\n//   return {\n//     paths: [...langUsdParams],\n//     fallback: false, // See the \"fallback\" section below\n//   };\n// }","map":null,"metadata":{},"sourceType":"module"}