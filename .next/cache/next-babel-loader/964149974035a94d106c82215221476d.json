{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const ADD_CURRENCY = \"ADD_CURRENCY\";\nexport const ADD_LANG = \"ADD_LANG\";\nexport const LOGIN_CUSTOMER_LOADING = \"LOGIN_CUSTOMER_LOADING\";\nexport const SUCCE_LOGIN = \"SUCCE_LOGIN\";\nexport const ERROR_LOGIN = \"ERROR_LOGIN\";\nexport const LOADING = \"loading\";\nexport const IDLE = \"idle\";\nexport const SUCCEEDED = \"succeeded\";\nexport const ERROR = \"error\";\nexport const LOGOUT = \"logout\";\nexport const PREVLINK_CHANGE = \"PEREVLINK_CHANGE\";\nconst initalState = {\n  currency: {},\n  lang: {},\n  login: {\n    status: IDLE,\n    isLogin: false,\n    token: null,\n    error: null,\n    prevLink: null\n  },\n  register: {\n    status: IDLE\n  }\n};\nexport const selectLang = state => state.appConfig.lang.code;\nexport const selectCurr = state => state.appConfig.currency.code;\nexport const selectLogin = state => state.appConfig.login;\nexport const selectPrevLink = state => state.appConfig.login.prevLink;\nexport const appConfigReducer = (state = initalState, action) => {\n  switch (action.type) {\n    case ADD_CURRENCY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        currency: _objectSpread(_objectSpread({}, state.currency), {}, {\n          name: action.payload.currentCurrencyName,\n          code: action.payload.currentCurrencyCode\n        })\n      });\n\n    case ADD_LANG:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lang: _objectSpread(_objectSpread({}, state.lang), {}, {\n          name: action.payload.languageName,\n          code: action.payload.lang\n        })\n      });\n\n    case LOGIN_CUSTOMER_LOADING:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        login: _objectSpread(_objectSpread({}, state.login), {}, {\n          status: LOADING\n        })\n      });\n\n    case SUCCE_LOGIN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        login: _objectSpread(_objectSpread({}, state.login), {}, {\n          status: SUCCEEDED,\n          isLogin: true,\n          token: action.payload.token\n        })\n      });\n\n    case ERROR_LOGIN:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        login: _objectSpread(_objectSpread({}, state.login), {}, {\n          status: ERROR,\n          isLogin: false,\n          token: null,\n          error: action.payload.error\n        })\n      });\n\n    case LOGOUT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        login: _objectSpread(_objectSpread({}, state.login), {}, {\n          status: IDLE,\n          isLogin: false,\n          token: null\n        })\n      });\n\n    case PREVLINK_CHANGE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        login: _objectSpread(_objectSpread({}, state.login), {}, {\n          prevLink: action.payload.link\n        })\n      });\n\n    default:\n      return state;\n  }\n};\nexport const updateCurrency = code => {\n  let name;\n\n  switch (code) {\n    case \"usd\":\n      name = \"USD\";\n      break;\n\n    case \"bhd\":\n      name = \"BHD\";\n      break;\n\n    case \"tmn\":\n      name = \"TMN\";\n      break;\n\n    default:\n      break;\n  }\n\n  return {\n    type: ADD_CURRENCY,\n    payload: {\n      currentCurrencyName: name,\n      currentCurrencyCode: code\n    }\n  };\n};\nexport const updateLang = code => {\n  let name;\n\n  switch (code) {\n    case \"en\":\n      name = \"English\";\n      break;\n\n    case \"ar\":\n      name = \"Arabic\";\n      break;\n\n    case \"fa\":\n      name = \"Persion\";\n      break;\n\n    default:\n      break;\n  }\n\n  return {\n    type: ADD_LANG,\n    payload: {\n      languageName: name,\n      lang: code\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}