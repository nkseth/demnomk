{"ast":null,"code":"import { normalizeLangForHeader, possibleLangAndCur } from \"./langRoutes\";\nimport errors from \"./../translations/errors.json\";\nimport Cookies from \"js-cookie\";\nimport axiosClient from \"./api/axios\";\nexport var generateArrNumberRange = function generateArrNumberRange(from, to) {\n  var arr = [];\n  from = parseInt(from);\n  to = parseInt(to);\n  if (to > 10) to = 10;\n\n  for (var i = from; i <= to; i++) {\n    arr.push(i);\n  }\n\n  return arr;\n};\nexport var isAr = function isAr(code) {\n  if (code === possibleLangAndCur.langs.arabic.code) return true;\n  return false;\n};\nexport var getErrorMsg = function getErrorMsg(lang, id) {\n  var langId = 0;\n\n  if (possibleLangAndCur.langs.arabic.code === lang) {\n    langId = 1;\n  }\n\n  return errors[id][langId];\n};\nexport var setTokenCookie = function setTokenCookie(token) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.env.NEXT_PUBLIC_Token_Cookie_name;\n  Cookies.set(name, token, {\n    expires: parseInt(process.env.NEXT_PUBLIC_Cookies_expires_day),\n    domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain\n  });\n};\nexport var setCartCookie = function setCartCookie(id) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.env.NEXT_PUBLIC_Token_Cookie_name_cart;\n  Cookies.set(name, id, {\n    expires: parseInt(process.env.NEXT_PUBLIC_Cookies_expires_day_cart),\n    domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain_cart\n  });\n};\nexport var slugy = function slugy(str) {\n  if (str) str = str.replace(/\\s+/g, \"-\").toLowerCase();\n  return str;\n};\nexport var removeTokenCookie = function removeTokenCookie() {\n  var token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name);\n\n  if (token) {\n    Cookies.remove(process.env.NEXT_PUBLIC_Token_Cookie_name, {\n      domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain\n    });\n    axiosClient.setToken(null);\n  }\n};\nexport var removeCartCookie = function removeCartCookie() {\n  var token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name_cart);\n\n  if (token) {\n    Cookies.remove(process.env.NEXT_PUBLIC_Token_Cookie_name_cart, {\n      domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain_cart\n    });\n    axiosClient.setCartId(null);\n  }\n};\nexport var setCouponCookie = function setCouponCookie(token) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.env.NEXT_PUBLIC_Token_Cookie_name_coupon;\n  Cookies.set(name, token, {\n    expires: parseInt(process.env.NEXT_PUBLIC_Cookies_expires_day_coupon),\n    domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain_coupon\n  });\n};\nexport var removeCouponCookie = function removeCouponCookie() {\n  var token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name_coupon);\n\n  if (token) {\n    Cookies.remove(process.env.NEXT_PUBLIC_Token_Cookie_name_coupon, {\n      domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain_coupon\n    });\n  }\n};\nexport var trimText = function trimText(text) {\n  var maxLenght = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 55;\n  if (!text || text.length === 0) return \"\";\n  var newText = text;\n\n  if (text.length > maxLenght) {\n    newText = text.substring(0, maxLenght) + \"...\";\n  }\n\n  return newText;\n};\nexport var roundDecimalNumber = function roundDecimalNumber(number) {\n  if (number == 0) return 0;\n\n  if (number < 10) {\n    if (number < 5) {\n      return number;\n    } else {\n      return 5;\n    }\n  }\n\n  if (number < 100) {\n    var tempNumber = number / 10;\n    tempNumber = parseInt(tempNumber);\n    tempNumber = tempNumber * 10;\n    return tempNumber;\n  }\n\n  if (number < 1000) {\n    var _tempNumber = number / 100;\n\n    _tempNumber = parseInt(_tempNumber);\n    _tempNumber = _tempNumber * 100;\n    return _tempNumber;\n  }\n\n  if (number < 10000) {\n    var _tempNumber2 = number / 100;\n\n    _tempNumber2 = parseInt(_tempNumber2);\n    _tempNumber2 = _tempNumber2 * 100;\n    return _tempNumber2;\n  }\n\n  if (number < 100000) {\n    var _tempNumber3 = number / 100;\n\n    _tempNumber3 = parseInt(_tempNumber3);\n    _tempNumber3 = _tempNumber3 * 100;\n    return _tempNumber3;\n  }\n\n  if (number < 1000000) {\n    var _tempNumber4 = number / 1000;\n\n    _tempNumber4 = parseInt(_tempNumber4);\n    _tempNumber4 = _tempNumber4 * 1000;\n    return _tempNumber4;\n  }\n\n  if (number < 1000000) {\n    var _tempNumber5 = number / 1000;\n\n    _tempNumber5 = parseInt(_tempNumber5);\n    _tempNumber5 = _tempNumber5 * 1000;\n    return _tempNumber5;\n  }\n\n  return number;\n};\nexport var trimTextLonger = function trimTextLonger(text) {\n  if (!text || text.length === 0) return \"\";\n  var newText = text;\n\n  if (text.length > 60) {\n    newText = text.substring(0, 60) + \"...\";\n  }\n\n  return newText;\n};\nexport var formatMoney = function formatMoney(amount) {\n  var decimalCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \".\";\n  var thousands = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \",\";\n\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n    var negativeSign = amount < 0 ? \"-\" : \"\";\n    var i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    var j = i.length > 3 ? i.length % 3 : 0;\n    return negativeSign + (j ? i.substr(0, j) + thousands : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n  } catch (e) {\n    console.log(e);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}