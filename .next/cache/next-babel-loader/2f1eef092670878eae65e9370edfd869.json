{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport isEmail from \"validator/lib/isEmail\";\nimport isLength from \"validator/lib/isLength\";\nimport isCreditCard from \"validator/lib/isCreditCard\";\nimport isEmpty from \"validator/lib/isEmpty\";\nimport isPostalCode from \"validator/lib/isPostalCode\";\nimport { getErrorMsg } from \"./helpers\";\nimport { PhoneNumber, PhoneNumberUtil } from \"google-libphonenumber\";\nexport const validateEmail = ({\n  name,\n  value,\n  handler,\n  lang\n}) => {\n  if (handler) {\n    if (isEmail(value)) handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: false\n      });\n    });else handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: getErrorMsg(lang, \"email-not-valid\")\n      });\n    });\n  } else {\n    if (isEmail(value)) return true;else return false;\n  }\n};\nexport const validatePassword = ({\n  name,\n  value,\n  handler,\n  lang\n}) => {\n  if (handler) {\n    if (isLength(value, {\n      min: 6,\n      max: 50\n    })) handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: false\n      });\n    });else handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: getErrorMsg(lang, \"pass-not-valid\")\n      });\n    });\n  } else {\n    if (isLength(value, {\n      min: 6,\n      max: 50\n    })) return true;else return false;\n  }\n};\nexport const validatePasswordCreateShop = ({\n  name,\n  value,\n  handler,\n  lang\n}) => {\n  if (handler) {\n    if (isLength(value, {\n      min: 8,\n      max: 50\n    })) handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: false\n      });\n    });else handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: getErrorMsg(lang, \"pass-not-valid-create-shop\")\n      });\n    });\n  } else {\n    if (isLength(value, {\n      min: 8,\n      max: 50\n    })) return true;else return false;\n  }\n};\nexport const validateConfirmPassword = ({\n  name,\n  value1 = \"\",\n  value2 = \"\",\n  handler,\n  lang\n}) => {\n  if (handler) {\n    if (value1 === value2) handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: false\n      });\n    });else handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: getErrorMsg(lang, \"confirm-pass\")\n      });\n    });\n  } else {\n    if (value1 === value2) return true;else return false;\n  }\n};\nexport const validateEmpty = ({\n  name,\n  value,\n  handler,\n  lang\n}) => {\n  if (handler) {\n    if (!isEmpty(value)) handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: false\n      });\n    });else handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: getErrorMsg(lang, \"empty-filed\")\n      });\n    });\n  } else {\n    if (!isEmpty(value)) return true;else return false;\n  }\n};\nexport const validatePhoneNumber = ({\n  name,\n  value,\n  handler,\n  lang,\n  iso\n}) => {\n  const phoneUtil = PhoneNumberUtil.getInstance();\n\n  if (!iso || isEmpty(iso)) {\n    if (handler) {\n      handler(state => {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [name]: getErrorMsg(lang, \"select-region-first\")\n        });\n      });\n      return;\n    } else {\n      return false;\n    }\n  }\n\n  try {\n    const number = phoneUtil.parse(value, iso);\n    phoneUtil.isValidNumber(number);\n    const re = phoneUtil.isValidNumberForRegion(number, iso);\n\n    if (handler) {\n      if (re) handler(state => {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [name]: false\n        });\n      });else handler(state => {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [name]: getErrorMsg(lang, \"phone-not-match-country\")\n        });\n      });\n    } else {\n      if (re) return true;else return false;\n    }\n  } catch (err) {\n    if (handler) {\n      handler(state => {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [name]: getErrorMsg(lang, \"phone-not-valid\")\n        });\n      });\n    } else {\n      return false;\n    }\n  }\n};\nexport const validatePostalCode = ({\n  name,\n  value,\n  handler,\n  lang\n}) => {\n  if (handler) {\n    if (isPostalCode(value)) handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: false\n      });\n    });else handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: getErrorMsg(lang, \"postal-code-filed\")\n      });\n    });\n  } else {\n    if (isPostalCode(value)) return true;else return false;\n  }\n};\nexport const validateCreditCard = ({\n  name,\n  value,\n  handler,\n  lang\n}) => {\n  if (handler) {\n    if (isCreditCard(value)) handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: false\n      });\n    });else handler(state => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [name]: getErrorMsg(lang, \"credi-card-filed\")\n      });\n    });\n  } else {\n    if (isCreditCard(value)) return true;else return false;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}