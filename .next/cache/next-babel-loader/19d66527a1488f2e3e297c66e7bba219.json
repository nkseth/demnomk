{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice, createAsyncThunk, createAction } from \"@reduxjs/toolkit\";\nimport { client_fetchProvider } from \"../../../../lib/api/client/clientProvider\";\nimport { providerPageFiltersDefaults } from \"../../../../lib/querys\";\nexport const LOADING = \"loading\";\nexport const IDLE = \"idle\";\nexport const SUCCEEDED = \"succeeded\";\nexport const ERROR = \"error\";\nexport const initialState = {\n  status: IDLE,\n  error: null,\n  provider: {\n    goods: {\n      count: 0,\n      data: []\n    }\n  },\n  providerName: \"\",\n  changeUrl: false,\n  filters: providerPageFiltersDefaults\n}; //// selectors\n\nexport const selectFilters = state => state.provider.filters;\nexport const selectGoods = state => state.provider.provider.goods || {};\nexport const selectProvider = state => state.provider.provider; // export const selectSearch = (state) => state.provider.provider;\n\nexport const selectSpecs = state => state.provider.provider.specs;\nexport const selectBrands = state => state.provider.provider.brands;\nexport const selectShop = state => state.provider.provider.shop;\nexport const selectShopSlider = state => state.provider.provider.shop.shopSlider;\nexport const selectChangeUrl = state => state.provider.changeUrl;\nexport const selectParentCategory = state => state.provider.provider.parentCategory;\nexport const selectChildCategory = state => state.provider.provider.childCategory;\nexport const selectProviderName = state => state.provider.providerName;\nexport const selectProviderStatus = state => state.provider.status; /// server action creator\n\nexport const serverProviderUpdate = createAction(\"provider/serverUpdate\"); //// thunk actions\n\nexport const fetchProvider = createAsyncThunk(\"provider/fetchProvider\", async (data, {\n  dispatch,\n  getState\n}) => {\n  dispatch(changeUrl());\n  const result = await client_fetchProvider(data, selectProviderName(getState()));\n  return result;\n}); /// search slice\n\nconst providerSlice = createSlice({\n  name: \"provider\",\n  initialState,\n  reducers: {\n    changeUrl(state) {\n      state.changeUrl = !state.changeUrl;\n    },\n\n    orderByTypeAdded(state, action) {\n      state.filters.orderByType = action.payload;\n    },\n\n    pageSizeAdded(state, action) {\n      state.filters.pageSize = action.payload;\n    },\n\n    priceAdded(state, action) {\n      state.filters.fromPrice = action.payload.fromPrice;\n      state.filters.toPrice = action.payload.toPrice;\n    },\n\n    goodsCreatedDayAdded(state, action) {\n      state.filters.goodsCreatedDay = action.payload;\n    },\n\n    goodsOptionsAdded(state, action) {\n      state.filters.optionIds = action.payload;\n    },\n\n    brandAdded(state, action) {\n      state.filters.brandId = action.payload;\n    },\n\n    pageChanged(state, action) {\n      state.filters.pageNumber = action.payload;\n    },\n\n    mobileFilterUpdate(state, action) {\n      const brandsId = action.payload.brandsId;\n      const specsId = action.payload.specsId;\n      const arrival = action.payload.arrival;\n      const priceFrom = action.payload.price.min || state.filters.fromPrice;\n      const priceTo = action.payload.price.max || state.filters.toPrice;\n      state.filters.brandId = brandsId;\n      state.filters.optionIds = specsId;\n      state.filters.goodsCreatedDay = parseInt(arrival);\n      state.filters.fromPrice = parseInt(priceFrom);\n      state.filters.toPrice = parseInt(priceTo);\n    }\n\n  },\n  extraReducers: {\n    [fetchProvider.pending]: (state, action) => {\n      state.status = LOADING;\n    },\n    [fetchProvider.fulfilled]: (state, action) => {\n      var _result$specs, _result$brands;\n\n      state.status = SUCCEEDED;\n      const result = action.payload.result; //// generate optimize specs\n\n      const newSpecs = {};\n      (_result$specs = result.specs) === null || _result$specs === void 0 ? void 0 : _result$specs.forEach(spec => {\n        var _spec$options;\n\n        const newOptions = {};\n        (_spec$options = spec.options) === null || _spec$options === void 0 ? void 0 : _spec$options.forEach(option => {\n          newOptions[option.optionId] = option;\n        });\n        newSpecs[spec.specId] = _objectSpread(_objectSpread({}, spec), {}, {\n          options: newOptions\n        });\n      }); //// generate optimized brands\n\n      const newBrands = {};\n      (_result$brands = result.brands) === null || _result$brands === void 0 ? void 0 : _result$brands.forEach(brand => {\n        newBrands[brand.brandId] = brand;\n      });\n      result.specs = newSpecs;\n      result.brands = newBrands;\n      state.provider = result;\n    },\n    [fetchProvider.rejected]: (state, action) => {\n      state.status = ERROR;\n    },\n    [serverProviderUpdate]: (state, action) => {\n      var _result$specs2, _result$brands2;\n\n      const result = action.payload.provider;\n      const newSpecs = {};\n      (_result$specs2 = result.specs) === null || _result$specs2 === void 0 ? void 0 : _result$specs2.forEach(spec => {\n        var _spec$options2;\n\n        const newOptions = {};\n        (_spec$options2 = spec.options) === null || _spec$options2 === void 0 ? void 0 : _spec$options2.forEach(option => {\n          newOptions[option.optionId] = option;\n        });\n        newSpecs[spec.specId] = _objectSpread(_objectSpread({}, spec), {}, {\n          options: newOptions\n        });\n      }); //// generate optimized brands\n\n      const newBrands = {};\n      (_result$brands2 = result.brands) === null || _result$brands2 === void 0 ? void 0 : _result$brands2.forEach(brand => {\n        newBrands[brand.brandId] = brand;\n      });\n      result.brands = newBrands;\n      result.specs = newSpecs;\n      state.status = SUCCEEDED;\n      state.provider = result;\n      state.filters = action.payload.filters;\n      state.providerName = action.payload.providerName;\n    }\n  }\n});\nexport const {\n  orderByTypeAdded,\n  pageSizeAdded,\n  priceAdded,\n  goodsCreatedDayAdded,\n  changeUrl,\n  goodsOptionsAdded,\n  brandAdded,\n  mobileFilterUpdate,\n  pageChanged\n} = providerSlice.actions;\nexport const orderByTypeAddedAction = orderType => {\n  return (dispatch, getState) => {\n    dispatch(orderByTypeAdded(orderType));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport const pageSizeAddedAction = pageSize => {\n  return (dispatch, getState) => {\n    dispatch(pageSizeAdded(pageSize));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport const priceAddedAction = (from, to) => {\n  return (dispatch, getState) => {\n    dispatch(priceAdded({\n      fromPrice: from,\n      toPrice: to\n    }));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport const goodsCreatedDayAddedAction = goodsCreatedDay => {\n  return (dispatch, getState) => {\n    if (!goodsCreatedDay) goodsCreatedDay = initialState.filters.goodsCreatedDay;\n    dispatch(goodsCreatedDayAdded(parseInt(goodsCreatedDay)));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport const goodsOptionsAddedAction = options => {\n  return (dispatch, getState) => {\n    dispatch(goodsOptionsAdded(options));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport const BrandAddedAction = brands => {\n  return (dispatch, getState) => {\n    dispatch(brandAdded(brands));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport const brandsRemovedAction = id => {\n  return (dispatch, getState) => {\n    const curr_state = getState();\n    const newBrands = selectFilters(curr_state).brandId.filter(brandId => {\n      return brandId !== id;\n    });\n    dispatch(brandAdded(newBrands));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport const pageChangedAction = pageNumber => {\n  return (dispatch, getState) => {\n    dispatch(pageChanged(pageNumber));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport const mobileFilterUpdateAction = newFilters => {\n  return (dispatch, getState) => {\n    dispatch(mobileFilterUpdate(newFilters));\n    dispatch(fetchProvider(selectFilters(getState())));\n  };\n};\nexport default providerSlice.reducer;","map":null,"metadata":{},"sourceType":"module"}