{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useState } from \"react\";\nimport { BoxStyle2 } from \"../../../common\";\nimport VendorSearchIcon from \"../../../../assets/icons/vendor-search-icon.svg\";\nimport { Translate, withLocalize } from \"react-localize-redux\";\nimport vendorPhoneIcon from \"../../../../assets/icons/img-vendor-phonecall.svg\";\nimport vendorLocation from \"../../../../assets/icons/img-location.svg\";\nimport VendorBtnArrow from \"../../../../assets/icons/vendor-down-arrow.svg\";\nimport Pagination from \"react-js-pagination\";\nimport { client_fetchVendors } from \"../../../../lib/api/client/clientVendors\";\nimport VendorLoading from \"./VendorLoading\";\nimport { PhoneNumberFormat, PhoneNumberUtil } from \"google-libphonenumber\";\nimport { EmptySearch } from \"../Search/SearchLayout\";\nimport { selectCurr, selectLang } from \"../../../../appConfigSlice\";\nimport { connect } from \"react-redux\";\nimport Link from \"next/link\";\nimport Select from \"react-select\";\nimport { client__fetchCountries } from \"../../../../lib/api/client/clientCommon\";\nimport { client_getActiveCities, client_getActiveProvince } from \"../../../../lib/api/client/clientShop\";\n\nclass Vendors extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleCatChange\", selected => {\n      this.filters.CategoryId = selected.value;\n      this.getVendors();\n    });\n\n    _defineProperty(this, \"handleSortChange\", selected => {\n      this.filters.Sort = selected.value;\n      this.getVendors();\n    });\n\n    _defineProperty(this, \"handleSearchChange\", e => {\n      this.filters.StoreName = e.target.value;\n      this.setState({\n        search: e.target.value\n      }, () => {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n          this.timeout = null;\n        }\n\n        this.timeout = setTimeout(() => {\n          this.getVendors();\n        }, 300);\n      });\n    });\n\n    _defineProperty(this, \"getVendors\", async () => {\n      if (this.state.vendorsLoading) return;\n      this.setState({\n        vendorsLoading: true\n      });\n\n      try {\n        const res = await client_fetchVendors(this.filters);\n\n        if (res.status == 200) {\n          this.setState({\n            vendorsLoading: false,\n            vendors: res.result\n          });\n        }\n      } catch (err) {\n        console.log(err);\n        this.setState({\n          vendorsLoading: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"printPhone\", (phone, iso) => {\n      try {\n        const number = this.phoneUtil.parseAndKeepRawInput(phone, iso);\n        return this.phoneUtil.format(number, this.PNF.INTERNATIONAL);\n      } catch (err) {\n        return phone;\n      }\n    });\n\n    _defineProperty(this, \"handleChangePageNumber\", number => {\n      this.filters.PageNumber = number;\n      this.getVendors();\n    });\n\n    _defineProperty(this, \"handleCountryClick\", async item => {\n      this.filters.CountryId = item.value;\n      this.filters.CityId = null;\n      this.filters.ProvinceId = null;\n      this.setState({\n        selectedCity: {\n          value: null,\n          label: this.props.translate(\"all\")\n        },\n        selectedProvince: {\n          value: null,\n          label: this.props.translate(\"all\")\n        }\n      });\n      this.getVendors();\n\n      if (item.value == null) {\n        return;\n      }\n\n      const result = await client_getActiveProvince(item.value);\n      let provinces = [];\n      provinces.push({\n        value: null,\n        label: this.props.translate(\"all\")\n      });\n      result.result.forEach(item => {\n        provinces.push({\n          value: item.provinceId,\n          label: item.provinceName\n        });\n      });\n      this.setState({\n        provinces\n      });\n    });\n\n    _defineProperty(this, \"handleProvinceClick\", async item => {\n      this.filters.ProvinceId = item.value;\n      this.filters.CityId = null;\n      this.setState({\n        selectedCity: {\n          value: null,\n          label: this.props.translate(\"all\")\n        }\n      });\n      this.getVendors();\n\n      if (item.value == null) {\n        return;\n      }\n\n      const result = await client_getActiveCities(item.value);\n      let cities = [];\n      cities.push({\n        value: null,\n        label: this.props.translate(\"all\")\n      });\n      result.result.forEach(item => {\n        cities.push({\n          value: item.cityId,\n          label: item.cityTitle\n        });\n      });\n      this.setState({\n        cities\n      });\n    });\n\n    _defineProperty(this, \"handleCityClick\", async item => {\n      this.setState({\n        selectedCity: item\n      });\n      this.filters.CityId = item.value;\n      this.getVendors();\n    });\n\n    const catsOptions = [{\n      value: 0,\n      label: this.props.translate(\"cats.allCats\")\n    }];\n\n    for (let cat of this.props.cats) {\n      catsOptions.push({\n        value: cat.categoryId,\n        label: cat.categoryTitle\n      });\n    }\n\n    this.catsOptions = catsOptions;\n    this.sortOptions = [{\n      value: 0,\n      label: this.props.translate(\"sort.MostPopular\")\n    }, {\n      value: 1,\n      label: this.props.translate(\"sort.MostRecent\")\n    }, {\n      value: 2,\n      label: this.props.translate(\"sort.MostReviewed\")\n    }];\n    this.filters = {\n      StoreName: \"\",\n      Sort: 0,\n      CategoryId: 0,\n      PageNumber: 1,\n      PageSize: 9,\n      CityId: null,\n      ProvinceId: null,\n      CountryId: null\n    };\n    this.state = {\n      search: \"\",\n      vendors: {\n        count: 0,\n        data: []\n      },\n      vendorsLoading: false,\n      countries: [],\n      provinces: [],\n      cities: [],\n      selectedCity: {\n        value: null,\n        label: this.props.translate(\"all\")\n      },\n      selectedProvince: {\n        value: null,\n        label: this.props.translate(\"all\")\n      }\n    };\n    this.PNF = PhoneNumberFormat;\n    this.phoneUtil = PhoneNumberUtil.getInstance();\n    this.phonenumber = null;\n    this.timeout = null;\n  }\n\n  componentDidMount() {\n    this.getVendors();\n    client__fetchCountries().then(res => {\n      const country = [];\n      country.push({\n        value: null,\n        label: this.props.translate(\"all\")\n      });\n\n      for (let item of res.result) {\n        country.push({\n          value: item.countryId,\n          label: item.countryTitle\n        });\n      }\n\n      this.setState({\n        countries: country\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    const count = this.state.vendors.count;\n    const vendors = this.state.vendors.data;\n    const itemCount = this.state.vendors.data.length;\n    return __jsx(\"div\", {\n      className: \"vendors container siteWidthContainer\"\n    }, __jsx(BoxStyle2, null, __jsx(\"header\", {\n      className: \"filters-header\"\n    }, __jsx(\"div\", {\n      className: \"row no-gutters align-items-center justify-content-between\"\n    }, __jsx(\"div\", {\n      className: \"col-12 mb-lg-0 mb-3 col-lg-2\"\n    }, __jsx(\"div\", {\n      className: \"search-input\"\n    }, __jsx(VendorSearchIcon, {\n      className: \"search-input__icon\"\n    }), __jsx(Translate, null, ({\n      translate: t\n    }) => {\n      return __jsx(\"input\", {\n        type: \"text\",\n        placeholder: t(\"search-placeholder\"),\n        className: \"search-input__input\",\n        value: this.state.search,\n        onChange: this.handleSearchChange\n      });\n    })), __jsx(\"div\", {\n      className: \"filters-header__count-text mt-3\"\n    }, __jsx(Translate, {\n      id: \"total-store\"\n    }), __jsx(\"span\", {\n      className: \"filters-header__count\"\n    }, itemCount))), __jsx(\"div\", {\n      className: \"mb-3 mb-lg-0 col-12 col-xl-10\"\n    }, __jsx(\"div\", {\n      className: \"filters-header__right-cnt d-flex flex-wrap\"\n    }, __jsx(\"div\", {\n      className: \"filters-header__dropdown-cnt\"\n    }, __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text align-center\"\n    }, __jsx(Translate, {\n      id: \"country\"\n    })), __jsx(Select, {\n      className: \"filters-header__dropdown\",\n      classNamePrefix: \"vendor\",\n      options: this.state.countries,\n      onChange: this.handleCountryClick,\n      placeholder: this.props.translate(\"all\")\n    })), __jsx(\"div\", {\n      className: \"filters-header__dropdown-cnt\"\n    }, __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text align-center\"\n    }, __jsx(Translate, {\n      id: \"province\"\n    })), __jsx(Select, {\n      className: \"filters-header__dropdown\",\n      classNamePrefix: \"vendor\",\n      options: this.state.provinces,\n      onChange: this.handleProvinceClick,\n      placeholder: this.props.translate(\"all\")\n    })), __jsx(\"div\", {\n      className: \"filters-header__dropdown-cnt\"\n    }, __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text align-center\"\n    }, __jsx(Translate, {\n      id: \"city\"\n    })), __jsx(Select, {\n      className: \"filters-header__dropdown\",\n      classNamePrefix: \"vendor\",\n      options: this.state.cities,\n      value: this.state.selectedCity,\n      placeholder: this.props.translate(\"all\"),\n      onChange: this.handleCityClick\n    })), __jsx(\"div\", {\n      className: \"filters-header__dropdown-cnt cats\"\n    }, __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text align-center\"\n    }, __jsx(Translate, {\n      id: \"category2\"\n    })), __jsx(Select, {\n      className: \"filters-header__dropdown filters-header__dropdown--big\",\n      classNamePrefix: \"vendor\",\n      onChange: this.handleCatChange,\n      options: this.catsOptions,\n      placeholder: this.catsOptions[0].label\n    })), __jsx(\"div\", {\n      className: \"filters-header__dropdown-cnt\"\n    }, __jsx(\"span\", {\n      className: \"searchBoxHeader__header-text align-center\"\n    }, __jsx(Translate, {\n      id: \"sortby\"\n    })), __jsx(Select, {\n      className: \"filters-header__dropdown\",\n      classNamePrefix: \"vendor\",\n      onChange: this.handleSortChange,\n      options: this.sortOptions,\n      placeholder: this.sortOptions[0].label\n    }))))))), !this.state.vendorsLoading ? __jsx(\"section\", null, __jsx(\"div\", {\n      className: \"row no-gutters vendor__row\"\n    }, count <= 0 && __jsx(EmptySearch, null), vendors.map(vendor => {\n      return __jsx(\"div\", {\n        className: \"col-12 col-sm-6 col-lg-4 mt-4 pl-4\"\n      }, __jsx(\"article\", {\n        className: \"vendor\"\n      }, __jsx(\"div\", {\n        className: \"vendor__img-cnt\"\n      }, vendor.profileImage && __jsx(\"img\", {\n        className: \"vendor__img\",\n        src: `${process.env.NEXT_PUBLIC_Shop_PREFIX}/${vendor.shopId}/${vendor.profileImage}`,\n        alt: \"profile logo\"\n      }), __jsx(\"div\", {\n        className: \"vendor__cover\"\n      })), __jsx(\"div\", {\n        className: \"vendor__contents\"\n      }, __jsx(\"h2\", {\n        className: \"vendor__name\"\n      }, vendor.storeName), __jsx(\"div\", {\n        className: \"vendor__texts-cnt\"\n      }, vendor.address && __jsx(\"p\", {\n        className: \"vendor__address\"\n      }, __jsx(\"img\", {\n        src: vendorLocation\n      }), vendor.address), vendor.phone && __jsx(\"p\", {\n        className: \"vendor__phone\"\n      }, __jsx(\"img\", {\n        src: vendorPhoneIcon\n      }), this.printPhone(vendor.phone, vendor.iso)))), __jsx(Link, {\n        href: `/${this.props.curr}-${this.props.lang}/${vendor.vendorUrlid}`\n      }, __jsx(\"a\", {\n        className: \"vendor__btn\"\n      }, __jsx(Translate, {\n        id: \"visit-store\"\n      }), __jsx(VendorBtnArrow, {\n        className: \"vendor__btn-icon\"\n      })))));\n    })), __jsx(\"div\", {\n      className: \"vendor__pagination-cnt\"\n    }, __jsx(Pagination, {\n      activePage: this.filters.PageNumber,\n      itemsCountPerPage: 9,\n      totalItemsCount: count,\n      itemClass: \"pager__item\",\n      innerClass: \"pager\",\n      linkClass: \"pager__link\",\n      activeLinkClass: \"active\",\n      hideFirstLastPages: true,\n      pageRangeDisplayed: 4,\n      onChange: pageNumber => {\n        this.handleChangePageNumber(pageNumber);\n      }\n    }))) : __jsx(VendorLoading, null));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    lang: selectLang(state),\n    curr: selectCurr(state)\n  };\n};\n\nexport default connect(mapStateToProps)(withLocalize(Vendors));","map":null,"metadata":{},"sourceType":"module"}