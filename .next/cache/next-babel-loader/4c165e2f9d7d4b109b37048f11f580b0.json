{"ast":null,"code":"var __jsx = React.createElement;\nimport Link from \"next/link\";\nimport React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurr, selectLang } from \"../../../../../appConfigSlice\";\nimport { SEARCH_TYPE_SEARCH } from \"../../../../../lib/querys\";\nimport SearchIcon from \"../../../../../assets/icons/search-gray.svg\";\nimport { List, WindowScroller } from \"react-virtualized\";\nimport { client_categoryBrands } from \"../../../../../lib/api/client/clientCommon\";\nimport { brandsPageSize } from \"../Categories\";\nimport { Translate } from \"react-localize-redux\";\nimport { Loading } from \"../../../../common\";\nlet SearchTimer = null;\nconst brandQuery = {\n  pageSize: null,\n  pageNumber: 1,\n  catId: null,\n  search: \"\"\n};\nlet resCount = 0;\n\nconst Brands = ({\n  brands,\n  catId2\n}) => {\n  const lang = useSelector(selectLang);\n  const curr = useSelector(selectCurr); // const [search, setSearch] = useState(\"\");\n\n  const {\n    0: brandsList,\n    1: setbrandsList\n  } = useState(brands);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: seeloading,\n    1: setSeeLoading\n  } = useState(false);\n  brandQuery.catId = catId2;\n  brandQuery.pageSize = brandsPageSize; // const rowRenderer = ({\n  //   index, // Index of row\n  //   isScrolling, // The List is currently being scrolled\n  //   isVisible, // This row is visible within the List (eg it is not an overscanned row)\n  //   key, // Unique key within array of rendered rows\n  //   parent, // Reference to the parent List (instance)\n  //   style, // Style object to be applied to row (to position it);\n  //   // This must be passed through to the rendered row element.\n  // }) => {\n  //   // if (search && brands[index].brandTitle.toLowerCase().includes(search)) {\n  //   return (\n  //     <li key={brandsList[index].brandId} style={style}>\n  //       <Link\n  //         href={`/${curr}-${lang}/search?brandId=${brandsList[index].brandId}&type=${SEARCH_TYPE_SEARCH}`}\n  //       >\n  //         <a className=\"categories__list-link\">\n  //           {brandsList[index].brandTitle}\n  //         </a>\n  //       </Link>\n  //     </li>\n  //   );\n  //   // }\n  // };\n\n  const handleSearch = async e => {\n    const q = e.target.value;\n    brandQuery.search = q;\n    brandQuery.pageNumber = 1;\n\n    if (SearchTimer) {\n      clearTimeout(SearchTimer);\n      SearchTimer = null;\n    }\n\n    const callback = async brandQuery => {\n      setLoading(true);\n\n      try {\n        const res = await client_categoryBrands(brandQuery);\n\n        if (res.result) {\n          resCount = res.result.length;\n          setbrandsList(res.result);\n          setLoading(false);\n        }\n      } catch (er) {\n        setbrandsList([]);\n        setLoading(false);\n      }\n    };\n\n    SearchTimer = setTimeout(callback.bind(null, brandQuery), 500);\n  };\n\n  const handleSeeMoreClick = async e => {\n    e.preventDefault();\n    if (loading) return;\n    setSeeLoading(true);\n    brandQuery.pageNumber = brandQuery.pageNumber + 1;\n\n    try {\n      const res = await client_categoryBrands(brandQuery);\n\n      if (res.result) {\n        resCount = res.result.length;\n        setbrandsList([...brandsList, ...res.result]);\n        setSeeLoading(false);\n      }\n    } catch (err) {\n      console.log(err);\n      setSeeLoading(false);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"checklist__search\"\n  }, __jsx(SearchIcon, {\n    className: \"checklist__search-input-icon\"\n  }), __jsx(\"input\", {\n    onChange: handleSearch,\n    type: \"text\" // value={search}\n    ,\n    className: \"checklist__search-input\",\n    placeholder: \"search\"\n  })), loading ? __jsx(Loading, {\n    width: \"20px\",\n    height: \"20px\"\n  }) : __jsx(\"ul\", {\n    className: \"categories__list\"\n  }, brandsList.map(brand => {\n    return __jsx(\"li\", {\n      key: brand.brandId,\n      className: \"categories__list-item d-flex justify-content-between align-items-center\"\n    }, __jsx(Link, {\n      href: `/${curr}-${lang}/search?brandId=${brand.brandId}&type=${SEARCH_TYPE_SEARCH}`\n    }, __jsx(\"a\", {\n      className: \"categories__list-link\"\n    }, brand.brandTitle)), __jsx(\"span\", null, \"(\", brand.goodsCount, \")\"));\n  })), resCount >= brandsPageSize && !loading && __jsx(React.Fragment, null, seeloading ? __jsx(Loading, {\n    width: \"20px\",\n    height: \"20px\"\n  }) : __jsx(\"a\", {\n    href: \"\",\n    onClick: handleSeeMoreClick,\n    className: \"seemore__link-brands\"\n  }, __jsx(Translate, {\n    id: \"seemore\"\n  }))));\n};\n\nexport default Brands;","map":null,"metadata":{},"sourceType":"module"}