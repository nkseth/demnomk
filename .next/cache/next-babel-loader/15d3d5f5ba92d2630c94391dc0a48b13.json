{"ast":null,"code":"import { normalizeLangForHeader, possibleLangAndCur } from \"./langRoutes\";\nimport errors from \"./../translations/errors.json\";\nimport Cookies from \"js-cookie\";\nimport axiosClient from \"./api/axios\";\nexport const generateArrNumberRange = (from, to) => {\n  const arr = [];\n  from = parseInt(from);\n  to = parseInt(to);\n  if (to > 10) to = 10;\n\n  for (let i = from; i <= to; i++) {\n    arr.push(i);\n  }\n\n  return arr;\n};\nexport const isAr = code => {\n  if (code === possibleLangAndCur.langs.arabic.code) return true;\n  return false;\n};\nexport const getErrorMsg = (lang, id) => {\n  let langId = 0;\n\n  if (possibleLangAndCur.langs.arabic.code === lang) {\n    langId = 1;\n  }\n\n  return errors[id][langId];\n};\nexport const setTokenCookie = (token, name = process.env.NEXT_PUBLIC_Token_Cookie_name) => {\n  Cookies.set(name, token, {\n    expires: parseInt(process.env.NEXT_PUBLIC_Cookies_expires_day),\n    domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain\n  });\n};\nexport const setCartCookie = (id, name = process.env.NEXT_PUBLIC_Token_Cookie_name_cart) => {\n  Cookies.set(name, id, {\n    expires: parseInt(process.env.NEXT_PUBLIC_Cookies_expires_day_cart),\n    domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain_cart\n  });\n};\nexport const slugy = str => {\n  if (str) str = str.replace(/\\s+/g, \"-\").toLowerCase();\n  return str;\n};\nexport const removeTokenCookie = () => {\n  const token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name);\n\n  if (token) {\n    Cookies.remove(process.env.NEXT_PUBLIC_Token_Cookie_name, {\n      domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain\n    });\n    axiosClient.setToken(null);\n  }\n};\nexport const removeCartCookie = () => {\n  const token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name_cart);\n\n  if (token) {\n    Cookies.remove(process.env.NEXT_PUBLIC_Token_Cookie_name_cart, {\n      domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain_cart\n    });\n    axiosClient.setCartId(null);\n  }\n};\nexport const setCouponCookie = (token, name = process.env.NEXT_PUBLIC_Token_Cookie_name_coupon) => {\n  Cookies.set(name, token, {\n    expires: parseInt(process.env.NEXT_PUBLIC_Cookies_expires_day_coupon),\n    domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain_coupon\n  });\n};\nexport const removeCouponCookie = () => {\n  const token = Cookies.get(process.env.NEXT_PUBLIC_Token_Cookie_name_coupon);\n\n  if (token) {\n    Cookies.remove(process.env.NEXT_PUBLIC_Token_Cookie_name_coupon, {\n      domain: process.env.NEXT_PUBLIC_Token_Cookie_Domain_coupon\n    });\n  }\n};\nexport const trimText = (text, maxLenght = 55) => {\n  if (!text || text.length === 0) return \"\";\n  let newText = text;\n\n  if (text.length > maxLenght) {\n    newText = text.substring(0, maxLenght) + \"...\";\n  }\n\n  return newText;\n};\nexport const roundDecimalNumber = number => {\n  if (number == 0) return 0;\n\n  if (number < 10) {\n    if (number < 5) {\n      return number;\n    } else {\n      return 5;\n    }\n  }\n\n  if (number < 100) {\n    let tempNumber = number / 10;\n    tempNumber = parseInt(tempNumber);\n    tempNumber = tempNumber * 10;\n    return tempNumber;\n  }\n\n  if (number < 1000) {\n    let tempNumber = number / 100;\n    tempNumber = parseInt(tempNumber);\n    tempNumber = tempNumber * 100;\n    return tempNumber;\n  }\n\n  if (number < 10000) {\n    let tempNumber = number / 100;\n    tempNumber = parseInt(tempNumber);\n    tempNumber = tempNumber * 100;\n    return tempNumber;\n  }\n\n  if (number < 100000) {\n    let tempNumber = number / 100;\n    tempNumber = parseInt(tempNumber);\n    tempNumber = tempNumber * 100;\n    return tempNumber;\n  }\n\n  if (number < 1000000) {\n    let tempNumber = number / 1000;\n    tempNumber = parseInt(tempNumber);\n    tempNumber = tempNumber * 1000;\n    return tempNumber;\n  }\n\n  if (number < 1000000) {\n    let tempNumber = number / 1000;\n    tempNumber = parseInt(tempNumber);\n    tempNumber = tempNumber * 1000;\n    return tempNumber;\n  }\n\n  return number;\n};\nexport const trimTextLonger = text => {\n  if (!text || text.length === 0) return \"\";\n  let newText = text;\n\n  if (text.length > 60) {\n    newText = text.substring(0, 60) + \"...\";\n  }\n\n  return newText;\n};\nexport const formatMoney = (amount, decimalCount = 2, decimal = \".\", thousands = \",\") => {\n  try {\n    decimalCount = Math.abs(decimalCount);\n    decimalCount = isNaN(decimalCount) ? 2 : decimalCount;\n    const negativeSign = amount < 0 ? \"-\" : \"\";\n    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();\n    let j = i.length > 3 ? i.length % 3 : 0;\n    return negativeSign + (j ? i.substr(0, j) + thousands : \"\") + i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : \"\");\n  } catch (e) {\n    console.log(e);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}