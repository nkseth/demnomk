{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\"; // import \"./GoodDetailTabs.scss\";\n// import \"./GoodDetailTabs-rtl.scss\";\n// import \"react-tabs/style/react-tabs.css\";\n\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport { Translate } from \"react-localize-redux\";\nimport SpecificationsTab from \"./SpecificationsTab\";\nimport RatingAndOverviews from \"./RatingAndOverviews\";\nimport { connect } from \"react-redux\";\nimport { fetchComment, LOADING, selectCommnetStatus, SUCCEEDED, selectSpecifiStatus, fetchSpecifi } from \"./../../GoodDetailSlice\";\nimport { withRouter } from \"next/router\";\nimport { Loading } from \"../../../../../common/\";\nconst REVIEW_AND_RATING = 2;\nconst SPECIFICATION = 1;\n\nclass GoodDetailTabs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleSwitchTab\", async (index, lastIndex) => {\n      /// check clicked tab is review and rating\n      if (index === REVIEW_AND_RATING && this.props.commnetStatus !== SUCCEEDED && this.state.comments.length === 0) {\n        let result = await this.props.fetchComment({\n          pageSize: this.state.commentsPageSize,\n          pageNumber: this.state.commentsPageNumber,\n          id: this.state.goodId\n        });\n        result = result.payload.result; // let result = {\n        //   status: 0,\n        //   result: {\n        //     surveyList: [\n        //       {\n        //         value: 0,\n        //         average: 0,\n        //       },\n        //       {\n        //         value: 5,\n        //         average: 10,\n        //       },\n        //       {\n        //         value: 10,\n        //         average: 10,\n        //       },\n        //     ],\n        //     goodsComment: [\n        //       {\n        //         commentId: 0,\n        //         commentText: \"string\",\n        //         commentDate: \"2020-10-22T07:37:55.834Z\",\n        //         customerName: \"string\",\n        //         likeCount: 0,\n        //         reviewPoint: 0,\n        //         isAccepted: true,\n        //         tGoodsCommentPoints: [\n        //           {\n        //             pointId: 0,\n        //             pointText: \"string\",\n        //             pointType: true,\n        //           },\n        //         ],\n        //       },\n        //       {\n        //         commentId: 10,\n        //         commentText: \"string\",\n        //         commentDate: \"2020-10-22T07:37:55.834Z\",\n        //         customerName: \"string\",\n        //         likeCount: 0,\n        //         reviewPoint: 0,\n        //         isAccepted: true,\n        //         tGoodsCommentPoints: [\n        //           {\n        //             pointId: 0,\n        //             pointText: \"string\",\n        //             pointType: true,\n        //           },\n        //         ],\n        //       },\n        //       {\n        //         commentId: 5,\n        //         commentText: \"commmentewsfsdf\",\n        //         commentDate: \"2020-10-22T07:37:55.834Z\",\n        //         customerName: \"john hall\",\n        //         likeCount: 40,\n        //         reviewPoint: 4,\n        //         isAccepted: true,\n        //         tGoodsCommentPoints: [\n        //           {\n        //             pointId: 1,\n        //             pointText: \"possetive\",\n        //             pointType: true,\n        //           },\n        //           {\n        //             pointId: 10,\n        //             pointText: \"false item\",\n        //             pointType: false,\n        //           },\n        //         ],\n        //       },\n        //     ],\n        //     goodsCommentCount: 1000,\n        //     allSurveyAverage: 5,\n        //   },\n        //   message: \"string\",\n        // };\n        // result = result.result;\n\n        let moreCommentExist = true;\n        if (result.goodsComment.length < this.state.commentsPageSize) moreCommentExist = false;\n        this.setState({\n          comments: result.goodsComment,\n          moreCommentExist: moreCommentExist,\n          reqResult: result\n        });\n      }\n\n      if (index === SPECIFICATION && this.props.specifiStatus !== SUCCEEDED) {\n        let result = await this.props.fetchSpecifi(this.state.goodId);\n        result = result.payload.result;\n        this.setState({\n          specifications: result\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleMoreReview\", async () => {\n      const newPageNumber = this.state.commentsPageNumber++;\n      let result = await this.props.fetchComment({\n        pageSize: this.state.pageSize,\n        pageNumber: newPageNumber,\n        id: this.state.goodId\n      });\n      result = result.payload.result;\n      let moreCommentExist = true;\n      if (result.goodsComment.length < this.state.commentsPageSize) moreCommentExist = false;\n      this.setState(state => {\n        const newCommentsList = [...state.comments, ...result.goodsComment];\n        return _objectSpread(_objectSpread({}, state), {}, {\n          commentsPageNumber: newPageNumber,\n          comments: newCommentsList,\n          moreCommentExist: moreCommentExist\n        });\n      });\n    });\n\n    this.comments = \"hello\";\n    this.state = {\n      commentsPageNumber: 1,\n      commentsPageSize: 10,\n      goodId: this.props.router.query.good[0],\n      comments: [],\n      moreCommentExist: false,\n      reqResult: {},\n      specifications: []\n    };\n  }\n\n  render() {\n    return __jsx(\"section\", {\n      className: \"goodDetailTabs\"\n    }, __jsx(Tabs, {\n      onSelect: this.handleSwitchTab\n    }, __jsx(TabList, null, __jsx(Tab, null, __jsx(Translate, {\n      id: \"tabs.overview\"\n    })), __jsx(Tab, null, __jsx(Translate, {\n      id: \"tabs.specification\"\n    })), __jsx(Tab, null, __jsx(Translate, {\n      id: \"tabs.rating\"\n    }))), __jsx(TabPanel, null, __jsx(\"div\", {\n      className: \"ql-editor\",\n      dangerouslySetInnerHTML: {\n        __html: this.props.description\n      }\n    })), __jsx(TabPanel, null, __jsx(SpecificationsTab, {\n      specifications: this.state.specifications\n    })), __jsx(TabPanel, null, this.state.comments.length === 0 && this.props.commnetStatus === LOADING ? __jsx(Loading, {\n      type: \"gray\",\n      width: \"80px\"\n    }) : __jsx(RatingAndOverviews, {\n      asideData: this.state.reqResult,\n      data: this.state.comments,\n      moreCommentExist: this.state.moreCommentExist,\n      handleMoreReview: this.handleMoreReview\n    }))));\n  }\n\n}\n\nconst mapDispatchToProps = {\n  fetchComment,\n  fetchSpecifi\n};\n\nconst mapStateToProps = state => {\n  return {\n    commnetStatus: selectCommnetStatus(state),\n    specifiStatus: selectSpecifiStatus(state)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(GoodDetailTabs));","map":null,"metadata":{},"sourceType":"module"}